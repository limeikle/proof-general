NAME:			SymbolEditorFailure
LAST UDPATED:	$Date: 2006/12/22 09:45:49 $
UPDATED BY:		$Author: gdutton $
REPORTER:		gdutton
STATUS:			unresolved

DESCRIPTION:

 The symbol editor cannot load the default symbol table.  Opening new or existing
 .sym files within the project works fine, however.

XX TEST CASE: (this functionality has been removed)

 Start a new Proof General session.
 Choose "Proof General... Edit Symbol Table" from the menu.
 
TEST CASE:

 Start a new Proof General session.
 Do one of the following:
 - Create a new 'Proof Project' using the wizard.
 - Right-click on an existing proof project, and choose "create default symbol table"
 Your new symbol table should be created, with default name .default.sym
 Double-click on this file to edit it.
 
TEST CASE (
 
FURTHER INFORMATION:

 UPDATE 21-12-2006 gd:
 I have reworked the symbol table to be a per-project file, rather than a workspace-global idea.
 
 Still to fix:
 - if we want to reinstate the idea of opening the default symbol table from a project-independent
   location, we need to:
   > be able to discover (at least the name of) the current project.
   > be able to open an appropriate editor through use of (perhaps) IFileEditorInput -- in which case
   	 the bug below still stands (it's just disabled).

 ------

 NB: da: This problem was introduced by the code changes for the Eclipse 3.2 API.
 It ought to be possible to revert this change to fix the previous behaviour
 if it's too difficult to repair the new code.
   
( Stack Trace and console output as of 21-11-06 )
file name : defaultSymbolTable.sym
java.lang.IllegalArgumentException
	at org.eclipse.ui.part.FileEditorInput.<init>(FileEditorInput.java:43)
	at ed.inf.proofgeneral.symbols.EditSymbolTableAction.run(EditSymbolTableAction.java:68)
	at ed.inf.proofgeneral.EclipseAction.run(EclipseAction.java:35)
	at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:254)
	at org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:229)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:539)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:488)
	at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:400)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1085)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3166)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2842)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1914)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1878)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:419)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:95)
	at org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:400)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:336)
	at org.eclipse.core.launcher.Main.basicRun(Main.java:280)
	at org.eclipse.core.launcher.Main.run(Main.java:977)
	at org.eclipse.core.launcher.Main.main(Main.java:952)
found file: /afs/inf.ed.ac.uk/user/g/gdutton/workspace/ed.inf.proofgeneral/config/defaultSymbolTable.sym

FIX NEEDED:

Eventual resolution:
  * Ideally we could put symbol details into project-specific preferences.
  
  da: Actually I think symbol tables should be associated with proof projects rather 
  than user preferences.  So they can be kept as files in the workspace.
  They should be kept as settings/dotfiles.  It's fine to just have a single
  symbol table per project and use the default one if that doesn't exist.

Suggested fixes:

  * Ensure that symbols are accessible using internal 'IFile' resources, and therefore
    not processed by "the dreaded" JavaFileEditorInput.
  
  * Open the default file from the plugin on startup, and save it a settings file
  in the open project if it is modified.  Don't support saving/loading of symbol
  files from anywhere else, it adds pointless complications.
