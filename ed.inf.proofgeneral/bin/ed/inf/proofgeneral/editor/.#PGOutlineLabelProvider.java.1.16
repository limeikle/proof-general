/*
 Created on 30-May-2004
 */
package ed.inf.proofgeneral.editor;
import java.io.*;
import java.util.*;

import org.dom4j.Attribute;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.text.Position;
import org.eclipse.jface.text.TypedPosition;
import org.eclipse.jface.text.TypedRegion;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;

import ed.inf.proofgeneral.Constants;
import ed.inf.proofgeneral.ProofGeneralPlugin;
import ed.inf.proofgeneral.sessionmanager.*;
import ed.inf.proofgeneral.sessionmanager.PGIPSyntax;
import ed.inf.winterstein.methods.Methods;


/**
 * This class creates the strings displayed in the Outline View
 @author Daniel Winterstein
 */
public class PGOutlineLabelProvider extends LabelProvider {
	
	public PGOutlineLabelProvider(PGIPSyntax syntax,ProofScriptDocument doc) {
		super();
		this.syntax = syntax;
		this.doc=doc;
	}
	private PGIPSyntax syntax;
	private ProofScriptDocument doc;
	
	static int MAX_TEXT_LENGTH = 25;
	
	public String getText(Object obj) {
		if (obj instanceof TypedPosition) { // Why does Eclipse have 2 isomorphic classes? Which it continually converts between?
			TypedPosition posn = (TypedPosition) obj;
			obj = new TypedRegion(posn.offset,posn.length,posn.getType());
		}
		if (obj instanceof TypedRegion) {
			TypedRegion tr = (TypedRegion) obj;
			return tr.getType()+" ["+Integer.toString(tr.getOffset())+","+
			Integer.toString(tr.getOffset()+tr.getLength())+"]";
		}
		if (obj instanceof PGContentOutlinePage.Line) { // convert into "-----"
			return "-----------";
			//StringBuffer sb = new StringBuffer(MAX_TEXT_LENGTH);
			//for (int i=0; i<MAX_TEXT_LENGTH-1; i++) sb.setCharAt(i,'-');
			//return sb.toString();
		}
		if (!(obj instanceof DocElement)) return obj.toString();		
		DocElement e = (DocElement) obj;  
		String type = e.getName();
		List atts = e.attributes();
		String text = e.getTextTrim();
		if (ProofGeneralPlugin.debug()) text = type + ": "+text;
		
		//		if (syntax.subType(type,PGIPSyntax.OPENTHEOREM)) {
		//		    if (e.attribute("thmname") != null)
		//		        text = "Thm: "+ e.attributeValue("thmname");
		//    } else 
		
		text = getBasicOutlineText(e);
		text = Methods.trim(text);		
	
		//TODO much much slicker (and not much harder) would be to change the icons
		// Mark which elements have been processed or not
		Position posn = e.getPosition();
		if (posn.offset+posn.length<=doc.fProcessedOffset+1) {
			text = Constants.CHAR_SENT+text;
		} else if (posn.offset < doc.fLockOffset+1) {  //posn.offset+posn.length<=doc.fLockOffset+1) {
			text = Constants.CHAR_PROCESSING+text;
		} else {
			text = Constants.CHAR_UNSENT+text;
		}
		
		if (text.length()>MAX_TEXT_LENGTH)
			text = text.substring(0,MAX_TEXT_LENGTH-3)+"...";
		return text;
	}
	
	
	/**
	 * @param e
	 * @param type
	 * @param atts
	 * @param text
	 * @return
	 */
	private String getBasicOutlineText(DocElement e) {
		String type = e.getName();
		List atts = e.attributes();
		String text = e.getTextTrim();
		if (syntax.subType(type,PGIPSyntax.CONTAINER)) {
			if (e.elements().size()==0)
				return "(empty container)";  //shouldn't happen
			DocElement firstChild = (DocElement)e.elements().get(0);
			if (syntax.subType(type, PGIPSyntax.PROOF_CONTAINER)) {
				if (syntax.subType(firstChild.getType(), PGIPSyntax.OPENTHEOREM)) {
				  if (firstChild.attribute("thmname") != null) {
					  return //"Thm: "+ 
						  firstChild.attributeValue("thmname");
				  }
				  //goal doesn't have a name, take value
				  return firstChild.getStringValue();
				}
				return "(incomplete)";   //shouldn't happen				
			}
			//containers otherwise get the text of their first element
			text = getBasicOutlineText(firstChild);
			//    HACK Isabelle specific catch for headers&subsections comments
			if (text.indexOf("{*")>=0) 
				text = text.substring(text.indexOf("{*")+2);
			if (text.endsWith("*}"))
				text = text.substring(0, text.length()-2);
			return text;
		} else if (syntax.subType(type,PGIPSyntax.PROOF)) {
			return "proof";
		} else if (syntax.subType(type,PGIPSyntax.SPURIOUSCOMMAND) && text.indexOf("header")!=-1) {
			// HACK Isabelle specific catch for header comments
			return text.substring(text.indexOf("{*")+2,text.indexOf("*}"));
		} else if (!syntax.subType(type, PGIPSyntax.COMMENT)) {		    
			String name,as="";
			for(Iterator i = atts.iterator(); i.hasNext();) {
				Attribute att = (Attribute) i.next();
				name = att.getName();
				//if (name.equals("name") || name.equals("label")) {
				as += att.getText();
				//}
			}
			//	    	text = type+" "+as;
			return text;
		} else
			return text;
	}
	
	
	
	public void dispose() {
		super.dispose();        
	}
	//Image parseImage=null;
	public Image getImage(Object obj) {
		if (obj instanceof String) return null;
		if (obj instanceof PGContentOutlinePage.ParseInfo) {
			return ProofGeneralPlugin.getImage(TREE_ICON);
		}
		if (obj instanceof DocElement) {
			DocElement de = (DocElement) obj;
			String type = de.getType();
			if (syntax.subType(type,PGIPSyntax.POSTPONE_GOAL)
					|| syntax.subType(type,PGIPSyntax.GIVE_UP_GOAL)) {		        
				return PlatformUI.getWorkbench().getSharedImages()
				.getImage(ISharedImages.IMG_OBJS_WARN_TSK);
			} else if (syntax.subType(type,PGIPSyntax.PROOFSTEP)) {
				return ProofGeneralPlugin.getImage(PROOFSTEP_ICON);
			} else if (syntax.subType(type,PGIPSyntax.COMMENT)) {
				return ProofGeneralPlugin.getImage(COMMENT_ICON);
			} else if (syntax.subType(type,PGIPSyntax.OPENTHEOREM)) {
				return ProofGeneralPlugin.getImage(OPENGOAL_ICON);
			} else if (syntax.subType(type,PGIPSyntax.CLOSETHEOREM)) {
				return ProofGeneralPlugin.getImage(CLOSEGOAL_ICON);
			} else if (syntax.subType(type,PGIPSyntax.PROOF_CONTAINER)) {
				// does this proof contain sorrys or oopses?
				if (elementContains(de, PGIPSyntax.POSTPONE_GOAL))
					return ProofGeneralPlugin.getImage(PROOF_OOPS_ICON);
				if (elementContains(de, PGIPSyntax.GIVE_UP_GOAL))
					return ProofGeneralPlugin.getImage(PROOF_SORRY_ICON);
				if (elementContains(de, PGIPSyntax.CLOSETHEOREM))
					return ProofGeneralPlugin.getImage(PROOF_OKAY_ICON);
				//		    	if (elementContains(de, PGIPSyntax.POSTPONE_GOAL))
				//		    		return ProofGeneralPlugin.getImage(PROOF_TODO_ICON);
				return ProofGeneralPlugin.getImage(PROOF_SORRY_ICON);
			} else if (syntax.subType(type,PGIPSyntax.CONTAINER)) {
				return ProofGeneralPlugin.getImage(SECTION_ICON);
			} else if (syntax.subType(type,PGIPSyntax.PROOF)) {
				// does this proof contain sorrys or oopses?
				// old-style container, not used any more
				if (!noSorrys(de)) {
					// proof is flawed
					return PlatformUI.getWorkbench().getSharedImages()
					.getImage(ISharedImages.IMG_OBJS_WARN_TSK);
				}
				return null;
			}
			
		}
		String imageKey = ISharedImages. IMG_OBJ_ELEMENT;	    
		return PlatformUI.getWorkbench().getSharedImages().getImage(imageKey);
	}
	/**
	 * @param de
	 * @param type
	 * @return true if the docElement contains a descendant of type type
	 */
	public boolean elementContains(DocElement de, String type) {
		if (syntax.subType(de.getType(), type)) return true;
		List kids = de.elements();
		for(Iterator i = kids.iterator(); i.hasNext();) {
			try {
				DocElement kde = (DocElement) i.next();
				if (elementContains(kde, type)) return true;
			} catch (Exception x) {}	        
		}
		return false;
	}
	
	/**
	 * Does this element contain any abandon-goal type commands?
	 * @param de
	 * @return true means no sorrys (ie. this might be a complete proof)
	 */
	public boolean noSorrys(DocElement de) {
		if (syntax.subType(de.getType(),PGIPSyntax.POSTPONE_GOAL)
				|| syntax.subType(de.getType(),PGIPSyntax.GIVE_UP_GOAL)) return false;
		List kids = de.elements();
		if (kids==null || kids.size()==0) return true;
		DocElement kde;
		for(Iterator i = kids.iterator(); i.hasNext();) {
			try {
				kde = (DocElement) i.next();
				if (!noSorrys(kde)) return false;
			} catch (Exception x) {}	        
		}
		return true;
	}
	
	public static final String TREE_ICON = "tree.gif";
	public static final String PROOFSTEP_ICON = "footstep16.gif";
	public static final String OPENGOAL_ICON = "dooropen16.gif";
	public static final String CLOSEGOAL_ICON = "doorclose16.gif";
	public static final String COMMENT_ICON = "comment.gif";
	public static final String DEFAULT_ICON = "defaultOutlineIcon.gif";
	
	private static final String SECTION_ICON = "section.gif";
	private static final String PROOF_OKAY_ICON = "bullet-check.gif";
	private static final String PROOF_SORRY_ICON = "bullet-bang.gif";
	private static final String PROOF_OOPS_ICON = "bullet-question.gif";
	
}
