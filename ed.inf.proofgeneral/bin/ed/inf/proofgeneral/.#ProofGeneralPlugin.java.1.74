/*
 * Created on 03-Feb-2004
 */
package ed.inf.proofgeneral;

/**
 * Plugin details and branding for the Eclipse Proof General Feature
 * Also stores some plugin-wide objects
 * @author Daniel Winterstein
 *

 *FIXME errors with mixed parser? is it even doing sensible things?
 FIXME Isabelle emits unescaped PGML - this screws up xml parsing eg.
 <pgip class = "pg" origin = "Isabelle/Isar" id = "/s9902178/1101038050.362" refseq = "7" refid = "PG-Eclipse" seq = "13">
 <proofstate>
 <pgml><statedisplay>
 proof (prove): step 0 
 fixed variables: Q 
 goal (lemma (Wally), 1 subgoal):
 1. <atom kind = "free">Q</atom> \<longrightarrow> <atom kind = "free">Q</atom>
 </statedisplay></pgml>
 </proofstate></pgip>
 Should be \&lt;longrightarrow&gt;
 *FIXME Retract to activate does not seem to do anything!!
 * FIXME the proof state button (a) should update, and (b) should initiate a forced sync when pushed
 * FIXME define a command scope/context to prevent clashes (e.g. F3)
 * TODO make findFile check that there is only 1 match, output an error otherwise.
 * TODO Allow regular expressions in the symbol table editor. And possibly support recursive use of symbol expansion/compression.
 * TODO symbol changes - are old symbols properly protected?
 * TODO Support double-character unicode symbols
 * TODO check that bg parses display errors properly, otherwise edit error
 * TODO interrupt command
 * TODO undoing a lcoked-but-not-processed command should issue an interrupt, then unlock
 * TODO display errors for bugs in syntax 
 * TODO sort out contentAssistant auto-complete feature
 * TODO make parsing happen in the background
 * FIXME There are multi-line commands that can be parsed as one line. The next-command parser should not be happy until it finds two commands or end-of-file.
 * TODO Get a list of completions from prover using askids (but in the background)
 * TODO There seem to be a bug in PG(Prover?)Action:
 *   cannot run ed.inf.proofgeneral.editor.actions.GotoAction; shouldn't have been enabled
 *  This occurred when running without access to Isabelle (i.e. the prover was labelled dead)
 * 
 */

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPluginDescriptor;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.internal.Workbench;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

import ed.inf.customswt.AssocListFieldEditor;
import ed.inf.proofgeneral.editor.ProofScriptEditor;
import ed.inf.proofgeneral.prefpages.PrefsPageBackend;
import ed.inf.proofgeneral.sessionmanager.SessionManager;
import ed.inf.proofgeneral.symbols.HTMLSymbols;
import ed.inf.winterstein.methods.EclipseMethods;
import ed.inf.winterstein.methods.Methods;


public class ProofGeneralPlugin extends AbstractUIPlugin {
	
	//TODO these should all be preferences or command-line options
	
	/** debug flag to get prover i/o displayed */
	public static boolean LOG_PROVER_IO = false;
	
	/** debug flag to see events as they fire */
	public static boolean LOG_EVENTS_FIRING = false;		
	
	/** debug flag to see events as they run */
	public static boolean LOG_EVENTS_RUNNING = false;		
	
	/** debug flag to see what happens on 'interrupt' */
	public static boolean LOG_INTERRUPT_ACTIONS = true;
	
	/** whether to try aggressively to maintain a local copy of 
	 *  prover knowledge, by doing such time-hogging things as
	 *  asking for lists of lemmas  */
	
	public static boolean PROVER_KNOWLEDGE_GRAB_ENABLED = true;
	/** whether Next (and Undo) should step through individual comments 
	 *  (normal behaviour was false, every step does a command) */  //-AH
	public static boolean SEND_COMMAND_STEPS_THROUGH_COMMENTS = true;
	
	/** new pgip model doesn't need undoing of spurious commands (it never did anything anyway);
	 *  but my version of isabelle doesn't recognise "undoitem" so we fall back to 
	 *  the spurious command ProofGeneral.undo; for theorems (and it's needed for spurious commands too)
	 */ //-AH
	public static boolean SEND_OLD_STYLE_UNDO_INSTEAD_OF_UNDOITEM = true;
	
	/** whether to scroll the buffer to display the command when "next" is hit */
	public static boolean SCROLL_ON_NEXT_COMMAND = true;
	
	
	// The shared instance.
	private static ProofGeneralPlugin plugin;
	public static String PLUGIN_ID;
	/**
	 * Used to control generation of useful-but-ugly debug info,
	 * inefficient reloading of files, etc.
	 */
	public static boolean debug() {
		//System.out.println("debug mode");
		//return true; //TODO debug
		return getBooleanPref("DEBUG DEBUG");
	}
	
	/**
	 It is daft that the active editor is not a global variable. 
	 When a thing *really is* global, it should use a global variable. 
	 Passing references around everywhere for such objects is not good modular programming.
	 It is irksome, in-efficeint, 
	 and (most importantly) likely to lead to bugs when updates aren't properly passed along a chain.
	 An example of the mistaken over-application of the object-oriented ideology.
	 */
	static IEditorPart activeEditor = null;
	
	/**
	 * @param activeEditor The activeEditor to set.
	 * Should be called by any action bar contributors, or other things that find out about avtive editors.
	 */
	public static void setActiveEditor(IEditorPart activeEditor) {
		ProofGeneralPlugin.activeEditor = activeEditor;
	}
	/**
	 * @return Returns the activeEditor.
	 */
	public static IEditorPart getActiveEditor() {
		return activeEditor;
	}
	
	/**
	 * @return the active session manager, or null.
	 */
	public static SessionManager getActiveSessionManager() {
		if (sessionManagers.size()==1) { // easy case
			Collection vc = sessionManagers.values();
			Iterator i = vc.iterator();
			return (SessionManager) i.next();
		}
		// otherwise go through the editor
		IEditorPart editor = getActiveEditor();
		if (!(editor instanceof ProofScriptEditor)) return null;
		ProofScriptEditor pse = (ProofScriptEditor) editor;
		return (SessionManager) sessionManagers.get(pse.getEditorInput().getName());
	}
	
	/**
	 * A flag, indicating whether or not the plugin is being closed down. 
	 * *Useless* for editors, as they shut first 
	 
	 */
	private static boolean SHUTTING_DOWN = false;
	
	/* (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		SHUTTING_DOWN = true; // TODO this method is called too late for this to be useful!
		for(Iterator i = sessionManagers.values().iterator(); i.hasNext();) {
			((SessionManager)i.next()).stopSessionBg(null);
		}
		dispose();
		super.stop(context);
	}
	/** tells whether eclipse is shutting down; cannot tell definitively, may return false negatives;
	 *  uses getActiveEditor and a cast from IWorkbench to Workbench
	 * @return true if we can tell that eclipse is shutting down
	 */
	public static boolean isShuttingDown() {
		if (SHUTTING_DOWN) return true;
		IEditorPart ed = getActiveEditor();
		if (ed==null) return false;
		return ((Workbench)ed.getSite().getWorkbenchWindow().getWorkbench()).isClosing();
	}
	
	
	/**
	 * Dispose of images and other resources.
	 */
	void dispose() {
		// clean up images
		for (Iterator i = images.values().iterator(); i.hasNext();) {
			Image image = (Image) i.next();
			image.dispose();
		}
	}
	
	//Resource bundle.
	protected static ResourceBundle resourceBundle;
	
	/**
	 * Returns the string from the plugin's resource bundle,
	 * or null if not found.
	 */
	public static String getResourceString(String key) {
		ResourceBundle bundle =
			ProofGeneralPlugin.getDefault().getResourceBundle();
		try {
			return bundle.getString(key);
		} catch (MissingResourceException e) {
			return null;
		}
	}
	
	/**
	 * Returns the plugin's resource bundle,
	 */
	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}
	
	
	/*
	 * The constructor.
	 */
	public ProofGeneralPlugin(IPluginDescriptor descriptor) {
		super(descriptor);
		plugin = this;			
		try {
			resourceBundle =
				ResourceBundle.getBundle(
				"ed.inf.proofgeneral.PGResourceBundle");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
		fColorProvider = new PGColorProvider();
		PLUGIN_ID = descriptor.getUniqueIdentifier();
	}
	
	/*
	 * Returns the shared instance.
	 */
	public static ProofGeneralPlugin getDefault() {
		return plugin;
	}
	
	
	/*public static Object getPreference(String prefName) {
	 IPreferenceStore prefs = getDefault().getPreferenceStore();
	 if (prefs.contains(prefName)) return null;
	 
	 }*/
	
	/*
	 * Returns the workspace instance.
	 */
	public static IWorkspace getWorkspace() {
		return ResourcesPlugin.getWorkspace();			
	}
	
	/*
	 * Initializes a preference store with default preference values 
	 * for this plug-in.
	 * 
	 * @param store the preference store to fill
	 */		
	protected void initializeDefaultPreferences(IPreferenceStore store) {
		PrefsPageBackend.initializeDefaultPreferences(store);
		//store.setDefault("Target","Ruprecht");
		//store.setDefault("SubTarget","Monkey");
		HTMLSymbols.init();
	}
	
	/**
	 * A session manager handles communications with a prover
	 * Currently we limit PG to having only one session at a time 
	 */
	protected static Map sessionManagers = new HashMap();
	//protected Object proverId = new Object();
	/**
	 * Set a session manager as THE session manager for its prover-name
	 */
	public void setSessionManager(SessionManager sm) {			
		sessionManagers.put(sm.proverInfo.name,sm);						
	}
	
	/** 
	 * Select the appropriate session manager.
	 * (create it if necc.)
	 * @param fileName
	 * @return
	 */
	public synchronized SessionManager getSessionManager(String fileName) {
		String fileAssoc = getPreferenceStore().getString(Constants.PREF_FILE_ASSOCIATIONS);
		if (fileAssoc == null || fileAssoc.equals("")) {		        
			ErrorUI.getDefault().signalError(new Exception("Could not find the File Associations preference!\n"
					+"Please check your setting in preferences->Proof General."));
			return null;
		}
		Map assocs = AssocListFieldEditor.makeMap(fileAssoc);
		String pName = null;		    
		for(Iterator i = assocs.keySet().iterator(); i.hasNext();) {
			String key = (String) i.next();
			if (fileName.endsWith(key)) {
				pName = (String) assocs.get(key);
				pName = pName.intern();
				break;
			}
		}
		if (pName==null) {
			EclipseMethods.errorDialog(new Exception(
					Methods.lineEnd("Proof General does not know how to handle this file:\nIt could not find a File Association for "+fileName)+
					"Known file associations: "+fileAssoc+"\n\nPlease check your setting in preferences->Proof General."));
			return null;
		}
		if (sessionManagers.get(pName) != null) return (SessionManager) sessionManagers.get(pName);
		SessionManager sm = new SessionManager(pName);
	  //now this is synced, to prevent two instances for the same type, and also 
		//now we call PGPlugin.setSM in SM.init rather than here, sync'd with adding allSM listeners  -AH 2005 jun 01
		return sm;
	}
	
	public synchronized SessionManager getProverManager(String proverName) {
		if (sessionManagers.get(proverName) != null) return (SessionManager) sessionManagers.get(proverName);
		SessionManager sm = new SessionManager(proverName);						
		return sm;		   
	}
	
	/** 
	 * @return all open session managers
	 */
	public SessionManager[] getSessionManagers() {
		SessionManager[] sms = new SessionManager[sessionManagers.size()];
		return (SessionManager[]) sessionManagers.values().toArray(sms);
	}
	
	PGColorProvider fColorProvider;
	
	/**
	 * Returns the singleton color provider.
	 */
	public PGColorProvider getPGColorProvider() {
		return fColorProvider;
	}
	
	/**
	 * @return a url string pointing to the base of the help documentation
	 * doing helpUrl+pageName should result in a valid help page url
	 */
	public String getHelpUrl() {
		String url = getPreferenceStore().getString("Help URL");
		// if the url is missing an end char, add / as the default one
		// recognised end chars: /,=,? (for cgi based help)
		if (!url.endsWith("/") && !url.endsWith("=") && !url.endsWith("?")) {
			url += "/";
		}
		return url;	    	    
	}
	
	/**
	 * The pathname for the plugin
	 * @return
	 */
	public static String getDir() {
		if (getDefault()==null) { 
			//also modified for use in non-eclipse context -AH
			return "";
		} else {
			//URL url = Platform.find(Platform.getBundle(PLUGIN_ID),new Path("/"));
			//String dir = url.getPath();
			String dir = getDefault().getBundle().getLocation(); //   getDescriptor().  getInstallURL().getPath();
			dir = dir.replaceFirst("^.*[:@]","");	// strip off some junk from the location
			if (!dir.endsWith("/")) dir += "/";
			return dir;
		}
	}
	
	/**
	 * Search for an icon file in the PG icons directory
	 * and create an ImageDescriptor
	 * @param fileName
	 * @return
	 */
	public static ImageDescriptor getImageDescriptor(String fileName) {
		if (!fileName.startsWith("icons/")) fileName = "icons/"+fileName;
		return ImageDescriptor.createFromFile(null,
				ProofGeneralPlugin.getDir()+fileName);
	}
	
	/**
	 * Return the image object for this file. 
	 * Using this method means PG handles the storage and disposal of images. 
	 * @param fileName
	 * @return
	 */
	public static Image getImage(String fileName) {
		if (!fileName.startsWith("icons/")) fileName = "icons/"+fileName;	    
		Image i = (Image) images.get(fileName);
		if (i!=null) return i;
		ImageDescriptor id = getImageDescriptor(fileName);
		i = id.createImage();
		images.put(fileName,i);
		return i;
	}
	/**
	 * Map image names to images
	 */
	static Map images = new HashMap();
	
	//following code added/edited so that a command-line version can be run w/o launching the eclipse whale  -AH
	static IPreferenceStore staticPreferenceStore = null;
	/** caller can override the preference store, eg for compatibility these methods can be called in
	 *  a non-eclipse context
	 * @param ps the user-specified preference store
	 */
	public static void setStaticPreferenceStore(IPreferenceStore ps) {
		staticPreferenceStore = ps;
	}
	public static IPreferenceStore getStaticPreferenceStore() {
		if (staticPreferenceStore!=null) return staticPreferenceStore;
		if (plugin==null) throw new RuntimeException("cannot get preference store; none set in ProofGeneralPlugin.setStaticPreferenceStore() and Eclipse is not available");
		return plugin.getPreferenceStore();
	}
	
	public static boolean getBooleanPref(String name) {
		return getStaticPreferenceStore().getBoolean(name);
	}
	public static int getIntegerPref(String name) {
		return getStaticPreferenceStore().getInt(name);
	}
	public static String getStringPref(String name) {
		return getStaticPreferenceStore().getString(name);
	}
	
	/**
	 * A drudge for doing background work (e.g. parsing).
	 */
	public static Drudge drudge = new Drudge();	
	
	/** returns true if we are running an eclipse setting 
	 *  (routines may be called instead by standalone Isabelle interface) */  
	public static boolean isEclipseMode() { return plugin!=null; }
}
