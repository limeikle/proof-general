package ed.inf.proofgeneral.outputviewer;

//import java.util.ArrayList;
import java.util.Iterator;

import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.part.*;
import org.eclipse.jface.viewers.*;
import org.eclipse.swt.graphics.Image;
import org.eclipse.jface.action.*;
import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.ui.*;
import org.eclipse.ui.help.WorkbenchHelp;
import org.eclipse.ui.ide.*;
import org.eclipse.swt.widgets.*;
//import org.eclipse.ui.console.IConsoleConstants;
//import org.eclipse.ui.internal.console.*;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.swt.SWT;
//import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.text.*;

import ed.inf.heneveld.utils.General;
import ed.inf.heneveld.utils.process.RunnableWithParams;
import ed.inf.proofgeneral.*;
import ed.inf.proofgeneral.pgip2html.Converter;
import ed.inf.proofgeneral.sessionmanager.*;
import ed.inf.proofgeneral.sessionmanager.events.PGIPEvent;
import ed.inf.winterstein.methods.Methods;
import ed.inf.proofgeneral.symbols.*;


/**
 * This is the basic output view. It simply displays all PGIP events.
 * 
 * Subclasses can implement more interesting behaviour by changing the methods:
 * 
 * 		eventFilter
 * 
 * 		pgipEvent
 */

public abstract class OutputView extends ViewPart 
implements PGIPListener {
    
    /**
     * The widget that displays the text.
     */
	protected HTMLTextLabel label;
	/**
	 * Stick messages in here if label is null
	 * (ie. if the view has not been created yet). 
	 */
	String store = "";

	//this field isn't actually used(!) -- we can assume it is connected if there is a SM open and we've addAllSMListeners this
	//public boolean connected = false;
	
	
	/**
	 * Decide whether or not to display this event
	 * Subclass to create specialised output viewer (eg. errors only)
	 * @param event
	 * @return
	 */
	public boolean eventFilter(PGIPEvent event) {
		return true;
	}
	
	/** changes the text, and queues a method to update the viewer ONCE */
	public void setText(final String msg) {
		store = msg;
		new RunnableWithParams(null, "LatestView call to setText") {
			public void run() {
				if (store==msg) setTextLabel();
				//else 				//it has been updated again
			}
		}.callDefaultDisplayAsyncExec();
	}
	
	void setTextLabel() {
		String text = store;
		try {
			if (ProofGeneralPlugin.getBooleanPref(Constants.PREF_SYMBOL_SUPPORT))
				text = HTMLSymbols.useHtml(text,true);
			else text = HTMLSymbols.useAscii(text);
		} catch (Exception e) {e.printStackTrace();}
		try {
			//long ms = System.currentTimeMillis();
			//System.out.println("setting OutputViewer state: "+text);
	    store = text;
			if (label!=null) {
				label.setText(text);
				//scroll it to the bottom  -- doesn't work, and is wrong thread (?? or is it ??)
//				if (parent!=null && parent.getVerticalBar()!=null) {
//					ScrollBar vb = parent.getVerticalBar();
//					if (vb.getMaximum()>vb.getThumb())
//					  vb.setSelection(vb.getMaximum()-vb.getThumb());
//				}
			}
			//ms = System.currentTimeMillis() - ms;
			//System.out.println(""+General.makeDateString()+" ["+(General.makeTimeString(ms))+"]:  "+this+"  "+text);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public String getText() {
		return store;
//		if (store!=null) return store;
//	  if (label != null) return label.getText();	    
//	  return null;
	}
	
	
	//private DrillDownAdapter drillDownAdapter;
	protected Action clearAction;
	//private Action doubleClickAction;

	

	/**
	 * The constructor.
	 */
	public OutputView() {
		super();
		SessionManager.addAllSessionManagerListener(this);
//    connected = true;

//		//		 register as a PGIP event listener with *ALL* the session managers
//		SessionManager[] sms = ProofGeneralPlugin.getDefault().getSessionManagers();
//		for(int i=0; i<sms.length; i++) {
//		    SessionManager sm = sms[i];
//		    if (sm != null) {
//		        sm.addListener(this); // this is mirrored in SessionManager(), to protect against odd starting orders
//		        connected = true;
//		    } 
//		}		
	}
	
	/**
	 * Subclasses must implement this!
	 * @return
	 */
	static public OutputView getDefault() {
		//throw new Exception("getDefault method not implemented!");
		return null;
	}
	
	public void dispose() {
		SessionManager.removeAllSessionManagerListener(this);
		SessionManager[] sms = ProofGeneralPlugin.getDefault().getSessionManagers();
		for(int i=0; i<sms.length; i++) {
		    SessionManager sm = sms[i];
		    if (sm != null) {
		        sm.removeListener(this);
		        //connected = false;
		    } 
		}		
		for(Iterator i=talkers.iterator(); i.hasNext();) {
		    try {((PGEventMaker)i.next()).removeListener(this);}
		    catch (Exception x) {}
	    }
		super.dispose();
	}

	/**	 given an incoming pgip event, append it to the existing text*/
	public void pgipEvent(PGIPEvent event) {
		if (eventFilter(event)) {
			if (label != null) {
				String text = Methods.lineEnd(label.getText()+"<br/>")
							  +Converter.getDisplayHtml(event.parseTree,false);
							  //+HTMLWriter.writer.asHTML(event.parseTree);
				//setText(text);
				new RunnableWithParams(new Object[] { text }, "OutputViewer.pgipEvent call to setText") {
					public void run() {
						setText((String)p[0]);
					}
				}.callDefaultDisplayAsyncExec();							
			}
		}
	}
	
	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	public void createPartControl(Composite parent) {
	  label = new HTMLTextLabel(parent);
		label.setText(store); 
		WorkbenchHelp.setHelp(label.browser,"ed.inf.proofgeneral.generic");
		makeActions();
		contributeToActionBars();
		this.parent = parent;
		if (!initialised) init();
	}
	
	Composite parent = null;

	boolean initialised = false;
	/**
	 * A view may need to be initialised. Sub-class this to do so.
	 * It will typically be called once, at the end of createPartControl.
	 *
	 */
	protected void init() {	   
	    initialised=true;
	}

	protected void contributeToActionBars() {
		IActionBars bars = getViewSite().getActionBars();
		fillLocalToolBar(bars.getToolBarManager());
	}
	
	/**
	 * Change this to add more actions to the toolbar
	 * @param manager
	 */
	protected void fillLocalToolBar(IToolBarManager manager) {
		manager.add(clearAction);
		manager.add(new Separator());
	}

	abstract protected void makeActions();
	
	    
	/**
	 * A button action that clears the viewer 
	   @author Daniel Winterstein
	 */
	class ClearAction extends Action {
	    OutputView view;
	    public ClearAction(OutputView view) {
	        this.view = view;
	        setText("Clear");
			setToolTipText("Clear the viewer");
			//clearAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().		        
			//		getImageDescriptor( ISharedImages.IMG_TOOL_DELETE));			
			//setHoverImageDescriptor(ConsolePluginImages.getImageDescriptor(IConsoleConstants.IMG_LCL_CLEAR));		
			//setDisabledImageDescriptor(ConsolePluginImages.getImageDescriptor(IInternalConsoleConstants.IMG_DLCL_CLEAR));
			ImageDescriptor imd = ProofGeneralPlugin.getImageDescriptor("console_clear.gif");
			setImageDescriptor(imd);			        
			        //ConsolePluginImages.getImageDescriptor(IInternalConsoleConstants.IMG_ELCL_CLEAR));
	    }
		public void run() {	
			view.setText("");
		}		
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		//viewer.getControl().setFocus();
	}
	
	public void addTalker(PGEventMaker listenee) {
	    talkers.add(listenee);
	}
	public void removeTalker(PGEventMaker listenee) {
	    talkers.remove(listenee);
	}
	
}