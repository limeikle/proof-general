/*
 * ProverStandalone
 * 
 * Created by alex, 03-May-2005.
 */
package ed.inf.proofgeneral.standalone;

import org.eclipse.jface.preference.IPreferenceStore;

import ed.inf.heneveld.utils.General;
import ed.inf.heneveld.utils.XmlPreferenceStore;
import ed.inf.proofgeneral.ProofGeneralPlugin;
import ed.inf.proofgeneral.sessionmanager.ProverKnowledge;
import ed.inf.proofgeneral.sessionmanager.ScriptingException;
import ed.inf.proofgeneral.sessionmanager.SessionManager;
import ed.inf.proofgeneral.sessionmanager.ProverKnowledge.KnowledgeItem;

/**
 * ProverStandalone -- a class for using a theorem prover (eg Isabelle) through the Java PG classes,
 * but without loading the Eclipse interface
 */
public class ProverStandalone extends ProverInterface {
	
	private static ProverStandalone singleton = null;
	
	/** private constructor, as users should use static create to make a singleton instance */
	private ProverStandalone(IPreferenceStore prefStore) {
		ProofGeneralPlugin.setStaticPreferenceStore(prefStore);
		init(new SessionManager());
	}		
			
	/** creates a theorem prover session for the specified prover using the specified preference store
	 *  (eg DEFAULT_PREFERENCES, which caller could modify directly or clone then modify);
	 *  then initialises (starts) the prover session.
	 * <p/>
	 * this class provides routines which can then send commands to the theorem prover.
	 * <p/>
	 * currently only one Standalone session can be created at a time.
	 */
	public synchronized static ProverStandalone create(String proverName, IPreferenceStore prefStore) {
//		String s = prefStore.getString("Port");
//		s = prefStore.getString("Isabelle Keywords File");
//		s = prefStore.getString("Isabelle Start Command");
//		s = prefStore.getString("Start Command");
 		if (singleton!=null) 
			throw new RuntimeException("ProverStandalone already exists ("+singleton+"); you can only have one instance.");
	  singleton = new ProverStandalone(prefStore);
	  try {
	    singleton.initManager(proverName);
	  } catch (InterruptedException e) {
	  	singleton.dispose();
	  	throw new RuntimeException("ProverStandalone couldn't be created; thread was interrupted.");
	  }
	  return singleton;
	}
	
	/** creates a theorem prover session using the specified prover (Isabelle is the only one available)
	 *  and DEFAULT_PREFERENCES;
	 *  then initialises (starts) the prover session.
	 * <p/>
	 * this class provides routines which can then send commands to the theorem prover.
	 * <p/>
	 * currently only one Standalone session can be created at a time.
	 */
	public static ProverStandalone create(String proverName) {
		return create(proverName, DEFAULT_PREFERENCES);
	}

	/** creates a theorem prover session using the specified prover (Isabelle is the only one available)
	 *  and DEFAULT_PREFERENCES;
	 *  then initialises (starts) the prover session.
	 * <p/>
	 * this class provides routines which can then send commands to the theorem prover.
	 * <p/>
	 * currently only one Standalone session can be created at a time.
	 */
	public static ProverStandalone createIsabelleWithLogic(String logicName) {
		IPreferenceStore prefs = (IPreferenceStore)(DEFAULT_PREFERENCES.clone());  //Eclipse thinks this is an error but it's not
		String tp = "Isabelle";
		prefs.putValue("Isabelle Start Command", prefs.getString("Isabelle Start Command")+" "+logicName);
		return create(tp, prefs);
	}

  static XmlPreferenceStore DEFAULT_PREFERENCES = new XmlPreferenceStore();
  
  static {
  	DEFAULT_PREFERENCES.setFromXmlString(
			"<preferences prefix=\"Isabelle \">" +
				"<pref name=\"Start Command\" label=\"Start Command\" class=\"String\" default=\"isabelle -I -X\" />" +
				"<pref name=\"Use Sockets\" label=\"Use remote version and sockets?\" class=\"Boolean\" default=\"false\" />" +
				"<pref name=\"Host Address\" label=\"Host Address\" class=\"String\" default=\"localhost\" />" +
				"<pref name=\"Port\" label=\"Port\" class=\"Integer\" default=\"5678\" />" +
				"<pref name=\"Startup Script\"" +
				"  label=\"Proof script to be run at session start\"" +
				"  class=\"Text\" default=\"\" />" +
				"<pref name=\"Isabelle Stop Command\" label=\"Stop Command\" class=\"String\"" +
				"  default=\"\"/>" +
				"<pref name=\"Isabelle use PGIP\" label=\"Use PGIP?\" class=\"Boolean\" default=\"true\" />" +
				"<pref name=\"use PGIP interrupts\" label=\"Send PGIP interrupts?\" "+
				"  tooltip=\"Send (as opposed to tty ones)\""+
				"  class=\"Boolean\" default=\"false\" />"+
				"<pref name=\"Isabelle add PGIP packaging\" label=\"Add PGIP packaging?\" class=\"Boolean\"" +
				"  default=\"true\" />" +
				"<pref name=\"Isabelle ready messages\" label=\"Prover sends PGIP ready messages?\" class=\"Boolean\"" +
				"  default=\"true\" />" +
				"<pref name=\"Isabelle Keywords File\" label=\"Keywords File\"" +
				"  class=\"File\" default=\"IsabelleKeywords.txt\"" +
				"  tooltip=\"A file containing a list of key-words\" id=\"IsabelleKeywordsFile\" >" +
				"  <description>A file containing a list of key-words; used for syntax highlighting.</description>" +
				"</pref>" +
				"<pref name=\"Isabelle LINEEND\" label=\"New line character(s)\" class=\"String\" default=\"\\n\" />" +
				"<pref name=\"StyleSheet File\" label=\"Style-sheet File\""+
				"  class=\"File\" default=\"pgmlStyleFile.xsl\""+
				"  tooltip=\"An xsl file used to pretty-format prover output\" id=\"StyleSheetFile\"/>"+
    	"</preferences>");
  }
  
	void initManager(String proverName) throws InterruptedException {
		synchronized (proverOwner) {
			proverOwner.set("starting");
		  sm.init(proverName);
		  proverOwner.wait();
		}
	}
	
	public synchronized void dispose() {
		super.dispose();
		singleton = null;
	}
	
	//--------------------------------------------------------------------------------------
	
	//------ a simple example for testing and demoing how it works
	
	public static void main(String args[]) {
		ProverStandalone prover = null;
		final Object ownProverLock = new Object();
		try {
//			ProofGeneralPlugin.LOG_EVENTS_RUNNING = true;
//			ProofGeneralPlugin.LOG_EVENTS_FIRING = true;
//			ProofGeneralPlugin.LOG_PROVER_IO = true;
			
			log("STARTING PROVER");
			prover = ProverStandalone.createIsabelleWithLogic("HOL");
			log("Prover started.");
			System.out.println();
			
			log("Opening theory Test:");
		  ProverCommandResponse cmd = prover.sendCommand("theory Test = Main:", true);		  
		  log(cmd.firstIncoming.parseTree.getStringValue());
		  System.out.println();
		
			boolean doCommandsPublicly = true;  //whether our commands are communicated to other listeners (eg proverState) -- must be true to undo			
			//it's a good idea to "own" the prover if you're doing a batch of commands
			//this informs anyone else that they shouldn't send commands 
			if (!prover.sm.tryGetProverOwnership(ownProverLock)) {
				log("COULDN'T GET PROVER OWNERSHIP (continuing anyway)");
				System.out.println();
			}
			
			//do a complete theorem
			sendWithDetails("lemma a_b_sym: \"a = b ==> b = a\"", prover, doCommandsPublicly);
			sendWithDetails("apply (rule sym)", prover, doCommandsPublicly);
			sendWithDetails("apply assumption", prover, doCommandsPublicly);
			//and a way of peeking on the prover state (only available for public commands)
			//TODO we should provide a way to get this fresh/definitively, ideally in predicate form
			log("FOR REFERENCE, PROVER STATE IS:  "+
					(prover.sm.proverState.getLastResponse()!=null ?
							prover.sm.proverState.getLastResponse().asXML() : "null"));
			sendWithDetails("done", prover, doCommandsPublicly);
			System.out.println();

			//show what the knowledge is immediately (it gets set from the response)
			KnowledgeItem ki = prover.sm.proverState.getProverKnowledge().getItem("a_b_sym");
			if (ki!=null)
				log("KNOWLEDGE (poor man's): "+ki.name+", "+ki.getStatementHtml());
			else log("NO KNOWLEDGE ABOUT \"a_b_sym\"");

			//now release prover ownership
			log("Releasing prover ownership, to load knowledge fully.  We are done anyway.");
			try {
				prover.sm.releaseOwnership(ownProverLock);
			} catch (SessionManager.ProverOwnedBySomeoneElseException e) {
				log("SOMEONE ELSE OWNS THE PROVER! WHO THE HELL CALLED "+e.owner+" ?  (continuing anyway)");
			}

			//let ProverKnowledge load full knowledge in the background
			if (ki instanceof ProverKnowledge.LazyTheoryItem) {
				//ProverKnowledge will load a_b_sym definitively & prettified by querying the prover.
				// this is advanced code to show how the callback approach works--
				// it might be nice to have that functionality here,
				// eg on ProverStandalone.queueCommand to get called when the command is done.
				// note how ProverKnowledge (and GetCommandResponseAction)
				// also respond to thread and command interruptions.
				synchronized (ownProverLock) {
					//this command is queued by 
					if (((ProverKnowledge.LazyTheoryItem)ki).loadFullyBg(3, new Runnable() {
						public void run() {
							synchronized (ownProverLock) {
								log("Knowledge is loaded.");
								ownProverLock.notifyAll();
							}
						}
					})!=-1)
						//wait on it, unless prover knowledge is already loaded
					  ownProverLock.wait(2000);
				}
			}
			ki = prover.sm.proverState.getProverKnowledge().getItem("a_b_sym");
			if (ki!=null)
				log("KNOWLEDGE (pretty): "+ki.name+", "+ki.getStatementHtml());
			else log("NO KNOWLEDGE ABOUT \"a_b_sym\"");
			System.out.println();
			
			//undo that theorem -- should NOT own prover when running this
			log("UNDO");
			prover.sm.undoLastScriptCommand(null, ProverStandalone.class);
			prover.waitForAvailable();  //have to wait for 'undo' to complete
			//verify it was undone, by showing no knowledge 
			ki = prover.sm.proverState.getProverKnowledge().getItem("a_b_sym");
			if (ki!=null)
				log("KNOWLEDGE (undone, SHOULDN'T BE AVAILABLE!!): "+ki.name+", "+ki.getStatementHtml());
			else log("NO KNOWLEDGE ABOUT \"a_b_sym\" (as desired)");
			log("Just to be sure it was undone... (should get an error)");  
			//we don't own the prover here; not very nice, but it doesn't cause problems
			sendWithDetails("ML {* thm \"a_b_sym\" *}", prover, doCommandsPublicly);
			System.out.println();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {			
			log("WAITING FOR ALL CLEAR.");
			try {
			  prover.waitForAvailable();   //let anything pending complete -- must not own prover here either
			} catch (InterruptedException e) {}
			//and shutdown the prover
			log("SHUTTING DOWN.");
			prover.dispose();					
			System.out.println();
			log("ALL DONE. Hope you enjoyed the show.");
		}
		//no need to do System.exit(), because we clean up all threads!
	}

	/** prints the message with current time to stdout */
	private static void log(String message) {
		System.out.println(General.makeDateString()+"  "+message);
	}
	
	private static String sendWithDetails(String command, ProverStandalone prover, boolean log) {
		log("SENDING: "+command);
		try {
			ProverCommandResponse cmd = prover.sendCommand(command, log);
			if (cmd.errorEvent==null) {
				if (cmd.firstIncoming==null) {
					log("    GOT:    (command processed without response)");
					return "";
				} else {
				  log("    GOT:    "+cmd.firstIncoming.parseTree.getStringValue());
				  return cmd.firstIncoming.parseTree.getStringValue();
				}
			} else
				log("  ERROR:    "+cmd.errorEvent.parseTree.getStringValue());
		} catch (InterruptedException e) {
			log("  ERROR:    (interrupted)");
		} catch (ScriptingException e) { 
			log("  ERROR:    "+e);
		}
		return null;
	}


}
