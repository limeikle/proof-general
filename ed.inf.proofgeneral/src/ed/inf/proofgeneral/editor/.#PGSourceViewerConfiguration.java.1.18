/*
 * Created on 18-Apr-2004
 *
 */
package ed.inf.proofgeneral.editor;

import org.eclipse.jface.text.DefaultInformationControl;
import org.eclipse.jface.text.DefaultTextDoubleClickStrategy;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.IInformationControl;
import org.eclipse.jface.text.IInformationControlCreator;
import org.eclipse.jface.text.ITextDoubleClickStrategy;
import org.eclipse.jface.text.ITextHover;
import org.eclipse.jface.text.TextPresentation;
import org.eclipse.jface.text.contentassist.ContentAssistant;
import org.eclipse.jface.text.contentassist.IContentAssistant;
import org.eclipse.jface.text.presentation.IPresentationReconciler;
import org.eclipse.jface.text.presentation.PresentationReconciler;
import org.eclipse.jface.text.rules.DefaultDamagerRepairer;
import org.eclipse.jface.text.rules.IRule;
import org.eclipse.jface.text.rules.ITokenScanner;
import org.eclipse.jface.text.rules.Token;
import org.eclipse.jface.text.source.ISourceViewer;
import org.eclipse.jface.text.source.SourceViewerConfiguration;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import ed.inf.heneveld.eclipse.HTMLTextPresenter;
import ed.inf.heneveld.utils.General;
import ed.inf.heneveld.utils.MutableObject;
import ed.inf.heneveld.utils.process.RunnableWithParams;
import ed.inf.proofgeneral.PGColorProvider;
import ed.inf.proofgeneral.ProofGeneralPlugin;
import ed.inf.proofgeneral.editor.lightparser.PGCodeScanner;
import ed.inf.proofgeneral.editor.lightparser.PartitionScanner;
import ed.inf.proofgeneral.sessionmanager.PGIPSyntax;
import ed.inf.proofgeneral.sessionmanager.ProverInfo;
import ed.inf.proofgeneral.sessionmanager.SessionManager;

/**
 * @author Daniel Winterstein
 * 
 */
public class PGSourceViewerConfiguration extends SourceViewerConfiguration {
	
    private PGIPSyntax syntax;
    private ProverInfo proverInfo;
    private ProofScriptDocument doc;
    SessionManager sm;
    public PGSourceViewerConfiguration(SessionManager sm, ProofScriptDocument doc) {
    	this.sm = sm;
    	this.proverInfo = sm.proverInfo;
    	this.syntax = sm.proverInfo.syntax;
    	this.doc = doc;
    }
    
    
    public String[] getConfiguredContentTypes(ISourceViewer sourceViewer) {
		//return //new String[] { IDocument.DEFAULT_CONTENT_TYPE,
		  //      s yntax.getAllTypes();
		return new String[] { IDocument.DEFAULT_CONTENT_TYPE, 
		         			  PartitionScanner.COMMENT };
	}
	public String getConfiguredDocumentPartitioning(ISourceViewer sourceViewer) {
		return PartitionScanner.LIGHT_PG_PARTITIONING;
	}

	//static class MyInfoControl extends Composite implements IInformationControl    
	public IContentAssistant getContentAssistant(ISourceViewer sourceViewer) {
		ContentAssistant assistant = new ContentAssistant();
		
		//set black and white, instead of the usual ugly black on yellow
		assistant.setProposalSelectorBackground(
				ProofGeneralPlugin.getDefault().getPGColorProvider().getColor("white"));
		assistant.setProposalSelectorForeground(
				ProofGeneralPlugin.getDefault().getPGColorProvider().getColor("black"));
	  
		String[] types = PartitionScanner.LIGHT_PARSE_TYPES;
		//TODO be smarter about types
		for(int i=0; i<types.length; i++) {
			assistant.setContentAssistProcessor(new PGCompletionProcessor(sm), types[i]);				    
		}
		assistant.enableAutoActivation(true);
		IInformationControlCreator icc = new IInformationControlCreator() {
			public IInformationControl createInformationControl(Shell parent) {
				//DefaultInformationControl.IInformationPresenter presenter;
				//return new AnnotationExpansionControl(parent, 0, null);   //not sure what this is
				UpdateableHTMLTextPresenter presenter = new ProverHTMLTextPresenter(sm);
				DefaultInformationControl control = new DefaultInformationControl(parent, presenter);				
				presenter.setControl(control);
				return control;
			}			
		};
		assistant.setInformationControlCreator(icc);		
		assistant.setAutoActivationDelay(10);  //500ms, but we want info to appear very quickly
		//TODO is there any way to let F2 make popup help (or this help) persistent, then user could drag it and keep typing		
		assistant.setProposalPopupOrientation(
				ContentAssistant.PROPOSAL_STACKED
				//ContentAssistant.CONTEXT_INFO_BELOW  //not one of the choices, -AH 2005-12-01
				);
		assistant.setContextInformationPopupOrientation(ContentAssistant.CONTEXT_INFO_BELOW);		
		//assistant.setContextInformationPopupBackground(
		//		ProofGeneralPlugin.getDefault().getColorRegistry().get("contextInfoBgColor"));
		
		return assistant;
	}
	
	public ITextDoubleClickStrategy getDoubleClickStrategy(
			ISourceViewer sourceViewer, String contentType) {
		return new DefaultTextDoubleClickStrategy();
	}


	
	/* (non-Javadoc)
	 * Method declared on SourceViewerConfiguration
	 */
	public IPresentationReconciler getPresentationReconciler(ISourceViewer sourceViewer) {

		PGColorProvider provider= ProofGeneralPlugin.getDefault().getPGColorProvider();
		PresentationReconciler reconciler= new PresentationReconciler();
		reconciler.setDocumentPartitioning(getConfiguredDocumentPartitioning(sourceViewer));
		
		// colour commands in just 1 colour (or could create a new code scanner for them)
		String[] types = PartitionScanner.LIGHT_PARSE_TYPES;
		for(int i=0; i<types.length; i++) {
			oneColourSyntaxHighlight(reconciler,types[i],doc);
		}
		
		return reconciler;
	}
	
	/**
	 * Q: Do we need a set of these per document, or could a singleton set be shared?
	 * Creates syntax highlighter for locked, processed, nextstep and normal versions of the token 
	 * @param reconciler
	 * @param tokenName
	 */
	public void oneColourSyntaxHighlight(PresentationReconciler reconciler, String tokenName, ProofScriptDocument doc) {
	    
		PGColorProvider provider= ProofGeneralPlugin.getDefault().getPGColorProvider();		
		DefaultDamagerRepairer dr;
		ITokenScanner scanner;
		if (syntax.subType(tokenName,PGIPSyntax.PGTAG.name)) {
		    scanner = new SpecialStyleScanner(doc, provider, tokenName);
		} else if (syntax.subType(tokenName,PGIPSyntax.COMMENT)) {
		    scanner = new SingleTokenScanner(doc,provider,tokenName);
		} else {
		    scanner = new PGCodeScanner(doc, provider);		    
		}
		dr = new DefaultDamagerRepairer(scanner);
		reconciler.setDamager(dr, tokenName);
		reconciler.setRepairer(dr, tokenName);				
	}
	
	/**
	 * Single token scanner.
	 * Returns only the given token for a partition??
	 */
	static class SingleTokenScanner extends PGCodeScanner {
	    String tokenName;
		public SingleTokenScanner(ProofScriptDocument doc, PGColorProvider provider, String tokenName) {
		    super(doc,provider);
		    Token one = makeToken(tokenName);
			setDefaultReturnToken(one);
			setRules(new IRule[0]);
		}		
	}

	/**
	 * scanner to draw italic text (e.g. for comments)
	 */
	static class SpecialStyleScanner extends PGCodeScanner {
	    String tokenName;
		public SpecialStyleScanner(ProofScriptDocument doc, PGColorProvider provider, String tokenName) {
		    super(doc,provider);
		    Token one = makeToken(tokenName,SWT.ITALIC);		    
			setDefaultReturnToken(one);
			setRules(new IRule[0]);
		}					
	}	
	
	public ITextHover getTextHover(ISourceViewer sourceViewer, String contentType) {
//	    String fName = doc.resource!=null? doc.resource.getName() : null;
	    return sm.hoverHelp;
//	    return new PGTextHover(fName != null ? ProofGeneralPlugin.getDefault()
//		        		.getSessionManager(fName) : null);
	}
	/*public IAnnotationHover getAnnotationHover(ISourceViewer sourceViewer) {
		return new JavaAnnotationHover();
	}*/


	//not needed (funny diff classes IInfoPres and DefInfoControl.IInfoPres	
//	/**
//	 * @see org.eclipse.jface.text.source.SourceViewerConfiguration#getInformationPresenter(org.eclipse.jface.text.source.ISourceViewer)
//	 */
//	public IInformationPresenter getInformationPresenter(
//			ISourceViewer sourceViewer) {
//		return new HTMLTextPresenter();
//		// TODO fill in method (autogenerated)
//		return super.getInformationPresenter(sourceViewer);
//	}
	
	/**
	 * @see org.eclipse.jface.text.source.SourceViewerConfiguration#getInformationControlCreator(org.eclipse.jface.text.source.ISourceViewer)
	 */
	public IInformationControlCreator getInformationControlCreator(
			ISourceViewer sourceViewer) {
		//loads the same as the default but with HTML support
		return new IInformationControlCreator() {
			public IInformationControl createInformationControl(Shell parent) {
				//DefaultInformationControl.IInformationPresenter presenter;				
				//return new AnnotationExpansionControl(parent, 0, null);
				ProverHTMLTextPresenter presenter = new ProverHTMLTextPresenter(sm);
				DefaultInformationControl control = new DefaultInformationControl(parent, presenter);
				presenter.setControl(control);
				return control;
			}
		};
	}
	
	/** an HTMLTextPresenter with a changeText method -- you must set the control on this before use */
	public static class UpdateableHTMLTextPresenter extends HTMLTextPresenter {
		
		/** the control we are connected to, if any */
		protected DefaultInformationControl control = null;
		
		public void setControl(DefaultInformationControl control) {
			this.control = control;
		}
		
		String currentId = "";
		
		/** changes the text to newMessage if the current id of the presenter is 'id' */
		public void changeText(final String id, final String newMessage) {
			if (currentId.equals(id)) {					
				new RunnableWithParams(null, "delayed-hover") {
					public void run() {
						if (currentId.equals(id)) {
							try {
								control.setInformation(newMessage);
								Point p = control.computeSizeHint();
								Rectangle r = control.getBounds();
								if ((r.width<p.x || r.height<p.y) && (p.x<600 && p.y < 600)) {
									//need to resize
									control.setSize(p.x, p.y);
								}
							} catch (Exception e) {}
						}
					}
				}.callDefaultDisplayAsyncExec();
			}
		}
		
		/**
		 * @see org.eclipse.jface.text.DefaultInformationControl.IInformationPresenter#updatePresentation(org.eclipse.swt.widgets.Display, java.lang.String, org.eclipse.jface.text.TextPresentation, int, int)
		 */
		public String updatePresentation(final Display display, final String hoverInfo,
				final TextPresentation presentation, final int maxWidth, final int maxHeight) {
			currentId = General.makeRandomId(6);
			return super.updatePresentation(display, hoverInfo, presentation,
					maxWidth, maxHeight);
		}
	}
	
	/** a presenter which will attempt to look up anything that starts with "SEARCH::" */
	public static class ProverHTMLTextPresenter extends UpdateableHTMLTextPresenter {
		
		/**
		 * @param sm the session manager
		 */
		public ProverHTMLTextPresenter(SessionManager sm) {
			this.sm = sm;
		}
		SessionManager sm;
		
		public String updatePresentation(final Display display, final String hoverItem,
				final TextPresentation presentation, final int maxWidth, final int maxHeight) {
			try {
				if (hoverItem!=null && hoverItem.startsWith("SEARCH::")) {
					final String item = hoverItem.substring(8);
					final MutableObject thisId = new MutableObject(null);
					String helpString = sm.hoverHelp.getHelpString(item, null,
							new Runnable() {
						public void run() {
							//callback to this if getHelpString needs to load
							changeText((String)thisId.get(), sm.hoverHelp.getHelpString(item, null, null));
						}
					});
					String result = super.updatePresentation(display, helpString, presentation, maxWidth, maxHeight);
					thisId.set(currentId);
					return result;
				} else {
					return super.updatePresentation(display, hoverItem, presentation, maxWidth, maxHeight);
				}
			} catch (Exception e) {
				System.err.println("unable to set hover help information: ");
				e.printStackTrace();
				return "";
			}
		}
	}
}
