/*
    Created on 07-Aug-2004
 */
package ed.inf.proofgeneral.symbols;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;

import org.dom4j.Element;
import org.eclipse.swt.graphics.Color;

import ed.inf.proofgeneral.CommandProcessor;
import ed.inf.proofgeneral.Constants;
import ed.inf.proofgeneral.InterfaceScriptSyntax;
import ed.inf.proofgeneral.PGColorProvider;
import ed.inf.proofgeneral.ProofGeneralPlugin;
import ed.inf.proofgeneral.sessionmanager.PGEventMaker;
import ed.inf.proofgeneral.sessionmanager.PGIPListener;
import ed.inf.proofgeneral.sessionmanager.ScriptingException;
import ed.inf.proofgeneral.sessionmanager.events.*;
import ed.inf.winterstein.methods.Methods;

/**
 * Maintains a symbol table and provides support for symbol use in editors.
 * Note: It seems that IE cannot find unicode characters very well
 *  - not sure why not
 @author Daniel Winterstein
 */
public class HTMLSymbols implements PGEventMaker {

    /**
     * Create a new symbol table, initialising it from the default table.
     */
    protected HTMLSymbols() {
        super();
    }
    
    static HTMLSymbols fDefault = null;
    public static HTMLSymbols getDefault() {
        if (fDefault==null) {
            fDefault = new HTMLSymbols();
        }
        return fDefault;
    }

    /**
     * Table of symbol stacks used for providing symbol support
     */
    private static List symbols = new ArrayList();
   /**
    * Load the default symbol table.
    * @param fileName
    * @throws Exception
    */
    public static void init(String fileName) throws Exception {
        symbols = new ArrayList();
        try {
            CommandProcessor.getDefault().processFile(fileName);
        } catch (Exception x) {
            System.err.println("Error initialisiaing symbols from "+fileName);
            throw x;
        }
    }
    /**
     * Load the default symbol table.
     */
    public static void init() {
        try {
            init(ProofGeneralPlugin.getStringPref(Constants.PREF_SYMBOL_TABLE_FILE));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

   
    /**
     * Take a string of text and return a copy where all the ascii has been replaced with html/unicode symbols.
     * @param text
     * @param escaped - determines whether the text has already had it's xml/html characters escaped (eg. > vs &gt;)
     * @return
     */
    public static String useHtml(String text, boolean escaped) {
        Symbol sym = null;
        for(Iterator i = symbols.iterator(); i.hasNext();) {
            try {
                sym = (Symbol) ((Stack) i.next()).peek();
                String r = null;
                if (sym.rHtml==null) r = sym.unicode;
                else r= sym.rHtml;
                if (r==null || !sym.status.equals(Symbol.ENABLED)) continue;     // Skip this symbol
                if (escaped) text = sym.pEscaped.matcher(text).replaceAll(r);
                else text = sym.pAscii.matcher(text).replaceAll(r);
                //if (sym.unicode!=null) text = text.replaceAll(sym.unicode,sym.rHtml);
            } catch (Exception x) {
                if (sym!=null) System.out.println("Error replacing "+sym.name);
                else x.printStackTrace();
            }
        }
        return text;
    }
   
    /**
     * Convert all unicode and html symbols into their ascii equivalents
     * @param text
     * @return
     */
    public static String useAscii(String text) {
        for(Iterator i = symbols.iterator(); i.hasNext();) {            
            Symbol sym = (Symbol) ((Stack) i.next()).peek();
            if (sym.pHtml != null) text = sym.pHtml.matcher(text).replaceAll(sym.rAscii);
            if (sym.unicode!=null) text = text.replaceAll(sym.unicode,sym.rAscii);
        }
        return text;
    }
   
    /**
     * Convert all unicode and html symbols into their ascii equivalents, escaped for xml transmission
     * @param text
     * @return
     */
    public static String useEscapedAscii(String text) {
        for(Iterator i = symbols.iterator(); i.hasNext();) {
            Symbol sym = (Symbol) ((Stack) i.next()).peek();
            if (sym.pHtml != null) text = sym.pHtml.matcher(text).replaceAll(sym.rEscaped);
            if (sym.unicode!=null) text = text.replaceAll(sym.unicode,sym.rEscaped);
        }
        return text;
    }
    /**
     * Convert all ascii symbols into their unicode equivalents
     * @param text
     * @param escaped - determines whether the text has already had it's xml/html characters escaped (eg. > vs &gt;)
     * @param shortcuts - whether to find-and-replace typing shortcuts. Should normally be false.
     * If shortcuts is true, it will only replace the entire text (i.e. "-->" would be converted, but "a-->b" would not be).
     * @return
     */
    public static String useUnicode(String text, boolean escaped, boolean shortcuts) {
        for(Iterator i = symbols.iterator(); i.hasNext();) {
            Symbol sym = (Symbol) ((Stack) i.next()).peek();
            if (sym.unicode==null || !sym.status.equals(Symbol.ENABLED)) continue;
            if (escaped) {
                text = sym.pEscaped.matcher(text).replaceAll(sym.unicode);
            } else {
                text = sym.pAscii.matcher(text).replaceAll(sym.unicode);
                if (shortcuts && sym.shortcut!=null) {
                    if (text.equals(sym.shortcut) && !Methods.whitespace(sym.shortcut)) text = sym.unicode;
                }
                    //text = sym.pShortcut.matcher(text).replaceAll(sym.unicode);
            }
            //text = sym.pHtml.matcher(text).replaceAll(sym.unicode);
        }
        return text;
    }
    /**
     * Convenience method for useUnicode(String boolean, false)
     * @param text
     * @param escaped
     * @return
     */
    public static String useUnicode(String text, boolean escaped) {
        return useUnicode(text,escaped,false);
    }
    
   
    /**
     * Adjust the symbol table according to an addsymbol or removesymbol command
     * <dtd>
    <!ELEMENT addsymbol EMPTY>
    <!ATTLIST addsymbol
        ascii CDATA #REQUIRED
        unicode CDATA #IMPLIED
        html CDATA #IMPLIED
        shortcut CDATA #IMPLIED
        name CDATA #IMPLIED       
      >
     
      <!ELEMENT removesymbol EMPTY>
    <!ATTLIST removesymbol
        ascii CDATA #IMPLIED
        name CDATA #IMPLIED       
      >
     </dtd>
     * <addsymbol ascii="" unicode="" html="" shortcut="" name="" />
     * <removesymbol ascii="" name="" />
     * Such commands
     *
     * @param cmd
     */
    public void processSymbolTableCommand(Element cmd) throws ScriptingException {
        if (cmd.getName().equalsIgnoreCase(InterfaceScriptSyntax.ADD_SYMBOL_COMMAND)) 
            addSymbol(cmd);
        else if (cmd.getName().equalsIgnoreCase(InterfaceScriptSyntax.REMOVE_SYMBOL_COMMAND)) 
            removeSymbol(cmd);
        else throw new ScriptingException("Command "+cmd.getName()+" is not a recognised symbol table command");
    }
    /**
     * @see InterfaceScriptSyntax
     * 
     * @param cmd
     * @throws ScriptingException
     */
    void addSymbol(Element cmd) throws ScriptingException {
        String unicode = cmd.attributeValue(InterfaceScriptSyntax.UNICODE);   
        String name = cmd.attributeValue(InterfaceScriptSyntax.NAME);
        String ascii = cmd.attributeValue(InterfaceScriptSyntax.ASCII);
        if (ascii==null) throw new ScriptingException("Tried to define a symbol ("
                + name==null?"noname":name 
                +" ) without an ascii version. This is not possible.");
        String shortcut = cmd.attributeValue(InterfaceScriptSyntax.SHORTCUT);
        if (ascii.length()>Constants.MAX_SYMBOL_LENGTH)
            throw new ScriptingException("Tried to define a symbol ("
                    + name==null?"noname":name 
                    +" ) with too long an ascii version. Symbols *must* have an ascii version shorter than "
                    +Integer.toString(Constants.MAX_SYMBOL_LENGTH)+" characters.");
        Symbol sym;
        try {
            sym = new Symbol(name,ascii,unicode,
                    cmd.attributeValue(InterfaceScriptSyntax.HTML),shortcut,
            "default"); // TODO implement symbol families
        } catch (Exception x) {
            throw new ScriptingException(x.getLocalizedMessage());
        }
        Stack ss;
        for(Iterator i = symbols.iterator(); i.hasNext();) {
            ss = ((Stack) i.next());
            Symbol s = (Symbol) ss.peek();
            if (s.overlap(sym)) {
                if (s.equals(sym)) {
                    if (shortcut!=null && !shortcut.equals("")) {
                        // replace the shortcut
                        s.shortcut = sym.shortcut;
                    }
                    return; // no need to do anything
                }
                firePGIPEvent(new SymbolPreChangeEvent(this,cmd));
                ss.push(sym);
                firePGIPEvent(new SymbolChangeEvent(this,cmd));
                return;
            }
        }
        firePGIPEvent(new SymbolPreChangeEvent(this,cmd));
        ss = new Stack();
        ss.push(sym);
        symbols.add(ss);
        firePGIPEvent(new SymbolChangeEvent(this,cmd));
    }
    /**
     * Only visible symbols (ie. those at the top of a stack) can be removed.
     * At most 1 symbol will be removed.
     * @param cmd
     * @throws ScriptingException
     */
    void removeSymbol(Element cmd) throws ScriptingException {
        String name = cmd.attributeValue(InterfaceScriptSyntax.NAME);
        //FIXME changes to InterfaceScriptSyntax broke the following, 2005-06-16 
        //String family = cmd.attributeValue(InterfaceScriptSyntax.FAMILY);
        //replace temporarily following above (seems all families are 'default') ??
        String family = "default";
        Symbol sym;
        try {
            sym = new Symbol(name,name,name,name,name,family);
        } catch (Exception x) {
            throw new ScriptingException("Could not remove symbol "+name+":\n"
                    +x.getLocalizedMessage());
        }
        if (name==null) name = cmd.attributeValue(InterfaceScriptSyntax.ASCII);
        if (name==null) throw new ScriptingException("remove symbol commands must have a name");
        for(Iterator i = symbols.iterator(); i.hasNext();) {   
            Stack ss = ((Stack) i.next());
            Symbol s = (Symbol) ss.peek();
            if (s.overlap(sym)) {
                firePGIPEvent(new SymbolPreChangeEvent(this,cmd));
                ss.pop();
                if (ss.size()==0) symbols.remove(ss);
                firePGIPEvent(new SymbolChangeEvent(this,cmd));
                return;
            }
        }
    }
   
    public void removeAll() {
        firePGIPEvent(new SymbolPreChangeEvent(this,null));
        HTMLSymbols.symbols = new ArrayList(); // delete all the symbols
        firePGIPEvent(new SymbolChangeEvent(this,null));        
    }    
    /**
     * Create an html table of the symbols
     * @return
     */
    public static String displaySymbolTable() {
        String table ="<h1>Symbol Table</h1>";
        if (ProofGeneralPlugin.getBooleanPref(Constants.PREF_SYMBOL_SUPPORT)) {
            table += "Symbol support is enabled.<br>";
        } else table += "Symbol support is <i>disabled</i>. Go to Preferences-&gt;Proof General to enable.<br>";
       
        table += "<table><tr><th>Name</th><th>ascii</th><th>unicode</th><th>html</th><th>shortcut</th></tr>";
        for(Iterator i = symbols.iterator(); i.hasNext();) {
            Symbol s = (Symbol) ((Stack) i.next()).peek();
            table += "<tr><th>"+s.name+"</th><th>"+s.escapedAscii+"</th><th>"+s.unicode+
            "</th><th>"+s.html+"</th><th>"+s.shortcut+"</th></tr>";
        }
        table += "</table>";
        return table;
    }
   
    static PGColorProvider fcolorProvider = null;
    static PGColorProvider getColorProvider() {
        if (fcolorProvider == null) fcolorProvider = ProofGeneralPlugin.getDefault().getPGColorProvider();
        return fcolorProvider;
    }
       /**
        * Look up a color object, then convert it into a css color: rgb()
        * @param name
        * @return
        */
   public static String color2css(String name) {
       try {
           Color col = getColorProvider().getColor(name);
           if (col==null) return "";
           return "color: rgb("
           			+col.getRed()+ ","+col.getGreen()+","+col.getBlue()+"); ";
       } catch (Exception ex) {
           ex.printStackTrace();
           return "";
       }
   }
   
   /**
    * Implement and call addListener to get symbol (pre)change events.
      @author Daniel Winterstein
    */
   public interface SymbolListener extends PGIPListener {
       public void symbolChangeEvent(SymbolChangeEvent e);
       public void symbolPreChangeEvent(SymbolPreChangeEvent e);
   }
   static Collection listeners = new ArrayList();
   public void addListener(PGIPListener sl) {
       if (!listeners.contains(sl)) {
           listeners.add(sl);
           sl.addTalker(this);
       }
   }
	public void removeListener(PGIPListener listener) {
	    listeners.remove(listener);
	}     
    public void dispose() {
        for(Iterator i = listeners.iterator(); i.hasNext();) {
            ((SymbolListener)i.next()).removeTalker(this);
        }
    }

   public void firePGIPEvent(PGIPEvent e) {
       for(Iterator i = listeners.iterator(); i.hasNext();) {
           if (e instanceof SymbolChangeEvent) {
               ((SymbolListener)i.next()).symbolChangeEvent((SymbolChangeEvent)e);
           } else {
               ((SymbolListener)i.next()).symbolPreChangeEvent((SymbolPreChangeEvent)e);
           }
       }
   }
   /**
    * Event fired before a symbol change - editors should convert to ascii.
    * This is to protect against the new symbol replacing an existing symbol.
    */
   public class SymbolPreChangeEvent extends InternalEvent {
    /**
     * @param source
     * @param content
     */
    public SymbolPreChangeEvent(Object source, Element content) {
        super(source, content,null);
    }       
   }
   /**
    * Event fired when a symbol changes - editors should update accordingly.
    */
   public class SymbolChangeEvent extends InternalEvent {
    /**
     * @param source
     * @param content
     */
    public SymbolChangeEvent(Object source, Element content) {
        super(source, content,null);
    }       
   }
     
}

