<!-- some tests of filecmd messages -->

<pgips>

<pgip class="pa" id="X" seq="1"><loadfile url="file:///List.thy"/></pgip>

<pgip class="pa" id="X" seq="1"><showid thyname="List" objtype="theorem" name="List.zip_update"/></pgip>

<pgip class="pa" id="X" seq="1"><showid name="List" objtype="theory"/></pgip>

<!-- not allowed to view *anything* in empty context -->
<pgip class="pa" id="X" seq="1"><showid objtype="theorem" name="List.zip_update"/></pgip>

<pgip class="pa" id="X" seq="1"><proofstep>theory Example=Main:</proofstep></pgip>

<pgip class="pa" id="X" seq="1"><setlinewidth>40</setlinewidth></pgip>

<pgip class="pa" id="X" seq="1"><showid objtype="theorem" name="List.zip_update"/></pgip>


<!--- some results from commands above: -->

<pgip class = "pg" origin = "Isabelle/Isar" id = "montague.davesnet/da/1092868894.810" refseq = "1" refid = "X" seq = "5"><errorresponse fatality = "nonfatal">### Theory loader: cannot update finished theory &quot;List&quot;</errorresponse></pgip>

<pgip class = "pg" origin = "Isabelle/Isar" id = "montague.davesnet/da/1092868894.810" refseq = "1" refid = "X" seq = "3"><idvalue objtype = "theorem" name = "List.zip_update">&quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>
 ==&gt; zip (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>]) (<atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?y</atom>]) = zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := (<atom kind = "var">?x</atom>, <atom kind = "var">?y</atom>)]&quot;</idvalue></pgip>
<pgip class = "pg" origin = "Isabelle/Isar" id = "montague.davesnet/da/1092868894.810" refseq = "1" refid = "X" seq = "4"><ready/></pgip>

<pgip class = "pg" origin = "Isabelle/Isar" id = "montague.davesnet/da/1092868894.810" refseq = "1" refid = "X" seq = "7"><idvalue objtype = "theory" name = "List">stamps: ProtoPure CPure HOL Set Typedef Fun Product_Type Lfp Gfp Sum_Type
  Relation Record Inductive Transitive_Closure Wellfounded_Recursion LOrder
  OrderedGroup Ring_and_Field Nat NatArith Divides Power Finite_Set Equiv
  IntDef Numeral IntArith Wellfounded_Relations Datatype_Universe Datatype
  Recdef IntDiv NatBin NatSimprocs SetInterval Presburger Relation_Power
  Parity PreList List
data: HOL/arith HOL/datatypes HOL/inductive HOL/inductive_codegen HOL/recdef
  HOL/recfun_codegen HOL/records Isar/attributes Isar/calculation
  Isar/induction Isar/locales Isar/methods Isar/proof_data Isar/rule_context
  Provers/claset Provers/fast_lin_arith Provers/simpset Pure/axclasses
  Pure/browser_info Pure/codegen Pure/extraction Pure/object-logic
  Pure/old-locales Pure/proof Pure/theorems Pure/theory_management
name prefix: List
name spaces:
  axiom:
    &quot;Datatype.Suml_def&quot; = &quot;Suml_def&quot;, &quot;Datatype.Suml_def&quot;
    &quot;Datatype.Sumr_def&quot; = &quot;Sumr_def&quot;, &quot;Datatype.Sumr_def&quot;
    &quot;Datatype.bool.bool_case_def&quot; = &quot;bool_case_def&quot;, &quot;bool.bool_case_def&quot;,
      &quot;Datatype.bool_case_def&quot;, &quot;Datatype.bool.bool_case_def&quot;
    &quot;Datatype.bool.bool_rec_def&quot; = &quot;bool_rec_def&quot;, &quot;bool.bool_rec_def&quot;,
      &quot;Datatype.bool_rec_def&quot;, &quot;Datatype.bool.bool_rec_def&quot;
    &quot;Datatype.bool.bool_rec_set.defs_1&quot; = &quot;bool_rec_set.defs_1&quot;,
      &quot;Datatype.bool.defs_1&quot;, &quot;bool.bool_rec_set.defs_1&quot;,
      &quot;Datatype.bool.bool_rec_set.defs_1&quot;
    &quot;Datatype.bool.bool_size_def&quot; = &quot;bool_size_def&quot;, &quot;bool.bool_size_def&quot;,
      &quot;Datatype.bool_size_def&quot;, &quot;Datatype.bool.bool_size_def&quot;
    &quot;Datatype.o2s.o2s_option_def&quot; = &quot;o2s_option_def&quot;, &quot;o2s.o2s_option_def&quot;,
      &quot;Datatype.o2s_option_def&quot;, &quot;Datatype.o2s.o2s_option_def&quot;
    &quot;Datatype.option.None_def&quot; = &quot;None_def&quot;, &quot;option.None_def&quot;,
      &quot;Datatype.None_def&quot;, &quot;Datatype.option.None_def&quot;
    &quot;Datatype.option.Some_def&quot; = &quot;Some_def&quot;, &quot;option.Some_def&quot;,
      &quot;Datatype.Some_def&quot;, &quot;Datatype.option.Some_def&quot;
    &quot;Datatype.option.option_case_def&quot; = &quot;option_case_def&quot;,
      &quot;option.option_case_def&quot;, &quot;Datatype.option_case_def&quot;,
      &quot;Datatype.option.option_case_def&quot;
    &quot;Datatype.option.option_rec_def&quot; = &quot;option_rec_def&quot;,
      &quot;option.option_rec_def&quot;, &quot;Datatype.option_rec_def&quot;,
      &quot;Datatype.option.option_rec_def&quot;
    &quot;Datatype.option.option_rec_set.defs_1&quot; = &quot;Datatype.defs_1&quot;,
      &quot;option_rec_set.defs_1&quot;, &quot;Datatype.option.defs_1&quot;,
      &quot;option.option_rec_set.defs_1&quot;,
      &quot;Datatype.option.option_rec_set.defs_1&quot;
    &quot;Datatype.option.option_rep_set.defs_1&quot; = &quot;option_rep_set.defs_1&quot;,
      &quot;option.option_rep_set.defs_1&quot;,
      &quot;Datatype.option.option_rep_set.defs_1&quot;
    &quot;Datatype.option.option_size_def&quot; = &quot;option_size_def&quot;,
      &quot;option.option_size_def&quot;, &quot;Datatype.option_size_def&quot;,
      &quot;Datatype.option.option_size_def&quot;
    &quot;Datatype.option_map_def&quot; = &quot;option_map_def&quot;, &quot;Datatype.option_map_def&quot;
    &quot;Datatype.prod.prod_case_def&quot; = &quot;prod_case_def&quot;, &quot;prod.prod_case_def&quot;,
      &quot;Datatype.prod_case_def&quot;, &quot;Datatype.prod.prod_case_def&quot;
    &quot;Datatype.prod.prod_rec_def&quot; = &quot;prod_rec_def&quot;, &quot;prod.prod_rec_def&quot;,
      &quot;Datatype.prod_rec_def&quot;, &quot;Datatype.prod.prod_rec_def&quot;
    &quot;Datatype.prod.prod_rec_set.defs_1&quot; = &quot;prod_rec_set.defs_1&quot;,
      &quot;Datatype.prod.defs_1&quot;, &quot;prod.prod_rec_set.defs_1&quot;,
      &quot;Datatype.prod.prod_rec_set.defs_1&quot;
    &quot;Datatype.prod.x_size_def&quot; = &quot;prod.x_size_def&quot;,
      &quot;Datatype.prod.x_size_def&quot;
    &quot;Datatype.sum.sum_case_def&quot; = &quot;sum_case_def&quot;, &quot;sum.sum_case_def&quot;,
      &quot;Datatype.sum_case_def&quot;, &quot;Datatype.sum.sum_case_def&quot;
    &quot;Datatype.sum.sum_rec_def&quot; = &quot;sum_rec_def&quot;, &quot;sum.sum_rec_def&quot;,
      &quot;Datatype.sum_rec_def&quot;, &quot;Datatype.sum.sum_rec_def&quot;
    &quot;Datatype.sum.sum_rec_set.defs_1&quot; = &quot;sum_rec_set.defs_1&quot;,
      &quot;Datatype.sum.defs_1&quot;, &quot;sum.sum_rec_set.defs_1&quot;,
      &quot;Datatype.sum.sum_rec_set.defs_1&quot;
    &quot;Datatype.sum.x_size_def&quot; = &quot;x_size_def&quot;, &quot;sum.x_size_def&quot;,
      &quot;Datatype.x_size_def&quot;, &quot;Datatype.sum.x_size_def&quot;
    &quot;Datatype.the.the_option_def&quot; = &quot;the_option_def&quot;, &quot;the.the_option_def&quot;,
      &quot;Datatype.the_option_def&quot;, &quot;Datatype.the.the_option_def&quot;
    &quot;Datatype.type_definition_option&quot; = &quot;type_definition_option&quot;,
      &quot;Datatype.type_definition_option&quot;
    &quot;Datatype.unit.unit_case_def&quot; = &quot;unit_case_def&quot;, &quot;unit.unit_case_def&quot;,
      &quot;Datatype.unit_case_def&quot;, &quot;Datatype.unit.unit_case_def&quot;
    &quot;Datatype.unit.unit_rec_def&quot; = &quot;unit_rec_def&quot;, &quot;unit.unit_rec_def&quot;,
      &quot;Datatype.unit_rec_def&quot;, &quot;Datatype.unit.unit_rec_def&quot;
    &quot;Datatype.unit.unit_rec_set.defs_1&quot; = &quot;unit_rec_set.defs_1&quot;,
      &quot;Datatype.unit.defs_1&quot;, &quot;unit.unit_rec_set.defs_1&quot;,
      &quot;Datatype.unit.unit_rec_set.defs_1&quot;
    &quot;Datatype.unit.unit_size_def&quot; = &quot;unit_size_def&quot;, &quot;unit.unit_size_def&quot;,
      &quot;Datatype.unit_size_def&quot;, &quot;Datatype.unit.unit_size_def&quot;
    &quot;Datatype_Universe.Atom_def&quot; = &quot;Atom_def&quot;, &quot;Datatype_Universe.Atom_def&quot;
    &quot;Datatype_Universe.Case_def&quot; = &quot;Case_def&quot;, &quot;Datatype_Universe.Case_def&quot;
    &quot;Datatype_Universe.In0_def&quot; = &quot;In0_def&quot;, &quot;Datatype_Universe.In0_def&quot;
    &quot;Datatype_Universe.In1_def&quot; = &quot;In1_def&quot;, &quot;Datatype_Universe.In1_def&quot;
    &quot;Datatype_Universe.Leaf_def&quot; = &quot;Leaf_def&quot;, &quot;Datatype_Universe.Leaf_def&quot;
    &quot;Datatype_Universe.Lim_def&quot; = &quot;Lim_def&quot;, &quot;Datatype_Universe.Lim_def&quot;
    &quot;Datatype_Universe.Node_def&quot; = &quot;Node_def&quot;, &quot;Datatype_Universe.Node_def&quot;
    &quot;Datatype_Universe.Numb_def&quot; = &quot;Numb_def&quot;, &quot;Datatype_Universe.Numb_def&quot;
    &quot;Datatype_Universe.Push_Node_def&quot; = &quot;Push_Node_def&quot;,
      &quot;Datatype_Universe.Push_Node_def&quot;
    &quot;Datatype_Universe.Push_def&quot; = &quot;Push_def&quot;, &quot;Datatype_Universe.Push_def&quot;
    &quot;Datatype_Universe.Scons_def&quot; = &quot;Scons_def&quot;,
      &quot;Datatype_Universe.Scons_def&quot;
    &quot;Datatype_Universe.Split_def&quot; = &quot;Split_def&quot;,
      &quot;Datatype_Universe.Split_def&quot;
    &quot;Datatype_Universe.apfst_def&quot; = &quot;apfst_def&quot;,
      &quot;Datatype_Universe.apfst_def&quot;
    &quot;Datatype_Universe.dprod_def&quot; = &quot;dprod_def&quot;,
      &quot;Datatype_Universe.dprod_def&quot;
    &quot;Datatype_Universe.dsum_def&quot; = &quot;dsum_def&quot;, &quot;Datatype_Universe.dsum_def&quot;
    &quot;Datatype_Universe.ndepth_def&quot; = &quot;ndepth_def&quot;,
      &quot;Datatype_Universe.ndepth_def&quot;
    &quot;Datatype_Universe.ntrunc_def&quot; = &quot;ntrunc_def&quot;,
      &quot;Datatype_Universe.ntrunc_def&quot;
    &quot;Datatype_Universe.type_definition_Node&quot; = &quot;type_definition_Node&quot;,
      &quot;Datatype_Universe.type_definition_Node&quot;
    &quot;Datatype_Universe.uprod_def&quot; = &quot;uprod_def&quot;,
      &quot;Datatype_Universe.uprod_def&quot;
    &quot;Datatype_Universe.usum_def&quot; = &quot;usum_def&quot;, &quot;Datatype_Universe.usum_def&quot;
    &quot;Divides.div.intro&quot; = &quot;div.intro&quot;, &quot;Divides.intro&quot;, &quot;Divides.div.intro&quot;
    &quot;Divides.div_def&quot; = &quot;Divides.div_def&quot;
    &quot;Divides.dvd_def&quot; = &quot;dvd_def&quot;, &quot;Divides.dvd_def&quot;
    &quot;Divides.mod_def&quot; = &quot;Divides.mod_def&quot;
    &quot;Divides.quorem_def&quot; = &quot;Divides.quorem_def&quot;
    &quot;Equiv.congruent2_def&quot; = &quot;congruent2_def&quot;, &quot;Equiv.congruent2_def&quot;
    &quot;Equiv.congruent_def&quot; = &quot;congruent_def&quot;, &quot;Equiv.congruent_def&quot;
    &quot;Equiv.equiv_def&quot; = &quot;equiv_def&quot;, &quot;Equiv.equiv_def&quot;
    &quot;Equiv.quotient_def&quot; = &quot;quotient_def&quot;, &quot;Equiv.quotient_def&quot;
    &quot;Finite_Set.ACe_def&quot; = &quot;ACe_def&quot;, &quot;Finite_Set.ACe_def&quot;
    &quot;Finite_Set.Finites.defs_1&quot; = &quot;Finites.defs_1&quot;,
      &quot;Finite_Set.Finites.defs_1&quot;
    &quot;Finite_Set.LC_def&quot; = &quot;LC_def&quot;, &quot;Finite_Set.LC_def&quot;
    &quot;Finite_Set.Max_def&quot; = &quot;Max_def&quot;, &quot;Finite_Set.Max_def&quot;
    &quot;Finite_Set.Min_def&quot; = &quot;Finite_Set.Min_def&quot;
    &quot;Finite_Set.cardR.defs_1&quot; = &quot;cardR.defs_1&quot;, &quot;Finite_Set.cardR.defs_1&quot;
    &quot;Finite_Set.card_def&quot; = &quot;card_def&quot;, &quot;Finite_Set.card_def&quot;
    &quot;Finite_Set.finite.axioms_1&quot; = &quot;finite.axioms_1&quot;, &quot;Finite_Set.axioms_1&quot;,
      &quot;Finite_Set.finite.axioms_1&quot;
    &quot;Finite_Set.finite.intro&quot; = &quot;finite.intro&quot;, &quot;Finite_Set.intro&quot;,
      &quot;Finite_Set.finite.intro&quot;
    &quot;Finite_Set.foldSet.defs_1&quot; = &quot;foldSet.defs_1&quot;, &quot;Finite_Set.defs_1&quot;,
      &quot;Finite_Set.foldSet.defs_1&quot;
    &quot;Finite_Set.fold_def&quot; = &quot;fold_def&quot;, &quot;Finite_Set.fold_def&quot;
    &quot;Finite_Set.setprod_def&quot; = &quot;setprod_def&quot;, &quot;Finite_Set.setprod_def&quot;
    &quot;Finite_Set.setsum_def&quot; = &quot;setsum_def&quot;, &quot;Finite_Set.setsum_def&quot;
    &quot;Fun.bij_def&quot; = &quot;bij_def&quot;, &quot;Fun.bij_def&quot;
    &quot;Fun.comp_def&quot; = &quot;comp_def&quot;, &quot;Fun.comp_def&quot;
    &quot;Fun.fun_upd_def&quot; = &quot;fun_upd_def&quot;, &quot;Fun.fun_upd_def&quot;
    &quot;Fun.id_def&quot; = &quot;id_def&quot;, &quot;Fun.id_def&quot;
    &quot;Fun.inj_on_def&quot; = &quot;inj_on_def&quot;, &quot;Fun.inj_on_def&quot;
    &quot;Fun.overwrite_def&quot; = &quot;overwrite_def&quot;, &quot;Fun.overwrite_def&quot;
    &quot;Fun.surj_def&quot; = &quot;surj_def&quot;, &quot;Fun.surj_def&quot;
    &quot;Gfp.gfp_def&quot; = &quot;gfp_def&quot;, &quot;Gfp.gfp_def&quot;
    &quot;HOL.All_def&quot; = &quot;All_def&quot;, &quot;HOL.All_def&quot;
    &quot;HOL.Ex1_def&quot; = &quot;Ex1_def&quot;, &quot;HOL.Ex1_def&quot;
    &quot;HOL.Ex_def&quot; = &quot;Ex_def&quot;, &quot;HOL.Ex_def&quot;
    &quot;HOL.False_def&quot; = &quot;False_def&quot;, &quot;HOL.False_def&quot;
    &quot;HOL.Least_def&quot; = &quot;Least_def&quot;, &quot;HOL.Least_def&quot;
    &quot;HOL.Let_def&quot; = &quot;Let_def&quot;, &quot;HOL.Let_def&quot;
    &quot;HOL.True_def&quot; = &quot;True_def&quot;, &quot;HOL.True_def&quot;
    &quot;HOL.True_or_False&quot; = &quot;True_or_False&quot;, &quot;HOL.True_or_False&quot;
    &quot;HOL.and_def&quot; = &quot;and_def&quot;, &quot;HOL.and_def&quot;
    &quot;HOL.eq_reflection&quot; = &quot;eq_reflection&quot;, &quot;HOL.eq_reflection&quot;
    &quot;HOL.ext&quot; = &quot;ext&quot;, &quot;HOL.ext&quot;
    &quot;HOL.if_def&quot; = &quot;if_def&quot;, &quot;HOL.if_def&quot;
    &quot;HOL.iff&quot; = &quot;iff&quot;, &quot;HOL.iff&quot;
    &quot;HOL.impI&quot; = &quot;impI&quot;, &quot;HOL.impI&quot;
    &quot;HOL.induct_conj_def&quot; = &quot;induct_conj_def&quot;, &quot;HOL.induct_conj_def&quot;
    &quot;HOL.induct_equal_def&quot; = &quot;induct_equal_def&quot;, &quot;HOL.induct_equal_def&quot;
    &quot;HOL.induct_forall_def&quot; = &quot;induct_forall_def&quot;, &quot;HOL.induct_forall_def&quot;
    &quot;HOL.induct_implies_def&quot; = &quot;induct_implies_def&quot;,
      &quot;HOL.induct_implies_def&quot;
    &quot;HOL.inverse.intro&quot; = &quot;inverse.intro&quot;, &quot;HOL.inverse.intro&quot;
    &quot;HOL.linorder.axioms_1&quot; = &quot;HOL.axioms_1&quot;, &quot;linorder.axioms_1&quot;,
      &quot;HOL.linorder.axioms_1&quot;
    &quot;HOL.linorder.intro&quot; = &quot;HOL.intro&quot;, &quot;linorder.intro&quot;,
      &quot;HOL.linorder.intro&quot;
    &quot;HOL.max_def&quot; = &quot;max_def&quot;, &quot;HOL.max_def&quot;
    &quot;HOL.min_def&quot; = &quot;min_def&quot;, &quot;HOL.min_def&quot;
    &quot;HOL.minus.intro&quot; = &quot;minus.intro&quot;, &quot;HOL.minus.intro&quot;
    &quot;HOL.mono_def&quot; = &quot;mono_def&quot;, &quot;HOL.mono_def&quot;
    &quot;HOL.mp&quot; = &quot;mp&quot;, &quot;HOL.mp&quot;
    &quot;HOL.not_def&quot; = &quot;not_def&quot;, &quot;HOL.not_def&quot;
    &quot;HOL.one.intro&quot; = &quot;one.intro&quot;, &quot;HOL.one.intro&quot;
    &quot;HOL.or_def&quot; = &quot;or_def&quot;, &quot;HOL.or_def&quot;
    &quot;HOL.ord.intro&quot; = &quot;ord.intro&quot;, &quot;HOL.ord.intro&quot;
    &quot;HOL.order.axioms_1&quot; = &quot;order.axioms_1&quot;, &quot;HOL.order.axioms_1&quot;
    &quot;HOL.order.axioms_2&quot; = &quot;HOL.axioms_2&quot;, &quot;order.axioms_2&quot;,
      &quot;HOL.order.axioms_2&quot;
    &quot;HOL.order.axioms_3&quot; = &quot;axioms_3&quot;, &quot;HOL.axioms_3&quot;, &quot;order.axioms_3&quot;,
      &quot;HOL.order.axioms_3&quot;
    &quot;HOL.order.axioms_4&quot; = &quot;axioms_4&quot;, &quot;HOL.axioms_4&quot;, &quot;order.axioms_4&quot;,
      &quot;HOL.order.axioms_4&quot;
    &quot;HOL.order.intro&quot; = &quot;order.intro&quot;, &quot;HOL.order.intro&quot;
    &quot;HOL.plus.intro&quot; = &quot;plus.intro&quot;, &quot;HOL.plus.intro&quot;
    &quot;HOL.refl&quot; = &quot;refl&quot;, &quot;HOL.refl&quot;
    &quot;HOL.subst&quot; = &quot;subst&quot;, &quot;HOL.subst&quot;
    &quot;HOL.the_eq_trivial&quot; = &quot;the_eq_trivial&quot;, &quot;HOL.the_eq_trivial&quot;
    &quot;HOL.times.intro&quot; = &quot;times.intro&quot;, &quot;HOL.times.intro&quot;
    &quot;HOL.zero.intro&quot; = &quot;zero.intro&quot;, &quot;HOL.zero.intro&quot;
    &quot;Inductive.myinv_def&quot; = &quot;myinv_def&quot;, &quot;Inductive.myinv_def&quot;
    &quot;IntArith.int_number_of_def&quot; = &quot;int_number_of_def&quot;,
      &quot;IntArith.int_number_of_def&quot;
    &quot;IntDef.Integ_def&quot; = &quot;Integ_def&quot;, &quot;IntDef.Integ_def&quot;
    &quot;IntDef.Ints_def&quot; = &quot;Ints_def&quot;, &quot;IntDef.Ints_def&quot;
    &quot;IntDef.Nats_def&quot; = &quot;Nats_def&quot;, &quot;IntDef.Nats_def&quot;
    &quot;IntDef.One_int_def&quot; = &quot;One_int_def&quot;, &quot;IntDef.One_int_def&quot;
    &quot;IntDef.Zero_int_def&quot; = &quot;Zero_int_def&quot;, &quot;IntDef.Zero_int_def&quot;
    &quot;IntDef.add_int_def&quot; = &quot;add_int_def&quot;, &quot;IntDef.add_int_def&quot;
    &quot;IntDef.diff_int_def&quot; = &quot;diff_int_def&quot;, &quot;IntDef.diff_int_def&quot;
    &quot;IntDef.int_def&quot; = &quot;int_def&quot;, &quot;IntDef.int_def&quot;
    &quot;IntDef.intrel_def&quot; = &quot;intrel_def&quot;, &quot;IntDef.intrel_def&quot;
    &quot;IntDef.iszero_def&quot; = &quot;iszero_def&quot;, &quot;IntDef.iszero_def&quot;
    &quot;IntDef.le_int_def&quot; = &quot;le_int_def&quot;, &quot;IntDef.le_int_def&quot;
    &quot;IntDef.less_int_def&quot; = &quot;less_int_def&quot;, &quot;IntDef.less_int_def&quot;
    &quot;IntDef.minus_int_def&quot; = &quot;minus_int_def&quot;, &quot;IntDef.minus_int_def&quot;
    &quot;IntDef.mult_int_def&quot; = &quot;mult_int_def&quot;, &quot;IntDef.mult_int_def&quot;
    &quot;IntDef.nat_def&quot; = &quot;nat_def&quot;, &quot;IntDef.nat_def&quot;
    &quot;IntDef.neg_def&quot; = &quot;neg_def&quot;, &quot;IntDef.neg_def&quot;
    &quot;IntDef.of_int_def&quot; = &quot;of_int_def&quot;, &quot;IntDef.of_int_def&quot;
    &quot;IntDef.of_nat.of_nat_nat_def&quot; = &quot;of_nat_nat_def&quot;,
      &quot;IntDef.of_nat_nat_def&quot;, &quot;of_nat.of_nat_nat_def&quot;,
      &quot;IntDef.of_nat.of_nat_nat_def&quot;
    &quot;IntDef.type_definition_Integ&quot; = &quot;type_definition_Integ&quot;,
      &quot;IntDef.type_definition_Integ&quot;
    &quot;IntDef.zabs_def&quot; = &quot;zabs_def&quot;, &quot;IntDef.zabs_def&quot;
    &quot;IntDiv.adjust_def&quot; = &quot;adjust_def&quot;, &quot;IntDiv.adjust_def&quot;
    &quot;IntDiv.divAlg_def&quot; = &quot;divAlg_def&quot;, &quot;IntDiv.divAlg_def&quot;
    &quot;IntDiv.div_def&quot; = &quot;div_def&quot;, &quot;IntDiv.div_def&quot;
    &quot;IntDiv.mod_def&quot; = &quot;mod_def&quot;, &quot;IntDiv.mod_def&quot;
    &quot;IntDiv.negDivAlg_def&quot; = &quot;negDivAlg_def&quot;, &quot;IntDiv.negDivAlg_def&quot;
    &quot;IntDiv.negateSnd_def&quot; = &quot;negateSnd_def&quot;, &quot;IntDiv.negateSnd_def&quot;
    &quot;IntDiv.posDivAlg_def&quot; = &quot;posDivAlg_def&quot;, &quot;IntDiv.posDivAlg_def&quot;
    &quot;IntDiv.power.power_nat_def&quot; = &quot;power.power_nat_def&quot;,
      &quot;IntDiv.power_nat_def&quot;, &quot;IntDiv.power.power_nat_def&quot;
    &quot;IntDiv.quorem_def&quot; = &quot;quorem_def&quot;, &quot;IntDiv.quorem_def&quot;
    &quot;LOrder.is_join_def&quot; = &quot;is_join_def&quot;, &quot;LOrder.is_join_def&quot;
    &quot;LOrder.is_meet_def&quot; = &quot;is_meet_def&quot;, &quot;LOrder.is_meet_def&quot;
    &quot;LOrder.join_def&quot; = &quot;join_def&quot;, &quot;LOrder.join_def&quot;
    &quot;LOrder.join_semilorder.axioms_1&quot; = &quot;join_semilorder.axioms_1&quot;,
      &quot;LOrder.join_semilorder.axioms_1&quot;
    &quot;LOrder.join_semilorder.intro&quot; = &quot;join_semilorder.intro&quot;,
      &quot;LOrder.join_semilorder.intro&quot;
    &quot;LOrder.lorder.intro&quot; = &quot;LOrder.intro&quot;, &quot;lorder.intro&quot;,
      &quot;LOrder.lorder.intro&quot;
    &quot;LOrder.meet_def&quot; = &quot;meet_def&quot;, &quot;LOrder.meet_def&quot;
    &quot;LOrder.meet_semilorder.axioms_1&quot; = &quot;LOrder.axioms_1&quot;,
      &quot;meet_semilorder.axioms_1&quot;, &quot;LOrder.meet_semilorder.axioms_1&quot;
    &quot;LOrder.meet_semilorder.intro&quot; = &quot;meet_semilorder.intro&quot;,
      &quot;LOrder.meet_semilorder.intro&quot;
    &quot;Lfp.lfp_def&quot; = &quot;lfp_def&quot;, &quot;Lfp.lfp_def&quot;
    &quot;List.butlast.butlast_list_def&quot; = &quot;butlast_list_def&quot;,
      &quot;List.butlast_list_def&quot;, &quot;butlast.butlast_list_def&quot;,
      &quot;List.butlast.butlast_list_def&quot;
    &quot;List.char.Char_def&quot; = &quot;Char_def&quot;, &quot;List.Char_def&quot;, &quot;char.Char_def&quot;,
      &quot;List.char.Char_def&quot;
    &quot;List.char.char_case_def&quot; = &quot;char_case_def&quot;, &quot;List.char_case_def&quot;,
      &quot;char.char_case_def&quot;, &quot;List.char.char_case_def&quot;
    &quot;List.char.char_rec_def&quot; = &quot;char_rec_def&quot;, &quot;List.char_rec_def&quot;,
      &quot;char.char_rec_def&quot;, &quot;List.char.char_rec_def&quot;
    &quot;List.char.char_rec_set.defs_1&quot; = &quot;defs_1&quot;, &quot;List.defs_1&quot;,
      &quot;List.char.defs_1&quot;, &quot;char_rec_set.defs_1&quot;, &quot;char.char_rec_set.defs_1&quot;,
      &quot;List.char.char_rec_set.defs_1&quot;
    &quot;List.char.char_rep_set.defs_1&quot; = &quot;char_rep_set.defs_1&quot;,
      &quot;char.char_rep_set.defs_1&quot;, &quot;List.char.char_rep_set.defs_1&quot;
    &quot;List.char.char_size_def&quot; = &quot;char_size_def&quot;, &quot;List.char_size_def&quot;,
      &quot;char.char_size_def&quot;, &quot;List.char.char_size_def&quot;
    &quot;List.concat.concat_list_def&quot; = &quot;concat_list_def&quot;,
      &quot;List.concat_list_def&quot;, &quot;concat.concat_list_def&quot;,
      &quot;List.concat.concat_list_def&quot;
    &quot;List.distinct.distinct_list_def&quot; = &quot;distinct_list_def&quot;,
      &quot;List.distinct_list_def&quot;, &quot;distinct.distinct_list_def&quot;,
      &quot;List.distinct.distinct_list_def&quot;
    &quot;List.drop.drop_list_def&quot; = &quot;drop_list_def&quot;, &quot;List.drop_list_def&quot;,
      &quot;drop.drop_list_def&quot;, &quot;List.drop.drop_list_def&quot;
    &quot;List.dropWhile.dropWhile_list_def&quot; = &quot;dropWhile_list_def&quot;,
      &quot;List.dropWhile_list_def&quot;, &quot;dropWhile.dropWhile_list_def&quot;,
      &quot;List.dropWhile.dropWhile_list_def&quot;
    &quot;List.filter.filter_list_def&quot; = &quot;filter_list_def&quot;,
      &quot;List.filter_list_def&quot;, &quot;filter.filter_list_def&quot;,
      &quot;List.filter.filter_list_def&quot;
    &quot;List.foldl.foldl_list_def&quot; = &quot;foldl_list_def&quot;, &quot;List.foldl_list_def&quot;,
      &quot;foldl.foldl_list_def&quot;, &quot;List.foldl.foldl_list_def&quot;
    &quot;List.foldr.foldr_list_def&quot; = &quot;foldr_list_def&quot;, &quot;List.foldr_list_def&quot;,
      &quot;foldr.foldr_list_def&quot;, &quot;List.foldr.foldr_list_def&quot;
    &quot;List.hd.hd_list_def&quot; = &quot;hd_list_def&quot;, &quot;hd.hd_list_def&quot;,
      &quot;List.hd_list_def&quot;, &quot;List.hd.hd_list_def&quot;
    &quot;List.last.last_list_def&quot; = &quot;last_list_def&quot;, &quot;List.last_list_def&quot;,
      &quot;last.last_list_def&quot;, &quot;List.last.last_list_def&quot;
    &quot;List.lex_def&quot; = &quot;lex_def&quot;, &quot;List.lex_def&quot;
    &quot;List.lexico_def&quot; = &quot;lexico_def&quot;, &quot;List.lexico_def&quot;
    &quot;List.lexn.lexn_nat_def&quot; = &quot;lexn_nat_def&quot;, &quot;List.lexn_nat_def&quot;,
      &quot;lexn.lexn_nat_def&quot;, &quot;List.lexn.lexn_nat_def&quot;
    &quot;List.list.Cons_def&quot; = &quot;Cons_def&quot;, &quot;List.Cons_def&quot;, &quot;list.Cons_def&quot;,
      &quot;List.list.Cons_def&quot;
    &quot;List.list.Nil_def&quot; = &quot;Nil_def&quot;, &quot;List.Nil_def&quot;, &quot;list.Nil_def&quot;,
      &quot;List.list.Nil_def&quot;
    &quot;List.list.list_case_def&quot; = &quot;list_case_def&quot;, &quot;List.list_case_def&quot;,
      &quot;list.list_case_def&quot;, &quot;List.list.list_case_def&quot;
    &quot;List.list.list_rec_def&quot; = &quot;list_rec_def&quot;, &quot;List.list_rec_def&quot;,
      &quot;list.list_rec_def&quot;, &quot;List.list.list_rec_def&quot;
    &quot;List.list.list_rec_set.defs_1&quot; = &quot;List.list.defs_1&quot;,
      &quot;list_rec_set.defs_1&quot;, &quot;list.list_rec_set.defs_1&quot;,
      &quot;List.list.list_rec_set.defs_1&quot;
    &quot;List.list.list_rep_set.defs_1&quot; = &quot;list_rep_set.defs_1&quot;,
      &quot;list.list_rep_set.defs_1&quot;, &quot;List.list.list_rep_set.defs_1&quot;
    &quot;List.list.list_size_def&quot; = &quot;list_size_def&quot;, &quot;List.list_size_def&quot;,
      &quot;list.list_size_def&quot;, &quot;List.list.list_size_def&quot;
    &quot;List.list_all.list_all_list_def&quot; = &quot;list_all_list_def&quot;,
      &quot;List.list_all_list_def&quot;, &quot;list_all.list_all_list_def&quot;,
      &quot;List.list_all.list_all_list_def&quot;
    &quot;List.list_all2_def&quot; = &quot;list_all2_def&quot;, &quot;List.list_all2_def&quot;
    &quot;List.list_update.list_update_list_def&quot; = &quot;list_update_list_def&quot;,
      &quot;List.list_update_list_def&quot;, &quot;list_update.list_update_list_def&quot;,
      &quot;List.list_update.list_update_list_def&quot;
    &quot;List.lists.defs_1&quot; = &quot;lists.defs_1&quot;, &quot;List.lists.defs_1&quot;
    &quot;List.map.map_list_def&quot; = &quot;map_list_def&quot;, &quot;map.map_list_def&quot;,
      &quot;List.map_list_def&quot;, &quot;List.map.map_list_def&quot;
    &quot;List.nibble.Nibble0_def&quot; = &quot;Nibble0_def&quot;, &quot;List.Nibble0_def&quot;,
      &quot;nibble.Nibble0_def&quot;, &quot;List.nibble.Nibble0_def&quot;
    &quot;List.nibble.Nibble1_def&quot; = &quot;Nibble1_def&quot;, &quot;List.Nibble1_def&quot;,
      &quot;nibble.Nibble1_def&quot;, &quot;List.nibble.Nibble1_def&quot;
    &quot;List.nibble.Nibble2_def&quot; = &quot;Nibble2_def&quot;, &quot;List.Nibble2_def&quot;,
      &quot;nibble.Nibble2_def&quot;, &quot;List.nibble.Nibble2_def&quot;
    &quot;List.nibble.Nibble3_def&quot; = &quot;Nibble3_def&quot;, &quot;List.Nibble3_def&quot;,
      &quot;nibble.Nibble3_def&quot;, &quot;List.nibble.Nibble3_def&quot;
    &quot;List.nibble.Nibble4_def&quot; = &quot;Nibble4_def&quot;, &quot;List.Nibble4_def&quot;,
      &quot;nibble.Nibble4_def&quot;, &quot;List.nibble.Nibble4_def&quot;
    &quot;List.nibble.Nibble5_def&quot; = &quot;Nibble5_def&quot;, &quot;List.Nibble5_def&quot;,
      &quot;nibble.Nibble5_def&quot;, &quot;List.nibble.Nibble5_def&quot;
    &quot;List.nibble.Nibble6_def&quot; = &quot;Nibble6_def&quot;, &quot;List.Nibble6_def&quot;,
      &quot;nibble.Nibble6_def&quot;, &quot;List.nibble.Nibble6_def&quot;
    &quot;List.nibble.Nibble7_def&quot; = &quot;Nibble7_def&quot;, &quot;List.Nibble7_def&quot;,
      &quot;nibble.Nibble7_def&quot;, &quot;List.nibble.Nibble7_def&quot;
    &quot;List.nibble.Nibble8_def&quot; = &quot;Nibble8_def&quot;, &quot;List.Nibble8_def&quot;,
      &quot;nibble.Nibble8_def&quot;, &quot;List.nibble.Nibble8_def&quot;
    &quot;List.nibble.Nibble9_def&quot; = &quot;Nibble9_def&quot;, &quot;List.Nibble9_def&quot;,
      &quot;nibble.Nibble9_def&quot;, &quot;List.nibble.Nibble9_def&quot;
    &quot;List.nibble.NibbleA_def&quot; = &quot;NibbleA_def&quot;, &quot;List.NibbleA_def&quot;,
      &quot;nibble.NibbleA_def&quot;, &quot;List.nibble.NibbleA_def&quot;
    &quot;List.nibble.NibbleB_def&quot; = &quot;NibbleB_def&quot;, &quot;List.NibbleB_def&quot;,
      &quot;nibble.NibbleB_def&quot;, &quot;List.nibble.NibbleB_def&quot;
    &quot;List.nibble.NibbleC_def&quot; = &quot;NibbleC_def&quot;, &quot;List.NibbleC_def&quot;,
      &quot;nibble.NibbleC_def&quot;, &quot;List.nibble.NibbleC_def&quot;
    &quot;List.nibble.NibbleD_def&quot; = &quot;NibbleD_def&quot;, &quot;List.NibbleD_def&quot;,
      &quot;nibble.NibbleD_def&quot;, &quot;List.nibble.NibbleD_def&quot;
    &quot;List.nibble.NibbleE_def&quot; = &quot;NibbleE_def&quot;, &quot;List.NibbleE_def&quot;,
      &quot;nibble.NibbleE_def&quot;, &quot;List.nibble.NibbleE_def&quot;
    &quot;List.nibble.NibbleF_def&quot; = &quot;NibbleF_def&quot;, &quot;List.NibbleF_def&quot;,
      &quot;nibble.NibbleF_def&quot;, &quot;List.nibble.NibbleF_def&quot;
    &quot;List.nibble.nibble_case_def&quot; = &quot;nibble_case_def&quot;,
      &quot;List.nibble_case_def&quot;, &quot;nibble.nibble_case_def&quot;,
      &quot;List.nibble.nibble_case_def&quot;
    &quot;List.nibble.nibble_rec_def&quot; = &quot;nibble_rec_def&quot;, &quot;List.nibble_rec_def&quot;,
      &quot;nibble.nibble_rec_def&quot;, &quot;List.nibble.nibble_rec_def&quot;
    &quot;List.nibble.nibble_rec_set.defs_1&quot; = &quot;List.nibble.defs_1&quot;,
      &quot;nibble_rec_set.defs_1&quot;, &quot;nibble.nibble_rec_set.defs_1&quot;,
      &quot;List.nibble.nibble_rec_set.defs_1&quot;
    &quot;List.nibble.nibble_rep_set.defs_1&quot; = &quot;nibble_rep_set.defs_1&quot;,
      &quot;nibble.nibble_rep_set.defs_1&quot;, &quot;List.nibble.nibble_rep_set.defs_1&quot;
    &quot;List.nibble.nibble_size_def&quot; = &quot;nibble_size_def&quot;,
      &quot;List.nibble_size_def&quot;, &quot;nibble.nibble_size_def&quot;,
      &quot;List.nibble.nibble_size_def&quot;
    &quot;List.nth.nth_list_def&quot; = &quot;nth_list_def&quot;, &quot;nth.nth_list_def&quot;,
      &quot;List.nth_list_def&quot;, &quot;List.nth.nth_list_def&quot;
    &quot;List.null.null_list_def&quot; = &quot;null_list_def&quot;, &quot;List.null_list_def&quot;,
      &quot;null.null_list_def&quot;, &quot;List.null.null_list_def&quot;
    &quot;List.op @.op @_list_def&quot; = &quot;op @_list_def&quot;, &quot;List.op @_list_def&quot;,
      &quot;op @.op @_list_def&quot;, &quot;List.op @.op @_list_def&quot;
    &quot;List.op mem.op mem_list_def&quot; = &quot;op mem_list_def&quot;,
      &quot;List.op mem_list_def&quot;, &quot;op mem.op mem_list_def&quot;,
      &quot;List.op mem.op mem_list_def&quot;
    &quot;List.remdups.remdups_list_def&quot; = &quot;remdups_list_def&quot;,
      &quot;List.remdups_list_def&quot;, &quot;remdups.remdups_list_def&quot;,
      &quot;List.remdups.remdups_list_def&quot;
    &quot;List.remove1.remove1_list_def&quot; = &quot;remove1_list_def&quot;,
      &quot;List.remove1_list_def&quot;, &quot;remove1.remove1_list_def&quot;,
      &quot;List.remove1.remove1_list_def&quot;
    &quot;List.replicate.replicate_nat_def&quot; = &quot;replicate_nat_def&quot;,
      &quot;List.replicate_nat_def&quot;, &quot;replicate.replicate_nat_def&quot;,
      &quot;List.replicate.replicate_nat_def&quot;
    &quot;List.rev.rev_list_def&quot; = &quot;rev_list_def&quot;, &quot;rev.rev_list_def&quot;,
      &quot;List.rev_list_def&quot;, &quot;List.rev.rev_list_def&quot;
    &quot;List.set.set_list_def&quot; = &quot;set_list_def&quot;, &quot;set.set_list_def&quot;,
      &quot;List.set_list_def&quot;, &quot;List.set.set_list_def&quot;
    &quot;List.sublist_def&quot; = &quot;sublist_def&quot;, &quot;List.sublist_def&quot;
    &quot;List.take.take_list_def&quot; = &quot;take_list_def&quot;, &quot;List.take_list_def&quot;,
      &quot;take.take_list_def&quot;, &quot;List.take.take_list_def&quot;
    &quot;List.takeWhile.takeWhile_list_def&quot; = &quot;takeWhile_list_def&quot;,
      &quot;List.takeWhile_list_def&quot;, &quot;takeWhile.takeWhile_list_def&quot;,
      &quot;List.takeWhile.takeWhile_list_def&quot;
    &quot;List.tl.tl_list_def&quot; = &quot;tl_list_def&quot;, &quot;tl.tl_list_def&quot;,
      &quot;List.tl_list_def&quot;, &quot;List.tl.tl_list_def&quot;
    &quot;List.type_definition_char&quot; = &quot;type_definition_char&quot;,
      &quot;List.type_definition_char&quot;
    &quot;List.type_definition_list&quot; = &quot;type_definition_list&quot;,
      &quot;List.type_definition_list&quot;
    &quot;List.type_definition_nibble&quot; = &quot;type_definition_nibble&quot;,
      &quot;List.type_definition_nibble&quot;
    &quot;List.upt.upt_nat_def&quot; = &quot;upt_nat_def&quot;, &quot;upt.upt_nat_def&quot;,
      &quot;List.upt_nat_def&quot;, &quot;List.upt.upt_nat_def&quot;
    &quot;List.zip.zip_list_def&quot; = &quot;zip_list_def&quot;, &quot;zip.zip_list_def&quot;,
      &quot;List.zip_list_def&quot;, &quot;List.zip.zip_list_def&quot;
    &quot;Nat.Nat.defs_1&quot; = &quot;Nat.Nat.defs_1&quot;
    &quot;Nat.One_nat_def&quot; = &quot;One_nat_def&quot;, &quot;Nat.One_nat_def&quot;
    &quot;Nat.Suc_Rep_not_Zero_Rep&quot; = &quot;Suc_Rep_not_Zero_Rep&quot;,
      &quot;Nat.Suc_Rep_not_Zero_Rep&quot;
    &quot;Nat.Suc_def&quot; = &quot;Suc_def&quot;, &quot;Nat.Suc_def&quot;
    &quot;Nat.Zero_nat_def&quot; = &quot;Zero_nat_def&quot;, &quot;Nat.Zero_nat_def&quot;
    &quot;Nat.inj_Suc_Rep&quot; = &quot;inj_Suc_Rep&quot;, &quot;Nat.inj_Suc_Rep&quot;
    &quot;Nat.le_def&quot; = &quot;le_def&quot;, &quot;Nat.le_def&quot;
    &quot;Nat.less_def&quot; = &quot;less_def&quot;, &quot;Nat.less_def&quot;
    &quot;Nat.nat.nat_case_def&quot; = &quot;nat_case_def&quot;, &quot;Nat.nat_case_def&quot;,
      &quot;nat.nat_case_def&quot;, &quot;Nat.nat.nat_case_def&quot;
    &quot;Nat.nat.nat_rec_def&quot; = &quot;nat_rec_def&quot;, &quot;Nat.nat_rec_def&quot;,
      &quot;nat.nat_rec_def&quot;, &quot;Nat.nat.nat_rec_def&quot;
    &quot;Nat.nat.nat_rec_set.defs_1&quot; = &quot;Nat.defs_1&quot;, &quot;Nat.nat.defs_1&quot;,
      &quot;nat_rec_set.defs_1&quot;, &quot;nat.nat_rec_set.defs_1&quot;,
      &quot;Nat.nat.nat_rec_set.defs_1&quot;
    &quot;Nat.op *.op *_nat_def&quot; = &quot;op *_nat_def&quot;, &quot;Nat.op *_nat_def&quot;,
      &quot;op *.op *_nat_def&quot;, &quot;Nat.op *.op *_nat_def&quot;
    &quot;Nat.op +.op +_nat_def&quot; = &quot;op +_nat_def&quot;, &quot;Nat.op +_nat_def&quot;,
      &quot;op +.op +_nat_def&quot;, &quot;Nat.op +.op +_nat_def&quot;
    &quot;Nat.op -.op -_nat_def&quot; = &quot;op -_nat_def&quot;, &quot;Nat.op -_nat_def&quot;,
      &quot;op -.op -_nat_def&quot;, &quot;Nat.op -.op -_nat_def&quot;
    &quot;Nat.power.intro&quot; = &quot;Nat.intro&quot;, &quot;power.intro&quot;, &quot;Nat.power.intro&quot;
    &quot;Nat.pred_nat_def&quot; = &quot;pred_nat_def&quot;, &quot;Nat.pred_nat_def&quot;
    &quot;NatBin.int_aux_def&quot; = &quot;int_aux_def&quot;, &quot;NatBin.int_aux_def&quot;
    &quot;NatBin.nat_aux_def&quot; = &quot;nat_aux_def&quot;, &quot;NatBin.nat_aux_def&quot;
    &quot;NatBin.nat_number_of_def&quot; = &quot;nat_number_of_def&quot;,
      &quot;NatBin.nat_number_of_def&quot;
    &quot;Numeral.Bin_def&quot; = &quot;Bin_def&quot;, &quot;Numeral.Bin_def&quot;
    &quot;Numeral.Bit_def&quot; = &quot;Bit_def&quot;, &quot;Numeral.Bit_def&quot;
    &quot;Numeral.Min_def&quot; = &quot;Min_def&quot;, &quot;Numeral.Min_def&quot;
    &quot;Numeral.Pls_def&quot; = &quot;Pls_def&quot;, &quot;Numeral.Pls_def&quot;
    &quot;Numeral.bin_add_def&quot; = &quot;bin_add_def&quot;, &quot;Numeral.bin_add_def&quot;
    &quot;Numeral.bin_minus_def&quot; = &quot;bin_minus_def&quot;, &quot;Numeral.bin_minus_def&quot;
    &quot;Numeral.bin_mult_def&quot; = &quot;bin_mult_def&quot;, &quot;Numeral.bin_mult_def&quot;
    &quot;Numeral.bin_pred_def&quot; = &quot;bin_pred_def&quot;, &quot;Numeral.bin_pred_def&quot;
    &quot;Numeral.bin_succ_def&quot; = &quot;bin_succ_def&quot;, &quot;Numeral.bin_succ_def&quot;
    &quot;Numeral.number.intro&quot; = &quot;number.intro&quot;, &quot;Numeral.number.intro&quot;
    &quot;Numeral.number_ring.axioms_1&quot; = &quot;axioms_1&quot;, &quot;Numeral.axioms_1&quot;,
      &quot;number_ring.axioms_1&quot;, &quot;Numeral.number_ring.axioms_1&quot;
    &quot;Numeral.number_ring.intro&quot; = &quot;Numeral.intro&quot;, &quot;number_ring.intro&quot;,
      &quot;Numeral.number_ring.intro&quot;
    &quot;Numeral.type_definition_Bin&quot; = &quot;type_definition_Bin&quot;,
      &quot;Numeral.type_definition_Bin&quot;
    &quot;OrderedGroup.ab_group_add.axioms_1&quot; = &quot;ab_group_add.axioms_1&quot;,
      &quot;OrderedGroup.ab_group_add.axioms_1&quot;
    &quot;OrderedGroup.ab_group_add.axioms_2&quot; = &quot;OrderedGroup.axioms_2&quot;,
      &quot;ab_group_add.axioms_2&quot;, &quot;OrderedGroup.ab_group_add.axioms_2&quot;
    &quot;OrderedGroup.ab_group_add.intro&quot; = &quot;ab_group_add.intro&quot;,
      &quot;OrderedGroup.ab_group_add.intro&quot;
    &quot;OrderedGroup.ab_semigroup_add.axioms_1&quot; = &quot;ab_semigroup_add.axioms_1&quot;,
      &quot;OrderedGroup.ab_semigroup_add.axioms_1&quot;
    &quot;OrderedGroup.ab_semigroup_add.intro&quot; = &quot;ab_semigroup_add.intro&quot;,
      &quot;OrderedGroup.ab_semigroup_add.intro&quot;
    &quot;OrderedGroup.ab_semigroup_mult.axioms_1&quot; =
      &quot;ab_semigroup_mult.axioms_1&quot;,
      &quot;OrderedGroup.ab_semigroup_mult.axioms_1&quot;
    &quot;OrderedGroup.ab_semigroup_mult.intro&quot; = &quot;ab_semigroup_mult.intro&quot;,
      &quot;OrderedGroup.ab_semigroup_mult.intro&quot;
    &quot;OrderedGroup.cancel_ab_semigroup_add.axioms_1&quot; =
      &quot;cancel_ab_semigroup_add.axioms_1&quot;,
      &quot;OrderedGroup.cancel_ab_semigroup_add.axioms_1&quot;
    &quot;OrderedGroup.cancel_ab_semigroup_add.intro&quot; =
      &quot;cancel_ab_semigroup_add.intro&quot;,
      &quot;OrderedGroup.cancel_ab_semigroup_add.intro&quot;
    &quot;OrderedGroup.cancel_semigroup_add.axioms_1&quot; =
      &quot;cancel_semigroup_add.axioms_1&quot;,
      &quot;OrderedGroup.cancel_semigroup_add.axioms_1&quot;
    &quot;OrderedGroup.cancel_semigroup_add.axioms_2&quot; =
      &quot;cancel_semigroup_add.axioms_2&quot;,
      &quot;OrderedGroup.cancel_semigroup_add.axioms_2&quot;
    &quot;OrderedGroup.cancel_semigroup_add.intro&quot; =
      &quot;cancel_semigroup_add.intro&quot;,
      &quot;OrderedGroup.cancel_semigroup_add.intro&quot;
    &quot;OrderedGroup.comm_monoid_add.axioms_1&quot; = &quot;comm_monoid_add.axioms_1&quot;,
      &quot;OrderedGroup.comm_monoid_add.axioms_1&quot;
    &quot;OrderedGroup.comm_monoid_add.intro&quot; = &quot;comm_monoid_add.intro&quot;,
      &quot;OrderedGroup.comm_monoid_add.intro&quot;
    &quot;OrderedGroup.comm_monoid_mult.axioms_1&quot; = &quot;comm_monoid_mult.axioms_1&quot;,
      &quot;OrderedGroup.comm_monoid_mult.axioms_1&quot;
    &quot;OrderedGroup.comm_monoid_mult.intro&quot; = &quot;comm_monoid_mult.intro&quot;,
      &quot;OrderedGroup.comm_monoid_mult.intro&quot;
    &quot;OrderedGroup.lordered_ab_group.intro&quot; = &quot;lordered_ab_group.intro&quot;,
      &quot;OrderedGroup.lordered_ab_group.intro&quot;
    &quot;OrderedGroup.lordered_ab_group_abs.axioms_1&quot; = &quot;OrderedGroup.axioms_1&quot;,
      &quot;lordered_ab_group_abs.axioms_1&quot;,
      &quot;OrderedGroup.lordered_ab_group_abs.axioms_1&quot;
    &quot;OrderedGroup.lordered_ab_group_abs.intro&quot; = &quot;OrderedGroup.intro&quot;,
      &quot;lordered_ab_group_abs.intro&quot;,
      &quot;OrderedGroup.lordered_ab_group_abs.intro&quot;
    &quot;OrderedGroup.lordered_ab_group_join.intro&quot; =
      &quot;lordered_ab_group_join.intro&quot;,
      &quot;OrderedGroup.lordered_ab_group_join.intro&quot;
    &quot;OrderedGroup.lordered_ab_group_meet.intro&quot; =
      &quot;lordered_ab_group_meet.intro&quot;,
      &quot;OrderedGroup.lordered_ab_group_meet.intro&quot;
    &quot;OrderedGroup.monoid_mult.axioms_1&quot; = &quot;monoid_mult.axioms_1&quot;,
      &quot;OrderedGroup.monoid_mult.axioms_1&quot;
    &quot;OrderedGroup.monoid_mult.axioms_2&quot; = &quot;monoid_mult.axioms_2&quot;,
      &quot;OrderedGroup.monoid_mult.axioms_2&quot;
    &quot;OrderedGroup.monoid_mult.intro&quot; = &quot;monoid_mult.intro&quot;,
      &quot;OrderedGroup.monoid_mult.intro&quot;
    &quot;OrderedGroup.nprt_def&quot; = &quot;nprt_def&quot;, &quot;OrderedGroup.nprt_def&quot;
    &quot;OrderedGroup.ordered_cancel_ab_semigroup_add.intro&quot; =
      &quot;ordered_cancel_ab_semigroup_add.intro&quot;,
      &quot;OrderedGroup.ordered_cancel_ab_semigroup_add.intro&quot;
    &quot;OrderedGroup.pordered_ab_group_add.intro&quot; =
      &quot;pordered_ab_group_add.intro&quot;,
      &quot;OrderedGroup.pordered_ab_group_add.intro&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add.axioms_1&quot; =
      &quot;pordered_ab_semigroup_add.axioms_1&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add.axioms_1&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add.intro&quot; =
      &quot;pordered_ab_semigroup_add.intro&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add.intro&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le.axioms_1&quot; =
      &quot;pordered_ab_semigroup_add_imp_le.axioms_1&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le.axioms_1&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le.intro&quot; =
      &quot;pordered_ab_semigroup_add_imp_le.intro&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le.intro&quot;
    &quot;OrderedGroup.pordered_cancel_ab_semigroup_add.intro&quot; =
      &quot;pordered_cancel_ab_semigroup_add.intro&quot;,
      &quot;OrderedGroup.pordered_cancel_ab_semigroup_add.intro&quot;
    &quot;OrderedGroup.pprt_def&quot; = &quot;pprt_def&quot;, &quot;OrderedGroup.pprt_def&quot;
    &quot;OrderedGroup.semigroup_add.axioms_1&quot; = &quot;semigroup_add.axioms_1&quot;,
      &quot;OrderedGroup.semigroup_add.axioms_1&quot;
    &quot;OrderedGroup.semigroup_add.intro&quot; = &quot;semigroup_add.intro&quot;,
      &quot;OrderedGroup.semigroup_add.intro&quot;
    &quot;OrderedGroup.semigroup_mult.axioms_1&quot; = &quot;semigroup_mult.axioms_1&quot;,
      &quot;OrderedGroup.semigroup_mult.axioms_1&quot;
    &quot;OrderedGroup.semigroup_mult.intro&quot; = &quot;semigroup_mult.intro&quot;,
      &quot;OrderedGroup.semigroup_mult.intro&quot;
    &quot;Parity.even_def&quot; = &quot;even_def&quot;, &quot;Parity.even_def&quot;
    &quot;Parity.even_nat_def&quot; = &quot;even_nat_def&quot;, &quot;Parity.even_nat_def&quot;
    &quot;Parity.even_odd.intro&quot; = &quot;intro&quot;, &quot;Parity.intro&quot;, &quot;even_odd.intro&quot;,
      &quot;Parity.even_odd.intro&quot;
    &quot;Power.binomial.binomial_nat_def&quot; = &quot;binomial_nat_def&quot;,
      &quot;Power.binomial_nat_def&quot;, &quot;binomial.binomial_nat_def&quot;,
      &quot;Power.binomial.binomial_nat_def&quot;
    &quot;Power.power.power_nat_def&quot; = &quot;Power.power_nat_def&quot;,
      &quot;Power.power.power_nat_def&quot;
    &quot;Power.recpower.axioms_1&quot; = &quot;Power.axioms_1&quot;, &quot;recpower.axioms_1&quot;,
      &quot;Power.recpower.axioms_1&quot;
    &quot;Power.recpower.axioms_2&quot; = &quot;axioms_2&quot;, &quot;Power.axioms_2&quot;,
      &quot;recpower.axioms_2&quot;, &quot;Power.recpower.axioms_2&quot;
    &quot;Power.recpower.intro&quot; = &quot;Power.intro&quot;, &quot;recpower.intro&quot;,
      &quot;Power.recpower.intro&quot;
    &quot;Prod_def&quot; = &quot;Prod_def&quot;
    &quot;Product_Type.Pair_Rep_def&quot; = &quot;Pair_Rep_def&quot;,
      &quot;Product_Type.Pair_Rep_def&quot;
    &quot;Product_Type.Pair_def&quot; = &quot;Pair_def&quot;, &quot;Product_Type.Pair_def&quot;
    &quot;Product_Type.Sigma_def&quot; = &quot;Sigma_def&quot;, &quot;Product_Type.Sigma_def&quot;
    &quot;Product_Type.Unity_def&quot; = &quot;Unity_def&quot;, &quot;Product_Type.Unity_def&quot;
    &quot;Product_Type.curry_def&quot; = &quot;curry_def&quot;, &quot;Product_Type.curry_def&quot;
    &quot;Product_Type.fst_def&quot; = &quot;fst_def&quot;, &quot;Product_Type.fst_def&quot;
    &quot;Product_Type.internal_split_def&quot; = &quot;internal_split_def&quot;,
      &quot;Product_Type.internal_split_def&quot;
    &quot;Product_Type.prod_fun_def&quot; = &quot;prod_fun_def&quot;,
      &quot;Product_Type.prod_fun_def&quot;
    &quot;Product_Type.snd_def&quot; = &quot;snd_def&quot;, &quot;Product_Type.snd_def&quot;
    &quot;Product_Type.split_def&quot; = &quot;split_def&quot;, &quot;Product_Type.split_def&quot;
    &quot;Product_Type.type_definition_unit&quot; = &quot;type_definition_unit&quot;,
      &quot;Product_Type.type_definition_unit&quot;
    &quot;Product_Type.unit_def&quot; = &quot;unit_def&quot;, &quot;Product_Type.unit_def&quot;
    &quot;Product_Type.upd_fst_def&quot; = &quot;upd_fst_def&quot;, &quot;Product_Type.upd_fst_def&quot;
    &quot;Product_Type.upd_snd_def&quot; = &quot;upd_snd_def&quot;, &quot;Product_Type.upd_snd_def&quot;
    &quot;ProtoPure.Goal_def&quot; = &quot;Goal_def&quot;, &quot;ProtoPure.Goal_def&quot;
    &quot;ProtoPure.abstract_rule&quot; = &quot;abstract_rule&quot;, &quot;ProtoPure.abstract_rule&quot;
    &quot;ProtoPure.combination&quot; = &quot;combination&quot;, &quot;ProtoPure.combination&quot;
    &quot;ProtoPure.equal_elim&quot; = &quot;equal_elim&quot;, &quot;ProtoPure.equal_elim&quot;
    &quot;ProtoPure.equal_intr&quot; = &quot;equal_intr&quot;, &quot;ProtoPure.equal_intr&quot;
    &quot;ProtoPure.reflexive&quot; = &quot;reflexive&quot;, &quot;ProtoPure.reflexive&quot;
    &quot;ProtoPure.symmetric&quot; = &quot;symmetric&quot;, &quot;ProtoPure.symmetric&quot;
    &quot;ProtoPure.transitive&quot; = &quot;transitive&quot;, &quot;ProtoPure.transitive&quot;
    &quot;Relation.Domain_def&quot; = &quot;Domain_def&quot;, &quot;Relation.Domain_def&quot;
    &quot;Relation.Field_def&quot; = &quot;Field_def&quot;, &quot;Relation.Field_def&quot;
    &quot;Relation.Id_def&quot; = &quot;Id_def&quot;, &quot;Relation.Id_def&quot;
    &quot;Relation.Image_def&quot; = &quot;Image_def&quot;, &quot;Relation.Image_def&quot;
    &quot;Relation.Range_def&quot; = &quot;Range_def&quot;, &quot;Relation.Range_def&quot;
    &quot;Relation.antisym_def&quot; = &quot;antisym_def&quot;, &quot;Relation.antisym_def&quot;
    &quot;Relation.converse_def&quot; = &quot;converse_def&quot;, &quot;Relation.converse_def&quot;
    &quot;Relation.diag_def&quot; = &quot;diag_def&quot;, &quot;Relation.diag_def&quot;
    &quot;Relation.inv_image_def&quot; = &quot;inv_image_def&quot;, &quot;Relation.inv_image_def&quot;
    &quot;Relation.refl_def&quot; = &quot;refl_def&quot;, &quot;Relation.refl_def&quot;
    &quot;Relation.rel_comp_def&quot; = &quot;rel_comp_def&quot;, &quot;Relation.rel_comp_def&quot;
    &quot;Relation.single_valued_def&quot; = &quot;single_valued_def&quot;,
      &quot;Relation.single_valued_def&quot;
    &quot;Relation.sym_def&quot; = &quot;sym_def&quot;, &quot;Relation.sym_def&quot;
    &quot;Relation.trans_def&quot; = &quot;trans_def&quot;, &quot;Relation.trans_def&quot;
    &quot;Relation_Power.funpow.power_nat_def&quot; = &quot;power_nat_def&quot;,
      &quot;funpow.power_nat_def&quot;, &quot;Relation_Power.power_nat_def&quot;,
      &quot;Relation_Power.funpow.power_nat_def&quot;
    &quot;Relation_Power.relpow.power_nat_def&quot; = &quot;relpow.power_nat_def&quot;,
      &quot;Relation_Power.relpow.power_nat_def&quot;
    &quot;Ring_and_Field.axclass_0_neq_1.axioms_1&quot; = &quot;axclass_0_neq_1.axioms_1&quot;,
      &quot;Ring_and_Field.axclass_0_neq_1.axioms_1&quot;
    &quot;Ring_and_Field.axclass_0_neq_1.intro&quot; = &quot;axclass_0_neq_1.intro&quot;,
      &quot;Ring_and_Field.axclass_0_neq_1.intro&quot;
    &quot;Ring_and_Field.axclass_abs_if.axioms_1&quot; = &quot;axclass_abs_if.axioms_1&quot;,
      &quot;Ring_and_Field.axclass_abs_if.axioms_1&quot;
    &quot;Ring_and_Field.axclass_abs_if.intro&quot; = &quot;axclass_abs_if.intro&quot;,
      &quot;Ring_and_Field.axclass_abs_if.intro&quot;
    &quot;Ring_and_Field.axclass_no_zero_divisors.axioms_1&quot; =
      &quot;axclass_no_zero_divisors.axioms_1&quot;,
      &quot;Ring_and_Field.axclass_no_zero_divisors.axioms_1&quot;
    &quot;Ring_and_Field.axclass_no_zero_divisors.intro&quot; =
      &quot;axclass_no_zero_divisors.intro&quot;,
      &quot;Ring_and_Field.axclass_no_zero_divisors.intro&quot;
    &quot;Ring_and_Field.comm_ring.intro&quot; = &quot;comm_ring.intro&quot;,
      &quot;Ring_and_Field.comm_ring.intro&quot;
    &quot;Ring_and_Field.comm_ring_1.intro&quot; = &quot;comm_ring_1.intro&quot;,
      &quot;Ring_and_Field.comm_ring_1.intro&quot;
    &quot;Ring_and_Field.comm_semiring.axioms_1&quot; = &quot;comm_semiring.axioms_1&quot;,
      &quot;Ring_and_Field.comm_semiring.axioms_1&quot;
    &quot;Ring_and_Field.comm_semiring.axioms_2&quot; = &quot;comm_semiring.axioms_2&quot;,
      &quot;Ring_and_Field.comm_semiring.axioms_2&quot;
    &quot;Ring_and_Field.comm_semiring.intro&quot; = &quot;comm_semiring.intro&quot;,
      &quot;Ring_and_Field.comm_semiring.intro&quot;
    &quot;Ring_and_Field.comm_semiring_0.intro&quot; = &quot;comm_semiring_0.intro&quot;,
      &quot;Ring_and_Field.comm_semiring_0.intro&quot;
    &quot;Ring_and_Field.comm_semiring_0_cancel.intro&quot; =
      &quot;comm_semiring_0_cancel.intro&quot;,
      &quot;Ring_and_Field.comm_semiring_0_cancel.intro&quot;
    &quot;Ring_and_Field.comm_semiring_1.intro&quot; = &quot;comm_semiring_1.intro&quot;,
      &quot;Ring_and_Field.comm_semiring_1.intro&quot;
    &quot;Ring_and_Field.comm_semiring_1_cancel.intro&quot; =
      &quot;comm_semiring_1_cancel.intro&quot;,
      &quot;Ring_and_Field.comm_semiring_1_cancel.intro&quot;
    &quot;Ring_and_Field.division_by_zero.axioms_1&quot; =
      &quot;division_by_zero.axioms_1&quot;,
      &quot;Ring_and_Field.division_by_zero.axioms_1&quot;
    &quot;Ring_and_Field.division_by_zero.intro&quot; = &quot;division_by_zero.intro&quot;,
      &quot;Ring_and_Field.division_by_zero.intro&quot;
    &quot;Ring_and_Field.field.axioms_1&quot; = &quot;field.axioms_1&quot;,
      &quot;Ring_and_Field.field.axioms_1&quot;
    &quot;Ring_and_Field.field.axioms_2&quot; = &quot;field.axioms_2&quot;,
      &quot;Ring_and_Field.field.axioms_2&quot;
    &quot;Ring_and_Field.field.intro&quot; = &quot;field.intro&quot;,
      &quot;Ring_and_Field.field.intro&quot;
    &quot;Ring_and_Field.idom.intro&quot; = &quot;idom.intro&quot;, &quot;Ring_and_Field.idom.intro&quot;
    &quot;Ring_and_Field.lordered_ring.intro&quot; = &quot;lordered_ring.intro&quot;,
      &quot;Ring_and_Field.lordered_ring.intro&quot;
    &quot;Ring_and_Field.ordered_comm_semiring_strict.axioms_1&quot; =
      &quot;ordered_comm_semiring_strict.axioms_1&quot;,
      &quot;Ring_and_Field.ordered_comm_semiring_strict.axioms_1&quot;
    &quot;Ring_and_Field.ordered_comm_semiring_strict.intro&quot; =
      &quot;ordered_comm_semiring_strict.intro&quot;,
      &quot;Ring_and_Field.ordered_comm_semiring_strict.intro&quot;
    &quot;Ring_and_Field.ordered_field.intro&quot; = &quot;ordered_field.intro&quot;,
      &quot;Ring_and_Field.intro&quot;, &quot;Ring_and_Field.ordered_field.intro&quot;
    &quot;Ring_and_Field.ordered_idom.intro&quot; = &quot;ordered_idom.intro&quot;,
      &quot;Ring_and_Field.ordered_idom.intro&quot;
    &quot;Ring_and_Field.ordered_ring_strict.intro&quot; =
      &quot;ordered_ring_strict.intro&quot;,
      &quot;Ring_and_Field.ordered_ring_strict.intro&quot;
    &quot;Ring_and_Field.ordered_semidom.axioms_1&quot; = &quot;Ring_and_Field.axioms_1&quot;,
      &quot;ordered_semidom.axioms_1&quot;, &quot;Ring_and_Field.ordered_semidom.axioms_1&quot;
    &quot;Ring_and_Field.ordered_semidom.intro&quot; = &quot;ordered_semidom.intro&quot;,
      &quot;Ring_and_Field.ordered_semidom.intro&quot;
    &quot;Ring_and_Field.ordered_semiring_strict.axioms_1&quot; =
      &quot;ordered_semiring_strict.axioms_1&quot;,
      &quot;Ring_and_Field.ordered_semiring_strict.axioms_1&quot;
    &quot;Ring_and_Field.ordered_semiring_strict.axioms_2&quot; =
      &quot;Ring_and_Field.axioms_2&quot;, &quot;ordered_semiring_strict.axioms_2&quot;,
      &quot;Ring_and_Field.ordered_semiring_strict.axioms_2&quot;
    &quot;Ring_and_Field.ordered_semiring_strict.intro&quot; =
      &quot;ordered_semiring_strict.intro&quot;,
      &quot;Ring_and_Field.ordered_semiring_strict.intro&quot;
    &quot;Ring_and_Field.pordered_cancel_comm_semiring.intro&quot; =
      &quot;pordered_cancel_comm_semiring.intro&quot;,
      &quot;Ring_and_Field.pordered_cancel_comm_semiring.intro&quot;
    &quot;Ring_and_Field.pordered_cancel_semiring.intro&quot; =
      &quot;pordered_cancel_semiring.intro&quot;,
      &quot;Ring_and_Field.pordered_cancel_semiring.intro&quot;
    &quot;Ring_and_Field.pordered_comm_ring.intro&quot; = &quot;pordered_comm_ring.intro&quot;,
      &quot;Ring_and_Field.pordered_comm_ring.intro&quot;
    &quot;Ring_and_Field.pordered_comm_semiring.axioms_1&quot; =
      &quot;pordered_comm_semiring.axioms_1&quot;,
      &quot;Ring_and_Field.pordered_comm_semiring.axioms_1&quot;
    &quot;Ring_and_Field.pordered_comm_semiring.intro&quot; =
      &quot;pordered_comm_semiring.intro&quot;,
      &quot;Ring_and_Field.pordered_comm_semiring.intro&quot;
    &quot;Ring_and_Field.pordered_ring.intro&quot; = &quot;pordered_ring.intro&quot;,
      &quot;Ring_and_Field.pordered_ring.intro&quot;
    &quot;Ring_and_Field.pordered_semiring.axioms_1&quot; =
      &quot;pordered_semiring.axioms_1&quot;,
      &quot;Ring_and_Field.pordered_semiring.axioms_1&quot;
    &quot;Ring_and_Field.pordered_semiring.axioms_2&quot; =
      &quot;pordered_semiring.axioms_2&quot;,
      &quot;Ring_and_Field.pordered_semiring.axioms_2&quot;
    &quot;Ring_and_Field.pordered_semiring.intro&quot; = &quot;pordered_semiring.intro&quot;,
      &quot;Ring_and_Field.pordered_semiring.intro&quot;
    &quot;Ring_and_Field.ring.intro&quot; = &quot;ring.intro&quot;, &quot;Ring_and_Field.ring.intro&quot;
    &quot;Ring_and_Field.ring_1.intro&quot; = &quot;ring_1.intro&quot;,
      &quot;Ring_and_Field.ring_1.intro&quot;
    &quot;Ring_and_Field.semiring.axioms_1&quot; = &quot;semiring.axioms_1&quot;,
      &quot;Ring_and_Field.semiring.axioms_1&quot;
    &quot;Ring_and_Field.semiring.axioms_2&quot; = &quot;semiring.axioms_2&quot;,
      &quot;Ring_and_Field.semiring.axioms_2&quot;
    &quot;Ring_and_Field.semiring.intro&quot; = &quot;semiring.intro&quot;,
      &quot;Ring_and_Field.semiring.intro&quot;
    &quot;Ring_and_Field.semiring_0.intro&quot; = &quot;semiring_0.intro&quot;,
      &quot;Ring_and_Field.semiring_0.intro&quot;
    &quot;Ring_and_Field.semiring_0_cancel.intro&quot; = &quot;semiring_0_cancel.intro&quot;,
      &quot;Ring_and_Field.semiring_0_cancel.intro&quot;
    &quot;Ring_and_Field.semiring_1.intro&quot; = &quot;semiring_1.intro&quot;,
      &quot;Ring_and_Field.semiring_1.intro&quot;
    &quot;Ring_and_Field.semiring_1_cancel.intro&quot; = &quot;semiring_1_cancel.intro&quot;,
      &quot;Ring_and_Field.semiring_1_cancel.intro&quot;
    &quot;Set.Ball_def&quot; = &quot;Ball_def&quot;, &quot;Set.Ball_def&quot;
    &quot;Set.Bex_def&quot; = &quot;Bex_def&quot;, &quot;Set.Bex_def&quot;
    &quot;Set.Collect_mem_eq&quot; = &quot;Collect_mem_eq&quot;, &quot;Set.Collect_mem_eq&quot;
    &quot;Set.Compl_def&quot; = &quot;Compl_def&quot;, &quot;Set.Compl_def&quot;
    &quot;Set.INTER_def&quot; = &quot;INTER_def&quot;, &quot;Set.INTER_def&quot;
    &quot;Set.Int_def&quot; = &quot;Int_def&quot;, &quot;Set.Int_def&quot;
    &quot;Set.Inter_def&quot; = &quot;Inter_def&quot;, &quot;Set.Inter_def&quot;
    &quot;Set.Pow_def&quot; = &quot;Pow_def&quot;, &quot;Set.Pow_def&quot;
    &quot;Set.UNION_def&quot; = &quot;UNION_def&quot;, &quot;Set.UNION_def&quot;
    &quot;Set.UNIV_def&quot; = &quot;UNIV_def&quot;, &quot;Set.UNIV_def&quot;
    &quot;Set.Un_def&quot; = &quot;Un_def&quot;, &quot;Set.Un_def&quot;
    &quot;Set.Union_def&quot; = &quot;Union_def&quot;, &quot;Set.Union_def&quot;
    &quot;Set.contents_def&quot; = &quot;contents_def&quot;, &quot;Set.contents_def&quot;
    &quot;Set.empty_def&quot; = &quot;empty_def&quot;, &quot;Set.empty_def&quot;
    &quot;Set.image_def&quot; = &quot;image_def&quot;, &quot;Set.image_def&quot;
    &quot;Set.insert_def&quot; = &quot;insert_def&quot;, &quot;Set.insert_def&quot;
    &quot;Set.mem_Collect_eq&quot; = &quot;mem_Collect_eq&quot;, &quot;Set.mem_Collect_eq&quot;
    &quot;Set.psubset_def&quot; = &quot;psubset_def&quot;, &quot;Set.psubset_def&quot;
    &quot;Set.set_diff_def&quot; = &quot;set_diff_def&quot;, &quot;Set.set_diff_def&quot;
    &quot;Set.subset_def&quot; = &quot;subset_def&quot;, &quot;Set.subset_def&quot;
    &quot;Set.vimage_def&quot; = &quot;vimage_def&quot;, &quot;Set.vimage_def&quot;
    &quot;SetInterval.atLeastAtMost_def&quot; = &quot;atLeastAtMost_def&quot;,
      &quot;SetInterval.atLeastAtMost_def&quot;
    &quot;SetInterval.atLeastLessThan_def&quot; = &quot;atLeastLessThan_def&quot;,
      &quot;SetInterval.atLeastLessThan_def&quot;
    &quot;SetInterval.atLeast_def&quot; = &quot;atLeast_def&quot;, &quot;SetInterval.atLeast_def&quot;
    &quot;SetInterval.atMost_def&quot; = &quot;atMost_def&quot;, &quot;SetInterval.atMost_def&quot;
    &quot;SetInterval.greaterThanAtMost_def&quot; = &quot;greaterThanAtMost_def&quot;,
      &quot;SetInterval.greaterThanAtMost_def&quot;
    &quot;SetInterval.greaterThanLessThan_def&quot; = &quot;greaterThanLessThan_def&quot;,
      &quot;SetInterval.greaterThanLessThan_def&quot;
    &quot;SetInterval.greaterThan_def&quot; = &quot;greaterThan_def&quot;,
      &quot;SetInterval.greaterThan_def&quot;
    &quot;SetInterval.lessThan_def&quot; = &quot;lessThan_def&quot;, &quot;SetInterval.lessThan_def&quot;
    &quot;Sum_Type.Inl_Rep_def&quot; = &quot;Inl_Rep_def&quot;, &quot;Sum_Type.Inl_Rep_def&quot;
    &quot;Sum_Type.Inl_def&quot; = &quot;Inl_def&quot;, &quot;Sum_Type.Inl_def&quot;
    &quot;Sum_Type.Inr_Rep_def&quot; = &quot;Inr_Rep_def&quot;, &quot;Sum_Type.Inr_Rep_def&quot;
    &quot;Sum_Type.Inr_def&quot; = &quot;Inr_def&quot;, &quot;Sum_Type.Inr_def&quot;
    &quot;Sum_Type.Part_def&quot; = &quot;Part_def&quot;, &quot;Sum_Type.Part_def&quot;
    &quot;Sum_Type.sum_def&quot; = &quot;sum_def&quot;, &quot;Sum_Type.sum_def&quot;
    &quot;Sum_def&quot; = &quot;Sum_def&quot;
    &quot;Transitive_Closure.rtrancl.defs_1&quot; = &quot;rtrancl.defs_1&quot;,
      &quot;Transitive_Closure.rtrancl.defs_1&quot;
    &quot;Transitive_Closure.trancl.defs_1&quot; = &quot;trancl.defs_1&quot;,
      &quot;Transitive_Closure.defs_1&quot;, &quot;Transitive_Closure.trancl.defs_1&quot;
    &quot;Typedef.type_definition_def&quot; = &quot;type_definition_def&quot;,
      &quot;Typedef.type_definition_def&quot;
    &quot;Wellfounded_Recursion.acyclic_def&quot; = &quot;acyclic_def&quot;,
      &quot;Wellfounded_Recursion.acyclic_def&quot;
    &quot;Wellfounded_Recursion.adm_wf_def&quot; = &quot;adm_wf_def&quot;,
      &quot;Wellfounded_Recursion.adm_wf_def&quot;
    &quot;Wellfounded_Recursion.cut_def&quot; = &quot;cut_def&quot;,
      &quot;Wellfounded_Recursion.cut_def&quot;
    &quot;Wellfounded_Recursion.wellorder.axioms_1&quot; = &quot;wellorder.axioms_1&quot;,
      &quot;Wellfounded_Recursion.axioms_1&quot;,
      &quot;Wellfounded_Recursion.wellorder.axioms_1&quot;
    &quot;Wellfounded_Recursion.wellorder.intro&quot; = &quot;wellorder.intro&quot;,
      &quot;Wellfounded_Recursion.intro&quot;, &quot;Wellfounded_Recursion.wellorder.intro&quot;
    &quot;Wellfounded_Recursion.wf_def&quot; = &quot;wf_def&quot;,
      &quot;Wellfounded_Recursion.wf_def&quot;
    &quot;Wellfounded_Recursion.wfrec_def&quot; = &quot;wfrec_def&quot;,
      &quot;Wellfounded_Recursion.wfrec_def&quot;
    &quot;Wellfounded_Recursion.wfrec_rel.defs_1&quot; = &quot;wfrec_rel.defs_1&quot;,
      &quot;Wellfounded_Recursion.defs_1&quot;,
      &quot;Wellfounded_Recursion.wfrec_rel.defs_1&quot;
    &quot;Wellfounded_Relations.finite_psubset_def&quot; = &quot;finite_psubset_def&quot;,
      &quot;Wellfounded_Relations.finite_psubset_def&quot;
    &quot;Wellfounded_Relations.less_than_def&quot; = &quot;less_than_def&quot;,
      &quot;Wellfounded_Relations.less_than_def&quot;
    &quot;Wellfounded_Relations.lex_prod_def&quot; = &quot;lex_prod_def&quot;,
      &quot;Wellfounded_Relations.lex_prod_def&quot;
    &quot;Wellfounded_Relations.measure_def&quot; = &quot;measure_def&quot;,
      &quot;Wellfounded_Relations.measure_def&quot;
    &quot;Wellfounded_Relations.same_fst_def&quot; = &quot;same_fst_def&quot;,
      &quot;Wellfounded_Relations.same_fst_def&quot;
    &quot;type_definition_Nat&quot; = &quot;type_definition_Nat&quot;
    &quot;type_definition_Prod&quot; = &quot;type_definition_Prod&quot;
    &quot;type_definition_Sum&quot; = &quot;type_definition_Sum&quot;
  class:
    &quot;Divides.div&quot; = &quot;div&quot;, &quot;Divides.div&quot;
    &quot;Finite_Set.finite&quot; = &quot;finite&quot;, &quot;Finite_Set.finite&quot;
    &quot;HOL.inverse&quot; = &quot;inverse&quot;, &quot;HOL.inverse&quot;
    &quot;HOL.linorder&quot; = &quot;linorder&quot;, &quot;HOL.linorder&quot;
    &quot;HOL.minus&quot; = &quot;minus&quot;, &quot;HOL.minus&quot;
    &quot;HOL.one&quot; = &quot;one&quot;, &quot;HOL.one&quot;
    &quot;HOL.ord&quot; = &quot;ord&quot;, &quot;HOL.ord&quot;
    &quot;HOL.order&quot; = &quot;order&quot;, &quot;HOL.order&quot;
    &quot;HOL.plus&quot; = &quot;plus&quot;, &quot;HOL.plus&quot;
    &quot;HOL.times&quot; = &quot;times&quot;, &quot;HOL.times&quot;
    &quot;HOL.type&quot; = &quot;type&quot;, &quot;HOL.type&quot;
    &quot;HOL.zero&quot; = &quot;zero&quot;, &quot;HOL.zero&quot;
    &quot;LOrder.join_semilorder&quot; = &quot;join_semilorder&quot;, &quot;LOrder.join_semilorder&quot;
    &quot;LOrder.lorder&quot; = &quot;lorder&quot;, &quot;LOrder.lorder&quot;
    &quot;LOrder.meet_semilorder&quot; = &quot;meet_semilorder&quot;, &quot;LOrder.meet_semilorder&quot;
    &quot;Nat.power&quot; = &quot;power&quot;, &quot;Nat.power&quot;
    &quot;Numeral.number&quot; = &quot;number&quot;, &quot;Numeral.number&quot;
    &quot;Numeral.number_ring&quot; = &quot;number_ring&quot;, &quot;Numeral.number_ring&quot;
    &quot;OrderedGroup.ab_group_add&quot; = &quot;ab_group_add&quot;,
      &quot;OrderedGroup.ab_group_add&quot;
    &quot;OrderedGroup.ab_semigroup_add&quot; = &quot;ab_semigroup_add&quot;,
      &quot;OrderedGroup.ab_semigroup_add&quot;
    &quot;OrderedGroup.ab_semigroup_mult&quot; = &quot;ab_semigroup_mult&quot;,
      &quot;OrderedGroup.ab_semigroup_mult&quot;
    &quot;OrderedGroup.cancel_ab_semigroup_add&quot; = &quot;cancel_ab_semigroup_add&quot;,
      &quot;OrderedGroup.cancel_ab_semigroup_add&quot;
    &quot;OrderedGroup.cancel_semigroup_add&quot; = &quot;cancel_semigroup_add&quot;,
      &quot;OrderedGroup.cancel_semigroup_add&quot;
    &quot;OrderedGroup.comm_monoid_add&quot; = &quot;comm_monoid_add&quot;,
      &quot;OrderedGroup.comm_monoid_add&quot;
    &quot;OrderedGroup.comm_monoid_mult&quot; = &quot;comm_monoid_mult&quot;,
      &quot;OrderedGroup.comm_monoid_mult&quot;
    &quot;OrderedGroup.lordered_ab_group&quot; = &quot;lordered_ab_group&quot;,
      &quot;OrderedGroup.lordered_ab_group&quot;
    &quot;OrderedGroup.lordered_ab_group_abs&quot; = &quot;lordered_ab_group_abs&quot;,
      &quot;OrderedGroup.lordered_ab_group_abs&quot;
    &quot;OrderedGroup.lordered_ab_group_join&quot; = &quot;lordered_ab_group_join&quot;,
      &quot;OrderedGroup.lordered_ab_group_join&quot;
    &quot;OrderedGroup.lordered_ab_group_meet&quot; = &quot;lordered_ab_group_meet&quot;,
      &quot;OrderedGroup.lordered_ab_group_meet&quot;
    &quot;OrderedGroup.monoid_mult&quot; = &quot;monoid_mult&quot;, &quot;OrderedGroup.monoid_mult&quot;
    &quot;OrderedGroup.ordered_cancel_ab_semigroup_add&quot; =
      &quot;ordered_cancel_ab_semigroup_add&quot;,
      &quot;OrderedGroup.ordered_cancel_ab_semigroup_add&quot;
    &quot;OrderedGroup.pordered_ab_group_add&quot; = &quot;pordered_ab_group_add&quot;,
      &quot;OrderedGroup.pordered_ab_group_add&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add&quot; = &quot;pordered_ab_semigroup_add&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le&quot; =
      &quot;pordered_ab_semigroup_add_imp_le&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le&quot;
    &quot;OrderedGroup.pordered_cancel_ab_semigroup_add&quot; =
      &quot;pordered_cancel_ab_semigroup_add&quot;,
      &quot;OrderedGroup.pordered_cancel_ab_semigroup_add&quot;
    &quot;OrderedGroup.semigroup_add&quot; = &quot;semigroup_add&quot;,
      &quot;OrderedGroup.semigroup_add&quot;
    &quot;OrderedGroup.semigroup_mult&quot; = &quot;semigroup_mult&quot;,
      &quot;OrderedGroup.semigroup_mult&quot;
    &quot;Parity.even_odd&quot; = &quot;even_odd&quot;, &quot;Parity.even_odd&quot;
    &quot;Power.recpower&quot; = &quot;recpower&quot;, &quot;Power.recpower&quot;
    &quot;Ring_and_Field.axclass_0_neq_1&quot; = &quot;axclass_0_neq_1&quot;,
      &quot;Ring_and_Field.axclass_0_neq_1&quot;
    &quot;Ring_and_Field.axclass_abs_if&quot; = &quot;axclass_abs_if&quot;,
      &quot;Ring_and_Field.axclass_abs_if&quot;
    &quot;Ring_and_Field.axclass_no_zero_divisors&quot; = &quot;axclass_no_zero_divisors&quot;,
      &quot;Ring_and_Field.axclass_no_zero_divisors&quot;
    &quot;Ring_and_Field.comm_ring&quot; = &quot;comm_ring&quot;, &quot;Ring_and_Field.comm_ring&quot;
    &quot;Ring_and_Field.comm_ring_1&quot; = &quot;comm_ring_1&quot;,
      &quot;Ring_and_Field.comm_ring_1&quot;
    &quot;Ring_and_Field.comm_semiring&quot; = &quot;comm_semiring&quot;,
      &quot;Ring_and_Field.comm_semiring&quot;
    &quot;Ring_and_Field.comm_semiring_0&quot; = &quot;comm_semiring_0&quot;,
      &quot;Ring_and_Field.comm_semiring_0&quot;
    &quot;Ring_and_Field.comm_semiring_0_cancel&quot; = &quot;comm_semiring_0_cancel&quot;,
      &quot;Ring_and_Field.comm_semiring_0_cancel&quot;
    &quot;Ring_and_Field.comm_semiring_1&quot; = &quot;comm_semiring_1&quot;,
      &quot;Ring_and_Field.comm_semiring_1&quot;
    &quot;Ring_and_Field.comm_semiring_1_cancel&quot; = &quot;comm_semiring_1_cancel&quot;,
      &quot;Ring_and_Field.comm_semiring_1_cancel&quot;
    &quot;Ring_and_Field.division_by_zero&quot; = &quot;division_by_zero&quot;,
      &quot;Ring_and_Field.division_by_zero&quot;
    &quot;Ring_and_Field.field&quot; = &quot;field&quot;, &quot;Ring_and_Field.field&quot;
    &quot;Ring_and_Field.idom&quot; = &quot;idom&quot;, &quot;Ring_and_Field.idom&quot;
    &quot;Ring_and_Field.lordered_ring&quot; = &quot;lordered_ring&quot;,
      &quot;Ring_and_Field.lordered_ring&quot;
    &quot;Ring_and_Field.ordered_comm_semiring_strict&quot; =
      &quot;ordered_comm_semiring_strict&quot;,
      &quot;Ring_and_Field.ordered_comm_semiring_strict&quot;
    &quot;Ring_and_Field.ordered_field&quot; = &quot;ordered_field&quot;,
      &quot;Ring_and_Field.ordered_field&quot;
    &quot;Ring_and_Field.ordered_idom&quot; = &quot;ordered_idom&quot;,
      &quot;Ring_and_Field.ordered_idom&quot;
    &quot;Ring_and_Field.ordered_ring_strict&quot; = &quot;ordered_ring_strict&quot;,
      &quot;Ring_and_Field.ordered_ring_strict&quot;
    &quot;Ring_and_Field.ordered_semidom&quot; = &quot;ordered_semidom&quot;,
      &quot;Ring_and_Field.ordered_semidom&quot;
    &quot;Ring_and_Field.ordered_semiring_strict&quot; = &quot;ordered_semiring_strict&quot;,
      &quot;Ring_and_Field.ordered_semiring_strict&quot;
    &quot;Ring_and_Field.pordered_cancel_comm_semiring&quot; =
      &quot;pordered_cancel_comm_semiring&quot;,
      &quot;Ring_and_Field.pordered_cancel_comm_semiring&quot;
    &quot;Ring_and_Field.pordered_cancel_semiring&quot; = &quot;pordered_cancel_semiring&quot;,
      &quot;Ring_and_Field.pordered_cancel_semiring&quot;
    &quot;Ring_and_Field.pordered_comm_ring&quot; = &quot;pordered_comm_ring&quot;,
      &quot;Ring_and_Field.pordered_comm_ring&quot;
    &quot;Ring_and_Field.pordered_comm_semiring&quot; = &quot;pordered_comm_semiring&quot;,
      &quot;Ring_and_Field.pordered_comm_semiring&quot;
    &quot;Ring_and_Field.pordered_ring&quot; = &quot;pordered_ring&quot;,
      &quot;Ring_and_Field.pordered_ring&quot;
    &quot;Ring_and_Field.pordered_semiring&quot; = &quot;pordered_semiring&quot;,
      &quot;Ring_and_Field.pordered_semiring&quot;
    &quot;Ring_and_Field.ring&quot; = &quot;ring&quot;, &quot;Ring_and_Field.ring&quot;
    &quot;Ring_and_Field.ring_1&quot; = &quot;ring_1&quot;, &quot;Ring_and_Field.ring_1&quot;
    &quot;Ring_and_Field.semiring&quot; = &quot;semiring&quot;, &quot;Ring_and_Field.semiring&quot;
    &quot;Ring_and_Field.semiring_0&quot; = &quot;semiring_0&quot;, &quot;Ring_and_Field.semiring_0&quot;
    &quot;Ring_and_Field.semiring_0_cancel&quot; = &quot;semiring_0_cancel&quot;,
      &quot;Ring_and_Field.semiring_0_cancel&quot;
    &quot;Ring_and_Field.semiring_1&quot; = &quot;semiring_1&quot;, &quot;Ring_and_Field.semiring_1&quot;
    &quot;Ring_and_Field.semiring_1_cancel&quot; = &quot;semiring_1_cancel&quot;,
      &quot;Ring_and_Field.semiring_1_cancel&quot;
    &quot;Wellfounded_Recursion.wellorder&quot; = &quot;wellorder&quot;,
      &quot;Wellfounded_Recursion.wellorder&quot;
  const:
    &quot;0&quot; = &quot;0&quot;
    &quot;1&quot; = &quot;1&quot;
    &quot;==&quot; = &quot;==&quot;
    &quot;==&gt;&quot; = &quot;==&gt;&quot;
    &quot;Abs_Nat&quot; = &quot;Abs_Nat&quot;
    &quot;Abs_Prod&quot; = &quot;Abs_Prod&quot;
    &quot;Abs_Sum&quot; = &quot;Abs_Sum&quot;
    &quot;All&quot; = &quot;All&quot;
    &quot;Ball&quot; = &quot;Ball&quot;
    &quot;Bex&quot; = &quot;Bex&quot;
    &quot;Collect&quot; = &quot;Collect&quot;
    &quot;Datatype.Abs_option&quot; = &quot;Abs_option&quot;, &quot;Datatype.Abs_option&quot;
    &quot;Datatype.Rep_option&quot; = &quot;Rep_option&quot;, &quot;Datatype.Rep_option&quot;
    &quot;Datatype.bool.bool_case&quot; = &quot;bool_case&quot;, &quot;bool.bool_case&quot;,
      &quot;Datatype.bool_case&quot;, &quot;Datatype.bool.bool_case&quot;
    &quot;Datatype.bool.bool_rec&quot; = &quot;bool_rec&quot;, &quot;bool.bool_rec&quot;,
      &quot;Datatype.bool_rec&quot;, &quot;Datatype.bool.bool_rec&quot;
    &quot;Datatype.bool.bool_rec_set&quot; = &quot;bool_rec_set&quot;, &quot;bool.bool_rec_set&quot;,
      &quot;Datatype.bool_rec_set&quot;, &quot;Datatype.bool.bool_rec_set&quot;
    &quot;Datatype.o2s&quot; = &quot;o2s&quot;, &quot;Datatype.o2s&quot;
    &quot;Datatype.option.None&quot; = &quot;None&quot;, &quot;option.None&quot;, &quot;Datatype.None&quot;,
      &quot;Datatype.option.None&quot;
    &quot;Datatype.option.Some&quot; = &quot;Some&quot;, &quot;option.Some&quot;, &quot;Datatype.Some&quot;,
      &quot;Datatype.option.Some&quot;
    &quot;Datatype.option.option_case&quot; = &quot;option_case&quot;, &quot;option.option_case&quot;,
      &quot;Datatype.option_case&quot;, &quot;Datatype.option.option_case&quot;
    &quot;Datatype.option.option_rec&quot; = &quot;option_rec&quot;, &quot;option.option_rec&quot;,
      &quot;Datatype.option_rec&quot;, &quot;Datatype.option.option_rec&quot;
    &quot;Datatype.option.option_rec_set&quot; = &quot;option_rec_set&quot;,
      &quot;option.option_rec_set&quot;, &quot;Datatype.option_rec_set&quot;,
      &quot;Datatype.option.option_rec_set&quot;
    &quot;Datatype.option.option_rep_set&quot; = &quot;option_rep_set&quot;,
      &quot;option.option_rep_set&quot;, &quot;Datatype.option_rep_set&quot;,
      &quot;Datatype.option.option_rep_set&quot;
    &quot;Datatype.option_map&quot; = &quot;option_map&quot;, &quot;Datatype.option_map&quot;
    &quot;Datatype.prod.prod_case&quot; = &quot;prod_case&quot;, &quot;prod.prod_case&quot;,
      &quot;Datatype.prod_case&quot;, &quot;Datatype.prod.prod_case&quot;
    &quot;Datatype.prod.prod_rec&quot; = &quot;prod_rec&quot;, &quot;prod.prod_rec&quot;,
      &quot;Datatype.prod_rec&quot;, &quot;Datatype.prod.prod_rec&quot;
    &quot;Datatype.prod.prod_rec_set&quot; = &quot;prod_rec_set&quot;, &quot;prod.prod_rec_set&quot;,
      &quot;Datatype.prod_rec_set&quot;, &quot;Datatype.prod.prod_rec_set&quot;
    &quot;Datatype.sum.sum_case&quot; = &quot;sum_case&quot;, &quot;sum.sum_case&quot;,
      &quot;Datatype.sum_case&quot;, &quot;Datatype.sum.sum_case&quot;
    &quot;Datatype.sum.sum_rec&quot; = &quot;sum_rec&quot;, &quot;sum.sum_rec&quot;, &quot;Datatype.sum_rec&quot;,
      &quot;Datatype.sum.sum_rec&quot;
    &quot;Datatype.sum.sum_rec_set&quot; = &quot;sum_rec_set&quot;, &quot;sum.sum_rec_set&quot;,
      &quot;Datatype.sum_rec_set&quot;, &quot;Datatype.sum.sum_rec_set&quot;
    &quot;Datatype.the&quot; = &quot;the&quot;, &quot;Datatype.the&quot;
    &quot;Datatype.unit.unit_case&quot; = &quot;unit_case&quot;, &quot;unit.unit_case&quot;,
      &quot;Datatype.unit_case&quot;, &quot;Datatype.unit.unit_case&quot;
    &quot;Datatype.unit.unit_rec&quot; = &quot;unit_rec&quot;, &quot;unit.unit_rec&quot;,
      &quot;Datatype.unit_rec&quot;, &quot;Datatype.unit.unit_rec&quot;
    &quot;Datatype.unit.unit_rec_set&quot; = &quot;unit_rec_set&quot;, &quot;unit.unit_rec_set&quot;,
      &quot;Datatype.unit_rec_set&quot;, &quot;Datatype.unit.unit_rec_set&quot;
    &quot;Datatype_Universe.Abs_Node&quot; = &quot;Abs_Node&quot;, &quot;Datatype_Universe.Abs_Node&quot;
    &quot;Datatype_Universe.In0&quot; = &quot;In0&quot;, &quot;Datatype_Universe.In0&quot;
    &quot;Datatype_Universe.In1&quot; = &quot;In1&quot;, &quot;Datatype_Universe.In1&quot;
    &quot;Datatype_Universe.Push_Node&quot; = &quot;Push_Node&quot;,
      &quot;Datatype_Universe.Push_Node&quot;
    &quot;Datatype_Universe.Rep_Node&quot; = &quot;Rep_Node&quot;, &quot;Datatype_Universe.Rep_Node&quot;
    &quot;Datatype_Universe.Scons&quot; = &quot;Scons&quot;, &quot;Datatype_Universe.Scons&quot;
    &quot;Datatype_Universe.apfst&quot; = &quot;apfst&quot;, &quot;Datatype_Universe.apfst&quot;
    &quot;Datatype_Universe.dprod&quot; = &quot;dprod&quot;, &quot;Datatype_Universe.dprod&quot;
    &quot;Datatype_Universe.dsum&quot; = &quot;dsum&quot;, &quot;Datatype_Universe.dsum&quot;
    &quot;Datatype_Universe.ndepth&quot; = &quot;ndepth&quot;, &quot;Datatype_Universe.ndepth&quot;
    &quot;Datatype_Universe.ntrunc&quot; = &quot;ntrunc&quot;, &quot;Datatype_Universe.ntrunc&quot;
    &quot;Datatype_Universe.uprod&quot; = &quot;uprod&quot;, &quot;Datatype_Universe.uprod&quot;
    &quot;Datatype_Universe.usum&quot; = &quot;usum&quot;, &quot;Datatype_Universe.usum&quot;
    &quot;Divides.div_class&quot; = &quot;div_class&quot;, &quot;Divides.div_class&quot;
    &quot;Divides.op div&quot; = &quot;op div&quot;, &quot;Divides.op div&quot;
    &quot;Divides.op dvd&quot; = &quot;op dvd&quot;, &quot;Divides.op dvd&quot;
    &quot;Divides.op mod&quot; = &quot;op mod&quot;, &quot;Divides.op mod&quot;
    &quot;Divides.quorem&quot; = &quot;Divides.quorem&quot;
    &quot;Equiv.congruent&quot; = &quot;congruent&quot;, &quot;Equiv.congruent&quot;
    &quot;Equiv.congruent2&quot; = &quot;congruent2&quot;, &quot;Equiv.congruent2&quot;
    &quot;Equiv.equiv&quot; = &quot;equiv&quot;, &quot;Equiv.equiv&quot;
    &quot;Equiv.quotient&quot; = &quot;quotient&quot;, &quot;Equiv.quotient&quot;
    &quot;Ex&quot; = &quot;Ex&quot;
    &quot;Ex1&quot; = &quot;Ex1&quot;
    &quot;False&quot; = &quot;False&quot;
    &quot;Finite_Set.ACe&quot; = &quot;ACe&quot;, &quot;Finite_Set.ACe&quot;
    &quot;Finite_Set.Finites&quot; = &quot;Finites&quot;, &quot;Finite_Set.Finites&quot;
    &quot;Finite_Set.LC&quot; = &quot;LC&quot;, &quot;Finite_Set.LC&quot;
    &quot;Finite_Set.Max&quot; = &quot;Max&quot;, &quot;Finite_Set.Max&quot;
    &quot;Finite_Set.Min&quot; = &quot;Min&quot;, &quot;Finite_Set.Min&quot;
    &quot;Finite_Set.card&quot; = &quot;card&quot;, &quot;Finite_Set.card&quot;
    &quot;Finite_Set.cardR&quot; = &quot;cardR&quot;, &quot;Finite_Set.cardR&quot;
    &quot;Finite_Set.finite_class&quot; = &quot;finite_class&quot;, &quot;Finite_Set.finite_class&quot;
    &quot;Finite_Set.fold&quot; = &quot;fold&quot;, &quot;Finite_Set.fold&quot;
    &quot;Finite_Set.foldSet&quot; = &quot;foldSet&quot;, &quot;Finite_Set.foldSet&quot;
    &quot;Finite_Set.setprod&quot; = &quot;setprod&quot;, &quot;Finite_Set.setprod&quot;
    &quot;Finite_Set.setsum&quot; = &quot;setsum&quot;, &quot;Finite_Set.setsum&quot;
    &quot;Fun.bij&quot; = &quot;bij&quot;, &quot;Fun.bij&quot;
    &quot;Fun.comp&quot; = &quot;comp&quot;, &quot;Fun.comp&quot;
    &quot;Fun.fun_upd&quot; = &quot;fun_upd&quot;, &quot;Fun.fun_upd&quot;
    &quot;Fun.id&quot; = &quot;id&quot;, &quot;Fun.id&quot;
    &quot;Fun.inj_on&quot; = &quot;inj_on&quot;, &quot;Fun.inj_on&quot;
    &quot;Fun.overwrite&quot; = &quot;overwrite&quot;, &quot;Fun.overwrite&quot;
    &quot;Fun.surj&quot; = &quot;surj&quot;, &quot;Fun.surj&quot;
    &quot;Gfp.gfp&quot; = &quot;gfp&quot;, &quot;Gfp.gfp&quot;
    &quot;Goal&quot; = &quot;Goal&quot;
    &quot;HOL.Least&quot; = &quot;Least&quot;, &quot;HOL.Least&quot;
    &quot;HOL.abs&quot; = &quot;abs&quot;, &quot;HOL.abs&quot;
    &quot;HOL.divide&quot; = &quot;divide&quot;, &quot;HOL.divide&quot;
    &quot;HOL.inverse&quot; = &quot;inverse&quot;, &quot;HOL.inverse&quot;
    &quot;HOL.inverse_class&quot; = &quot;inverse_class&quot;, &quot;HOL.inverse_class&quot;
    &quot;HOL.linorder_class&quot; = &quot;linorder_class&quot;, &quot;HOL.linorder_class&quot;
    &quot;HOL.max&quot; = &quot;max&quot;, &quot;HOL.max&quot;
    &quot;HOL.min&quot; = &quot;min&quot;, &quot;HOL.min&quot;
    &quot;HOL.minus_class&quot; = &quot;minus_class&quot;, &quot;HOL.minus_class&quot;
    &quot;HOL.mono&quot; = &quot;mono&quot;, &quot;HOL.mono&quot;
    &quot;HOL.one_class&quot; = &quot;one_class&quot;, &quot;HOL.one_class&quot;
    &quot;HOL.ord_class&quot; = &quot;ord_class&quot;, &quot;HOL.ord_class&quot;
    &quot;HOL.order_class&quot; = &quot;order_class&quot;, &quot;HOL.order_class&quot;
    &quot;HOL.plus_class&quot; = &quot;plus_class&quot;, &quot;HOL.plus_class&quot;
    &quot;HOL.times_class&quot; = &quot;times_class&quot;, &quot;HOL.times_class&quot;
    &quot;HOL.type_class&quot; = &quot;type_class&quot;, &quot;HOL.type_class&quot;
    &quot;HOL.zero_class&quot; = &quot;zero_class&quot;, &quot;HOL.zero_class&quot;
    &quot;INTER&quot; = &quot;INTER&quot;
    &quot;If&quot; = &quot;If&quot;
    &quot;Inl&quot; = &quot;Inl&quot;
    &quot;Inr&quot; = &quot;Inr&quot;
    &quot;IntDef.Abs_Integ&quot; = &quot;Abs_Integ&quot;, &quot;IntDef.Abs_Integ&quot;
    &quot;IntDef.Integ&quot; = &quot;Integ&quot;, &quot;IntDef.Integ&quot;
    &quot;IntDef.Ints&quot; = &quot;Ints&quot;, &quot;IntDef.Ints&quot;
    &quot;IntDef.Nats&quot; = &quot;Nats&quot;, &quot;IntDef.Nats&quot;
    &quot;IntDef.Rep_Integ&quot; = &quot;Rep_Integ&quot;, &quot;IntDef.Rep_Integ&quot;
    &quot;IntDef.int&quot; = &quot;int&quot;, &quot;IntDef.int&quot;
    &quot;IntDef.intrel&quot; = &quot;intrel&quot;, &quot;IntDef.intrel&quot;
    &quot;IntDef.iszero&quot; = &quot;iszero&quot;, &quot;IntDef.iszero&quot;
    &quot;IntDef.nat&quot; = &quot;nat&quot;, &quot;IntDef.nat&quot;
    &quot;IntDef.neg&quot; = &quot;neg&quot;, &quot;IntDef.neg&quot;
    &quot;IntDef.of_int&quot; = &quot;of_int&quot;, &quot;IntDef.of_int&quot;
    &quot;IntDef.of_nat&quot; = &quot;of_nat&quot;, &quot;IntDef.of_nat&quot;
    &quot;IntDiv.adjust&quot; = &quot;adjust&quot;, &quot;IntDiv.adjust&quot;
    &quot;IntDiv.divAlg&quot; = &quot;divAlg&quot;, &quot;IntDiv.divAlg&quot;
    &quot;IntDiv.negDivAlg&quot; = &quot;negDivAlg&quot;, &quot;IntDiv.negDivAlg&quot;
    &quot;IntDiv.negateSnd&quot; = &quot;negateSnd&quot;, &quot;IntDiv.negateSnd&quot;
    &quot;IntDiv.posDivAlg&quot; = &quot;posDivAlg&quot;, &quot;IntDiv.posDivAlg&quot;
    &quot;IntDiv.quorem&quot; = &quot;quorem&quot;, &quot;IntDiv.quorem&quot;
    &quot;Inter&quot; = &quot;Inter&quot;
    &quot;LOrder.is_join&quot; = &quot;is_join&quot;, &quot;LOrder.is_join&quot;
    &quot;LOrder.is_meet&quot; = &quot;is_meet&quot;, &quot;LOrder.is_meet&quot;
    &quot;LOrder.join&quot; = &quot;join&quot;, &quot;LOrder.join&quot;
    &quot;LOrder.join_semilorder_class&quot; = &quot;join_semilorder_class&quot;,
      &quot;LOrder.join_semilorder_class&quot;
    &quot;LOrder.lorder_class&quot; = &quot;lorder_class&quot;, &quot;LOrder.lorder_class&quot;
    &quot;LOrder.meet&quot; = &quot;meet&quot;, &quot;LOrder.meet&quot;
    &quot;LOrder.meet_semilorder_class&quot; = &quot;meet_semilorder_class&quot;,
      &quot;LOrder.meet_semilorder_class&quot;
    &quot;Let&quot; = &quot;Let&quot;
    &quot;Lfp.lfp&quot; = &quot;lfp&quot;, &quot;Lfp.lfp&quot;
    &quot;List.Abs_char&quot; = &quot;Abs_char&quot;, &quot;List.Abs_char&quot;
    &quot;List.Abs_list&quot; = &quot;Abs_list&quot;, &quot;List.Abs_list&quot;
    &quot;List.Abs_nibble&quot; = &quot;Abs_nibble&quot;, &quot;List.Abs_nibble&quot;
    &quot;List.Rep_char&quot; = &quot;Rep_char&quot;, &quot;List.Rep_char&quot;
    &quot;List.Rep_list&quot; = &quot;Rep_list&quot;, &quot;List.Rep_list&quot;
    &quot;List.Rep_nibble&quot; = &quot;Rep_nibble&quot;, &quot;List.Rep_nibble&quot;
    &quot;List.butlast&quot; = &quot;butlast&quot;, &quot;List.butlast&quot;
    &quot;List.char.Char&quot; = &quot;Char&quot;, &quot;List.Char&quot;, &quot;char.Char&quot;, &quot;List.char.Char&quot;
    &quot;List.char.char_case&quot; = &quot;char_case&quot;, &quot;List.char_case&quot;, &quot;char.char_case&quot;,
      &quot;List.char.char_case&quot;
    &quot;List.char.char_rec&quot; = &quot;char_rec&quot;, &quot;List.char_rec&quot;, &quot;char.char_rec&quot;,
      &quot;List.char.char_rec&quot;
    &quot;List.char.char_rec_set&quot; = &quot;char_rec_set&quot;, &quot;List.char_rec_set&quot;,
      &quot;char.char_rec_set&quot;, &quot;List.char.char_rec_set&quot;
    &quot;List.char.char_rep_set&quot; = &quot;char_rep_set&quot;, &quot;List.char_rep_set&quot;,
      &quot;char.char_rep_set&quot;, &quot;List.char.char_rep_set&quot;
    &quot;List.concat&quot; = &quot;concat&quot;, &quot;List.concat&quot;
    &quot;List.distinct&quot; = &quot;distinct&quot;, &quot;List.distinct&quot;
    &quot;List.drop&quot; = &quot;drop&quot;, &quot;List.drop&quot;
    &quot;List.dropWhile&quot; = &quot;dropWhile&quot;, &quot;List.dropWhile&quot;
    &quot;List.filter&quot; = &quot;filter&quot;, &quot;List.filter&quot;
    &quot;List.foldl&quot; = &quot;foldl&quot;, &quot;List.foldl&quot;
    &quot;List.foldr&quot; = &quot;foldr&quot;, &quot;List.foldr&quot;
    &quot;List.hd&quot; = &quot;hd&quot;, &quot;List.hd&quot;
    &quot;List.last&quot; = &quot;last&quot;, &quot;List.last&quot;
    &quot;List.lex&quot; = &quot;lex&quot;, &quot;List.lex&quot;
    &quot;List.lexico&quot; = &quot;lexico&quot;, &quot;List.lexico&quot;
    &quot;List.lexn&quot; = &quot;lexn&quot;, &quot;List.lexn&quot;
    &quot;List.list.Cons&quot; = &quot;Cons&quot;, &quot;List.Cons&quot;, &quot;list.Cons&quot;, &quot;List.list.Cons&quot;
    &quot;List.list.Nil&quot; = &quot;Nil&quot;, &quot;List.Nil&quot;, &quot;list.Nil&quot;, &quot;List.list.Nil&quot;
    &quot;List.list.list_case&quot; = &quot;list_case&quot;, &quot;List.list_case&quot;, &quot;list.list_case&quot;,
      &quot;List.list.list_case&quot;
    &quot;List.list.list_rec&quot; = &quot;list_rec&quot;, &quot;List.list_rec&quot;, &quot;list.list_rec&quot;,
      &quot;List.list.list_rec&quot;
    &quot;List.list.list_rec_set&quot; = &quot;list_rec_set&quot;, &quot;List.list_rec_set&quot;,
      &quot;list.list_rec_set&quot;, &quot;List.list.list_rec_set&quot;
    &quot;List.list.list_rep_set&quot; = &quot;list_rep_set&quot;, &quot;List.list_rep_set&quot;,
      &quot;list.list_rep_set&quot;, &quot;List.list.list_rep_set&quot;
    &quot;List.list_all&quot; = &quot;list_all&quot;, &quot;List.list_all&quot;
    &quot;List.list_all2&quot; = &quot;list_all2&quot;, &quot;List.list_all2&quot;
    &quot;List.list_update&quot; = &quot;list_update&quot;, &quot;List.list_update&quot;
    &quot;List.lists&quot; = &quot;lists&quot;, &quot;List.lists&quot;
    &quot;List.map&quot; = &quot;map&quot;, &quot;List.map&quot;
    &quot;List.nibble.Nibble0&quot; = &quot;Nibble0&quot;, &quot;List.Nibble0&quot;, &quot;nibble.Nibble0&quot;,
      &quot;List.nibble.Nibble0&quot;
    &quot;List.nibble.Nibble1&quot; = &quot;Nibble1&quot;, &quot;List.Nibble1&quot;, &quot;nibble.Nibble1&quot;,
      &quot;List.nibble.Nibble1&quot;
    &quot;List.nibble.Nibble2&quot; = &quot;Nibble2&quot;, &quot;List.Nibble2&quot;, &quot;nibble.Nibble2&quot;,
      &quot;List.nibble.Nibble2&quot;
    &quot;List.nibble.Nibble3&quot; = &quot;Nibble3&quot;, &quot;List.Nibble3&quot;, &quot;nibble.Nibble3&quot;,
      &quot;List.nibble.Nibble3&quot;
    &quot;List.nibble.Nibble4&quot; = &quot;Nibble4&quot;, &quot;List.Nibble4&quot;, &quot;nibble.Nibble4&quot;,
      &quot;List.nibble.Nibble4&quot;
    &quot;List.nibble.Nibble5&quot; = &quot;Nibble5&quot;, &quot;List.Nibble5&quot;, &quot;nibble.Nibble5&quot;,
      &quot;List.nibble.Nibble5&quot;
    &quot;List.nibble.Nibble6&quot; = &quot;Nibble6&quot;, &quot;List.Nibble6&quot;, &quot;nibble.Nibble6&quot;,
      &quot;List.nibble.Nibble6&quot;
    &quot;List.nibble.Nibble7&quot; = &quot;Nibble7&quot;, &quot;List.Nibble7&quot;, &quot;nibble.Nibble7&quot;,
      &quot;List.nibble.Nibble7&quot;
    &quot;List.nibble.Nibble8&quot; = &quot;Nibble8&quot;, &quot;List.Nibble8&quot;, &quot;nibble.Nibble8&quot;,
      &quot;List.nibble.Nibble8&quot;
    &quot;List.nibble.Nibble9&quot; = &quot;Nibble9&quot;, &quot;List.Nibble9&quot;, &quot;nibble.Nibble9&quot;,
      &quot;List.nibble.Nibble9&quot;
    &quot;List.nibble.NibbleA&quot; = &quot;NibbleA&quot;, &quot;List.NibbleA&quot;, &quot;nibble.NibbleA&quot;,
      &quot;List.nibble.NibbleA&quot;
    &quot;List.nibble.NibbleB&quot; = &quot;NibbleB&quot;, &quot;List.NibbleB&quot;, &quot;nibble.NibbleB&quot;,
      &quot;List.nibble.NibbleB&quot;
    &quot;List.nibble.NibbleC&quot; = &quot;NibbleC&quot;, &quot;List.NibbleC&quot;, &quot;nibble.NibbleC&quot;,
      &quot;List.nibble.NibbleC&quot;
    &quot;List.nibble.NibbleD&quot; = &quot;NibbleD&quot;, &quot;List.NibbleD&quot;, &quot;nibble.NibbleD&quot;,
      &quot;List.nibble.NibbleD&quot;
    &quot;List.nibble.NibbleE&quot; = &quot;NibbleE&quot;, &quot;List.NibbleE&quot;, &quot;nibble.NibbleE&quot;,
      &quot;List.nibble.NibbleE&quot;
    &quot;List.nibble.NibbleF&quot; = &quot;NibbleF&quot;, &quot;List.NibbleF&quot;, &quot;nibble.NibbleF&quot;,
      &quot;List.nibble.NibbleF&quot;
    &quot;List.nibble.nibble_case&quot; = &quot;nibble_case&quot;, &quot;List.nibble_case&quot;,
      &quot;nibble.nibble_case&quot;, &quot;List.nibble.nibble_case&quot;
    &quot;List.nibble.nibble_rec&quot; = &quot;nibble_rec&quot;, &quot;List.nibble_rec&quot;,
      &quot;nibble.nibble_rec&quot;, &quot;List.nibble.nibble_rec&quot;
    &quot;List.nibble.nibble_rec_set&quot; = &quot;nibble_rec_set&quot;, &quot;List.nibble_rec_set&quot;,
      &quot;nibble.nibble_rec_set&quot;, &quot;List.nibble.nibble_rec_set&quot;
    &quot;List.nibble.nibble_rep_set&quot; = &quot;nibble_rep_set&quot;, &quot;List.nibble_rep_set&quot;,
      &quot;nibble.nibble_rep_set&quot;, &quot;List.nibble.nibble_rep_set&quot;
    &quot;List.nth&quot; = &quot;nth&quot;, &quot;List.nth&quot;
    &quot;List.null&quot; = &quot;null&quot;, &quot;List.null&quot;
    &quot;List.op @&quot; = &quot;op @&quot;, &quot;List.op @&quot;
    &quot;List.op mem&quot; = &quot;op mem&quot;, &quot;List.op mem&quot;
    &quot;List.remdups&quot; = &quot;remdups&quot;, &quot;List.remdups&quot;
    &quot;List.remove1&quot; = &quot;remove1&quot;, &quot;List.remove1&quot;
    &quot;List.replicate&quot; = &quot;replicate&quot;, &quot;List.replicate&quot;
    &quot;List.rev&quot; = &quot;rev&quot;, &quot;List.rev&quot;
    &quot;List.set&quot; = &quot;set&quot;, &quot;List.set&quot;
    &quot;List.sublist&quot; = &quot;sublist&quot;, &quot;List.sublist&quot;
    &quot;List.take&quot; = &quot;take&quot;, &quot;List.take&quot;
    &quot;List.takeWhile&quot; = &quot;takeWhile&quot;, &quot;List.takeWhile&quot;
    &quot;List.tl&quot; = &quot;tl&quot;, &quot;List.tl&quot;
    &quot;List.upt&quot; = &quot;upt&quot;, &quot;List.upt&quot;
    &quot;List.zip&quot; = &quot;zip&quot;, &quot;List.zip&quot;
    &quot;Nat.Nat&quot; = &quot;Nat&quot;, &quot;Nat.Nat&quot;
    &quot;Nat.Suc_Rep&quot; = &quot;Suc_Rep&quot;, &quot;Nat.Suc_Rep&quot;
    &quot;Nat.Zero_Rep&quot; = &quot;Zero_Rep&quot;, &quot;Nat.Zero_Rep&quot;
    &quot;Nat.nat.nat_case&quot; = &quot;nat_case&quot;, &quot;Nat.nat_case&quot;, &quot;nat.nat_case&quot;,
      &quot;Nat.nat.nat_case&quot;
    &quot;Nat.nat.nat_rec&quot; = &quot;nat_rec&quot;, &quot;Nat.nat_rec&quot;, &quot;nat.nat_rec&quot;,
      &quot;Nat.nat.nat_rec&quot;
    &quot;Nat.nat.nat_rec_set&quot; = &quot;nat_rec_set&quot;, &quot;Nat.nat_rec_set&quot;,
      &quot;nat.nat_rec_set&quot;, &quot;Nat.nat.nat_rec_set&quot;
    &quot;Nat.power&quot; = &quot;power&quot;, &quot;Nat.power&quot;
    &quot;Nat.power_class&quot; = &quot;power_class&quot;, &quot;Nat.power_class&quot;
    &quot;Nat.size&quot; = &quot;size&quot;, &quot;Nat.size&quot;
    &quot;NatBin.int_aux&quot; = &quot;int_aux&quot;, &quot;NatBin.int_aux&quot;
    &quot;NatBin.nat_aux&quot; = &quot;nat_aux&quot;, &quot;NatBin.nat_aux&quot;
    &quot;Not&quot; = &quot;Not&quot;
    &quot;Numeral.Abs_Bin&quot; = &quot;Abs_Bin&quot;, &quot;Numeral.Abs_Bin&quot;
    &quot;Numeral.Bin&quot; = &quot;Bin&quot;, &quot;Numeral.Bin&quot;
    &quot;Numeral.Bit&quot; = &quot;Bit&quot;, &quot;Numeral.Bit&quot;
    &quot;Numeral.Min&quot; = &quot;Numeral.Min&quot;
    &quot;Numeral.Pls&quot; = &quot;Numeral.Pls&quot;
    &quot;Numeral.Rep_Bin&quot; = &quot;Rep_Bin&quot;, &quot;Numeral.Rep_Bin&quot;
    &quot;Numeral.bin_add&quot; = &quot;bin_add&quot;, &quot;Numeral.bin_add&quot;
    &quot;Numeral.bin_minus&quot; = &quot;bin_minus&quot;, &quot;Numeral.bin_minus&quot;
    &quot;Numeral.bin_mult&quot; = &quot;bin_mult&quot;, &quot;Numeral.bin_mult&quot;
    &quot;Numeral.bin_pred&quot; = &quot;bin_pred&quot;, &quot;Numeral.bin_pred&quot;
    &quot;Numeral.bin_succ&quot; = &quot;bin_succ&quot;, &quot;Numeral.bin_succ&quot;
    &quot;Numeral.number_class&quot; = &quot;number_class&quot;, &quot;Numeral.number_class&quot;
    &quot;Numeral.number_of&quot; = &quot;number_of&quot;, &quot;Numeral.number_of&quot;
    &quot;Numeral.number_ring_class&quot; = &quot;number_ring_class&quot;,
      &quot;Numeral.number_ring_class&quot;
    &quot;OrderedGroup.ab_group_add_class&quot; = &quot;ab_group_add_class&quot;,
      &quot;OrderedGroup.ab_group_add_class&quot;
    &quot;OrderedGroup.ab_semigroup_add_class&quot; = &quot;ab_semigroup_add_class&quot;,
      &quot;OrderedGroup.ab_semigroup_add_class&quot;
    &quot;OrderedGroup.ab_semigroup_mult_class&quot; = &quot;ab_semigroup_mult_class&quot;,
      &quot;OrderedGroup.ab_semigroup_mult_class&quot;
    &quot;OrderedGroup.cancel_ab_semigroup_add_class&quot; =
      &quot;cancel_ab_semigroup_add_class&quot;,
      &quot;OrderedGroup.cancel_ab_semigroup_add_class&quot;
    &quot;OrderedGroup.cancel_semigroup_add_class&quot; =
      &quot;cancel_semigroup_add_class&quot;,
      &quot;OrderedGroup.cancel_semigroup_add_class&quot;
    &quot;OrderedGroup.comm_monoid_add_class&quot; = &quot;comm_monoid_add_class&quot;,
      &quot;OrderedGroup.comm_monoid_add_class&quot;
    &quot;OrderedGroup.comm_monoid_mult_class&quot; = &quot;comm_monoid_mult_class&quot;,
      &quot;OrderedGroup.comm_monoid_mult_class&quot;
    &quot;OrderedGroup.lordered_ab_group_abs_class&quot; =
      &quot;lordered_ab_group_abs_class&quot;,
      &quot;OrderedGroup.lordered_ab_group_abs_class&quot;
    &quot;OrderedGroup.lordered_ab_group_class&quot; = &quot;lordered_ab_group_class&quot;,
      &quot;OrderedGroup.lordered_ab_group_class&quot;
    &quot;OrderedGroup.lordered_ab_group_join_class&quot; =
      &quot;lordered_ab_group_join_class&quot;,
      &quot;OrderedGroup.lordered_ab_group_join_class&quot;
    &quot;OrderedGroup.lordered_ab_group_meet_class&quot; =
      &quot;lordered_ab_group_meet_class&quot;,
      &quot;OrderedGroup.lordered_ab_group_meet_class&quot;
    &quot;OrderedGroup.monoid_mult_class&quot; = &quot;monoid_mult_class&quot;,
      &quot;OrderedGroup.monoid_mult_class&quot;
    &quot;OrderedGroup.nprt&quot; = &quot;nprt&quot;, &quot;OrderedGroup.nprt&quot;
    &quot;OrderedGroup.ordered_cancel_ab_semigroup_add_class&quot; =
      &quot;ordered_cancel_ab_semigroup_add_class&quot;,
      &quot;OrderedGroup.ordered_cancel_ab_semigroup_add_class&quot;
    &quot;OrderedGroup.pordered_ab_group_add_class&quot; =
      &quot;pordered_ab_group_add_class&quot;,
      &quot;OrderedGroup.pordered_ab_group_add_class&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add_class&quot; =
      &quot;pordered_ab_semigroup_add_class&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add_class&quot;
    &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le_class&quot; =
      &quot;pordered_ab_semigroup_add_imp_le_class&quot;,
      &quot;OrderedGroup.pordered_ab_semigroup_add_imp_le_class&quot;
    &quot;OrderedGroup.pordered_cancel_ab_semigroup_add_class&quot; =
      &quot;pordered_cancel_ab_semigroup_add_class&quot;,
      &quot;OrderedGroup.pordered_cancel_ab_semigroup_add_class&quot;
    &quot;OrderedGroup.pprt&quot; = &quot;pprt&quot;, &quot;OrderedGroup.pprt&quot;
    &quot;OrderedGroup.semigroup_add_class&quot; = &quot;semigroup_add_class&quot;,
      &quot;OrderedGroup.semigroup_add_class&quot;
    &quot;OrderedGroup.semigroup_mult_class&quot; = &quot;semigroup_mult_class&quot;,
      &quot;OrderedGroup.semigroup_mult_class&quot;
    &quot;Pair&quot; = &quot;Pair&quot;
    &quot;Parity.even&quot; = &quot;even&quot;, &quot;Parity.even&quot;
    &quot;Parity.even_odd_class&quot; = &quot;even_odd_class&quot;, &quot;Parity.even_odd_class&quot;
    &quot;Part&quot; = &quot;Part&quot;
    &quot;Plus&quot; = &quot;Plus&quot;
    &quot;Pow&quot; = &quot;Pow&quot;
    &quot;Power.binomial&quot; = &quot;binomial&quot;, &quot;Power.binomial&quot;
    &quot;Power.recpower_class&quot; = &quot;recpower_class&quot;, &quot;Power.recpower_class&quot;
    &quot;Prod&quot; = &quot;Prod&quot;
    &quot;Product_Type.Abs_unit&quot; = &quot;Abs_unit&quot;, &quot;Product_Type.Abs_unit&quot;
    &quot;Product_Type.Pair_Rep&quot; = &quot;Pair_Rep&quot;, &quot;Product_Type.Pair_Rep&quot;
    &quot;Product_Type.Rep_unit&quot; = &quot;Rep_unit&quot;, &quot;Product_Type.Rep_unit&quot;
    &quot;Product_Type.Unity&quot; = &quot;Unity&quot;, &quot;Product_Type.Unity&quot;
    &quot;Product_Type.unit&quot; = &quot;unit&quot;, &quot;Product_Type.unit&quot;
    &quot;Product_Type.upd_fst&quot; = &quot;upd_fst&quot;, &quot;Product_Type.upd_fst&quot;
    &quot;Product_Type.upd_snd&quot; = &quot;upd_snd&quot;, &quot;Product_Type.upd_snd&quot;
    &quot;Relation.Domain&quot; = &quot;Domain&quot;, &quot;Relation.Domain&quot;
    &quot;Relation.Field&quot; = &quot;Field&quot;, &quot;Relation.Field&quot;
    &quot;Relation.Id&quot; = &quot;Id&quot;, &quot;Relation.Id&quot;
    &quot;Relation.Image&quot; = &quot;Image&quot;, &quot;Relation.Image&quot;
    &quot;Relation.Range&quot; = &quot;Range&quot;, &quot;Relation.Range&quot;
    &quot;Relation.antisym&quot; = &quot;antisym&quot;, &quot;Relation.antisym&quot;
    &quot;Relation.converse&quot; = &quot;converse&quot;, &quot;Relation.converse&quot;
    &quot;Relation.diag&quot; = &quot;diag&quot;, &quot;Relation.diag&quot;
    &quot;Relation.inv_image&quot; = &quot;inv_image&quot;, &quot;Relation.inv_image&quot;
    &quot;Relation.refl&quot; = &quot;refl&quot;, &quot;Relation.refl&quot;
    &quot;Relation.rel_comp&quot; = &quot;rel_comp&quot;, &quot;Relation.rel_comp&quot;
    &quot;Relation.single_valued&quot; = &quot;single_valued&quot;, &quot;Relation.single_valued&quot;
    &quot;Relation.sym&quot; = &quot;sym&quot;, &quot;Relation.sym&quot;
    &quot;Relation.trans&quot; = &quot;trans&quot;, &quot;Relation.trans&quot;
    &quot;Rep_Nat&quot; = &quot;Rep_Nat&quot;
    &quot;Rep_Prod&quot; = &quot;Rep_Prod&quot;
    &quot;Rep_Sum&quot; = &quot;Rep_Sum&quot;
    &quot;Ring_and_Field.axclass_0_neq_1_class&quot; = &quot;axclass_0_neq_1_class&quot;,
      &quot;Ring_and_Field.axclass_0_neq_1_class&quot;
    &quot;Ring_and_Field.axclass_abs_if_class&quot; = &quot;axclass_abs_if_class&quot;,
      &quot;Ring_and_Field.axclass_abs_if_class&quot;
    &quot;Ring_and_Field.axclass_no_zero_divisors_class&quot; =
      &quot;axclass_no_zero_divisors_class&quot;,
      &quot;Ring_and_Field.axclass_no_zero_divisors_class&quot;
    &quot;Ring_and_Field.comm_ring_1_class&quot; = &quot;comm_ring_1_class&quot;,
      &quot;Ring_and_Field.comm_ring_1_class&quot;
    &quot;Ring_and_Field.comm_ring_class&quot; = &quot;comm_ring_class&quot;,
      &quot;Ring_and_Field.comm_ring_class&quot;
    &quot;Ring_and_Field.comm_semiring_0_cancel_class&quot; =
      &quot;comm_semiring_0_cancel_class&quot;,
      &quot;Ring_and_Field.comm_semiring_0_cancel_class&quot;
    &quot;Ring_and_Field.comm_semiring_0_class&quot; = &quot;comm_semiring_0_class&quot;,
      &quot;Ring_and_Field.comm_semiring_0_class&quot;
    &quot;Ring_and_Field.comm_semiring_1_cancel_class&quot; =
      &quot;comm_semiring_1_cancel_class&quot;,
      &quot;Ring_and_Field.comm_semiring_1_cancel_class&quot;
    &quot;Ring_and_Field.comm_semiring_1_class&quot; = &quot;comm_semiring_1_class&quot;,
      &quot;Ring_and_Field.comm_semiring_1_class&quot;
    &quot;Ring_and_Field.comm_semiring_class&quot; = &quot;comm_semiring_class&quot;,
      &quot;Ring_and_Field.comm_semiring_class&quot;
    &quot;Ring_and_Field.division_by_zero_class&quot; = &quot;division_by_zero_class&quot;,
      &quot;Ring_and_Field.division_by_zero_class&quot;
    &quot;Ring_and_Field.field_class&quot; = &quot;field_class&quot;,
      &quot;Ring_and_Field.field_class&quot;
    &quot;Ring_and_Field.idom_class&quot; = &quot;idom_class&quot;, &quot;Ring_and_Field.idom_class&quot;
    &quot;Ring_and_Field.lordered_ring_class&quot; = &quot;lordered_ring_class&quot;,
      &quot;Ring_and_Field.lordered_ring_class&quot;
    &quot;Ring_and_Field.ordered_comm_semiring_strict_class&quot; =
      &quot;ordered_comm_semiring_strict_class&quot;,
      &quot;Ring_and_Field.ordered_comm_semiring_strict_class&quot;
    &quot;Ring_and_Field.ordered_field_class&quot; = &quot;ordered_field_class&quot;,
      &quot;Ring_and_Field.ordered_field_class&quot;
    &quot;Ring_and_Field.ordered_idom_class&quot; = &quot;ordered_idom_class&quot;,
      &quot;Ring_and_Field.ordered_idom_class&quot;
    &quot;Ring_and_Field.ordered_ring_strict_class&quot; =
      &quot;ordered_ring_strict_class&quot;,
      &quot;Ring_and_Field.ordered_ring_strict_class&quot;
    &quot;Ring_and_Field.ordered_semidom_class&quot; = &quot;ordered_semidom_class&quot;,
      &quot;Ring_and_Field.ordered_semidom_class&quot;
    &quot;Ring_and_Field.ordered_semiring_strict_class&quot; =
      &quot;ordered_semiring_strict_class&quot;,
      &quot;Ring_and_Field.ordered_semiring_strict_class&quot;
    &quot;Ring_and_Field.pordered_cancel_comm_semiring_class&quot; =
      &quot;pordered_cancel_comm_semiring_class&quot;,
      &quot;Ring_and_Field.pordered_cancel_comm_semiring_class&quot;
    &quot;Ring_and_Field.pordered_cancel_semiring_class&quot; =
      &quot;pordered_cancel_semiring_class&quot;,
      &quot;Ring_and_Field.pordered_cancel_semiring_class&quot;
    &quot;Ring_and_Field.pordered_comm_ring_class&quot; = &quot;pordered_comm_ring_class&quot;,
      &quot;Ring_and_Field.pordered_comm_ring_class&quot;
    &quot;Ring_and_Field.pordered_comm_semiring_class&quot; =
      &quot;pordered_comm_semiring_class&quot;,
      &quot;Ring_and_Field.pordered_comm_semiring_class&quot;
    &quot;Ring_and_Field.pordered_ring_class&quot; = &quot;pordered_ring_class&quot;,
      &quot;Ring_and_Field.pordered_ring_class&quot;
    &quot;Ring_and_Field.pordered_semiring_class&quot; = &quot;pordered_semiring_class&quot;,
      &quot;Ring_and_Field.pordered_semiring_class&quot;
    &quot;Ring_and_Field.ring_1_class&quot; = &quot;ring_1_class&quot;,
      &quot;Ring_and_Field.ring_1_class&quot;
    &quot;Ring_and_Field.ring_class&quot; = &quot;ring_class&quot;, &quot;Ring_and_Field.ring_class&quot;
    &quot;Ring_and_Field.semiring_0_cancel_class&quot; = &quot;semiring_0_cancel_class&quot;,
      &quot;Ring_and_Field.semiring_0_cancel_class&quot;
    &quot;Ring_and_Field.semiring_0_class&quot; = &quot;semiring_0_class&quot;,
      &quot;Ring_and_Field.semiring_0_class&quot;
    &quot;Ring_and_Field.semiring_1_cancel_class&quot; = &quot;semiring_1_cancel_class&quot;,
      &quot;Ring_and_Field.semiring_1_cancel_class&quot;
    &quot;Ring_and_Field.semiring_1_class&quot; = &quot;semiring_1_class&quot;,
      &quot;Ring_and_Field.semiring_1_class&quot;
    &quot;Ring_and_Field.semiring_class&quot; = &quot;semiring_class&quot;,
      &quot;Ring_and_Field.semiring_class&quot;
    &quot;Set.contents&quot; = &quot;contents&quot;, &quot;Set.contents&quot;
    &quot;Set.vimage&quot; = &quot;vimage&quot;, &quot;Set.vimage&quot;
    &quot;SetInterval.atLeast&quot; = &quot;atLeast&quot;, &quot;SetInterval.atLeast&quot;
    &quot;SetInterval.atLeastAtMost&quot; = &quot;atLeastAtMost&quot;,
      &quot;SetInterval.atLeastAtMost&quot;
    &quot;SetInterval.atLeastLessThan&quot; = &quot;atLeastLessThan&quot;,
      &quot;SetInterval.atLeastLessThan&quot;
    &quot;SetInterval.atMost&quot; = &quot;atMost&quot;, &quot;SetInterval.atMost&quot;
    &quot;SetInterval.greaterThan&quot; = &quot;greaterThan&quot;, &quot;SetInterval.greaterThan&quot;
    &quot;SetInterval.greaterThanAtMost&quot; = &quot;greaterThanAtMost&quot;,
      &quot;SetInterval.greaterThanAtMost&quot;
    &quot;SetInterval.greaterThanLessThan&quot; = &quot;greaterThanLessThan&quot;,
      &quot;SetInterval.greaterThanLessThan&quot;
    &quot;SetInterval.lessThan&quot; = &quot;lessThan&quot;, &quot;SetInterval.lessThan&quot;
    &quot;Sigma&quot; = &quot;Sigma&quot;
    &quot;Suc&quot; = &quot;Suc&quot;
    &quot;Sum&quot; = &quot;Sum&quot;
    &quot;Sum_Type.Inl_Rep&quot; = &quot;Inl_Rep&quot;, &quot;Sum_Type.Inl_Rep&quot;
    &quot;Sum_Type.Inr_Rep&quot; = &quot;Inr_Rep&quot;, &quot;Sum_Type.Inr_Rep&quot;
    &quot;TYPE&quot; = &quot;TYPE&quot;
    &quot;The&quot; = &quot;The&quot;
    &quot;Transitive_Closure.rtrancl&quot; = &quot;rtrancl&quot;, &quot;Transitive_Closure.rtrancl&quot;
    &quot;Transitive_Closure.trancl&quot; = &quot;trancl&quot;, &quot;Transitive_Closure.trancl&quot;
    &quot;True&quot; = &quot;True&quot;
    &quot;Trueprop&quot; = &quot;Trueprop&quot;
    &quot;Typedef.type_definition&quot; = &quot;type_definition&quot;, &quot;Typedef.type_definition&quot;
    &quot;UNION&quot; = &quot;UNION&quot;
    &quot;UNIV&quot; = &quot;UNIV&quot;
    &quot;Union&quot; = &quot;Union&quot;
    &quot;Wellfounded_Recursion.acyclic&quot; = &quot;acyclic&quot;,
      &quot;Wellfounded_Recursion.acyclic&quot;
    &quot;Wellfounded_Recursion.adm_wf&quot; = &quot;adm_wf&quot;,
      &quot;Wellfounded_Recursion.adm_wf&quot;
    &quot;Wellfounded_Recursion.cut&quot; = &quot;cut&quot;, &quot;Wellfounded_Recursion.cut&quot;
    &quot;Wellfounded_Recursion.wellorder_class&quot; = &quot;wellorder_class&quot;,
      &quot;Wellfounded_Recursion.wellorder_class&quot;
    &quot;Wellfounded_Recursion.wf&quot; = &quot;wf&quot;, &quot;Wellfounded_Recursion.wf&quot;
    &quot;Wellfounded_Recursion.wfrec&quot; = &quot;wfrec&quot;, &quot;Wellfounded_Recursion.wfrec&quot;
    &quot;Wellfounded_Recursion.wfrec_rel&quot; = &quot;wfrec_rel&quot;,
      &quot;Wellfounded_Recursion.wfrec_rel&quot;
    &quot;Wellfounded_Relations.finite_psubset&quot; = &quot;finite_psubset&quot;,
      &quot;Wellfounded_Relations.finite_psubset&quot;
    &quot;Wellfounded_Relations.less_than&quot; = &quot;less_than&quot;,
      &quot;Wellfounded_Relations.less_than&quot;
    &quot;Wellfounded_Relations.lex_prod&quot; = &quot;lex_prod&quot;,
      &quot;Wellfounded_Relations.lex_prod&quot;
    &quot;Wellfounded_Relations.measure&quot; = &quot;measure&quot;,
      &quot;Wellfounded_Relations.measure&quot;
    &quot;Wellfounded_Relations.same_fst&quot; = &quot;same_fst&quot;,
      &quot;Wellfounded_Relations.same_fst&quot;
    &quot;all&quot; = &quot;all&quot;
    &quot;arbitrary&quot; = &quot;arbitrary&quot;
    &quot;curry&quot; = &quot;curry&quot;
    &quot;dummy_pattern&quot; = &quot;dummy_pattern&quot;
    &quot;fst&quot; = &quot;fst&quot;
    &quot;image&quot; = &quot;image&quot;
    &quot;insert&quot; = &quot;insert&quot;
    &quot;op &amp;&quot; = &quot;op &amp;&quot;
    &quot;op *&quot; = &quot;op *&quot;
    &quot;op +&quot; = &quot;op +&quot;
    &quot;op -&quot; = &quot;op -&quot;
    &quot;op --&gt;&quot; = &quot;op --&gt;&quot;
    &quot;op :&quot; = &quot;op :&quot;
    &quot;op &lt;&quot; = &quot;op &lt;&quot;
    &quot;op &lt;=&quot; = &quot;op &lt;=&quot;
    &quot;op =&quot; = &quot;op =&quot;
    &quot;op Int&quot; = &quot;op Int&quot;
    &quot;op Un&quot; = &quot;op Un&quot;
    &quot;op |&quot; = &quot;op |&quot;
    &quot;pred_nat&quot; = &quot;pred_nat&quot;
    &quot;prod_fun&quot; = &quot;prod_fun&quot;
    &quot;snd&quot; = &quot;snd&quot;
    &quot;split&quot; = &quot;split&quot;
    &quot;uminus&quot; = &quot;uminus&quot;
    &quot;{}&quot; = &quot;{}&quot;
  oracle:
    &quot;CPure.skip_proof&quot; = &quot;skip_proof&quot;, &quot;CPure.skip_proof&quot;
    &quot;Inductive.constr_distinct&quot; = &quot;constr_distinct&quot;,
      &quot;Inductive.constr_distinct&quot;
    &quot;Presburger.presburger_oracle&quot; = &quot;presburger_oracle&quot;,
      &quot;Presburger.presburger_oracle&quot;
  type:
    &quot;#prop&quot; = &quot;#prop&quot;
    &quot;*&quot; = &quot;*&quot;
    &quot;+&quot; = &quot;+&quot;
    &quot;Datatype.option&quot; = &quot;option&quot;, &quot;Datatype.option&quot;
    &quot;Datatype_Universe.dtree&quot; = &quot;dtree&quot;, &quot;Datatype_Universe.dtree&quot;
    &quot;Fun.updbind&quot; = &quot;updbind&quot;, &quot;Fun.updbind&quot;
    &quot;Fun.updbinds&quot; = &quot;updbinds&quot;, &quot;Fun.updbinds&quot;
    &quot;HOL.case_syn&quot; = &quot;case_syn&quot;, &quot;HOL.case_syn&quot;
    &quot;HOL.cases_syn&quot; = &quot;cases_syn&quot;, &quot;HOL.cases_syn&quot;
    &quot;HOL.letbind&quot; = &quot;letbind&quot;, &quot;HOL.letbind&quot;
    &quot;HOL.letbinds&quot; = &quot;letbinds&quot;, &quot;HOL.letbinds&quot;
    &quot;IntDef.int&quot; = &quot;int&quot;, &quot;IntDef.int&quot;
    &quot;List.char&quot; = &quot;char&quot;, &quot;List.char&quot;
    &quot;List.list&quot; = &quot;list&quot;, &quot;List.list&quot;
    &quot;List.lupdbind&quot; = &quot;lupdbind&quot;, &quot;List.lupdbind&quot;
    &quot;List.lupdbinds&quot; = &quot;lupdbinds&quot;, &quot;List.lupdbinds&quot;
    &quot;List.nibble&quot; = &quot;nibble&quot;, &quot;List.nibble&quot;
    &quot;List.string&quot; = &quot;string&quot;, &quot;List.string&quot;
    &quot;Nat.ind&quot; = &quot;ind&quot;, &quot;Nat.ind&quot;
    &quot;Numeral.bin&quot; = &quot;bin&quot;, &quot;Numeral.bin&quot;
    &quot;Product_Type.patterns&quot; = &quot;patterns&quot;, &quot;Product_Type.patterns&quot;
    &quot;Product_Type.tuple_args&quot; = &quot;tuple_args&quot;, &quot;Product_Type.tuple_args&quot;
    &quot;Product_Type.unit&quot; = &quot;unit&quot;, &quot;Product_Type.unit&quot;
    &quot;Record.field&quot; = &quot;field&quot;, &quot;Record.field&quot;
    &quot;Record.field_type&quot; = &quot;field_type&quot;, &quot;Record.field_type&quot;
    &quot;Record.field_types&quot; = &quot;field_types&quot;, &quot;Record.field_types&quot;
    &quot;Record.fields&quot; = &quot;fields&quot;, &quot;Record.fields&quot;
    &quot;Record.ident&quot; = &quot;ident&quot;, &quot;Record.ident&quot;
    &quot;Record.update&quot; = &quot;update&quot;, &quot;Record.update&quot;
    &quot;Record.updates&quot; = &quot;updates&quot;, &quot;Record.updates&quot;
    &quot;any&quot; = &quot;any&quot;
    &quot;aprop&quot; = &quot;aprop&quot;
    &quot;args&quot; = &quot;args&quot;
    &quot;asms&quot; = &quot;asms&quot;
    &quot;bool&quot; = &quot;bool&quot;
    &quot;cargs&quot; = &quot;cargs&quot;
    &quot;classes&quot; = &quot;classes&quot;
    &quot;dummy&quot; = &quot;dummy&quot;
    &quot;fun&quot; = &quot;fun&quot;
    &quot;id&quot; = &quot;id&quot;
    &quot;idt&quot; = &quot;idt&quot;
    &quot;idts&quot; = &quot;idts&quot;
    &quot;index&quot; = &quot;index&quot;
    &quot;itself&quot; = &quot;itself&quot;
    &quot;logic&quot; = &quot;logic&quot;
    &quot;longid&quot; = &quot;longid&quot;
    &quot;nat&quot; = &quot;nat&quot;
    &quot;num&quot; = &quot;num&quot;
    &quot;num_const&quot; = &quot;num_const&quot;
    &quot;prop&quot; = &quot;prop&quot;
    &quot;pttrn&quot; = &quot;pttrn&quot;
    &quot;pttrns&quot; = &quot;pttrns&quot;
    &quot;set&quot; = &quot;set&quot;
    &quot;sort&quot; = &quot;sort&quot;
    &quot;struct&quot; = &quot;struct&quot;
    &quot;tid&quot; = &quot;tid&quot;
    &quot;tvar&quot; = &quot;tvar&quot;
    &quot;type&quot; = &quot;type&quot;
    &quot;types&quot; = &quot;types&quot;
    &quot;var&quot; = &quot;var&quot;
    &quot;xnum&quot; = &quot;xnum&quot;
    &quot;xstr&quot; = &quot;xstr&quot;
classes:
  <atom kind = "class">div</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">finite</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">inverse</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">linorder</atom> &lt; <atom kind = "class">lorder</atom>, <atom kind = "class">join_semilorder</atom>, <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">order</atom>
  <atom kind = "class">minus</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">one</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">ord</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">order</atom> &lt; <atom kind = "class">type</atom>, <atom kind = "class">ord</atom>
  <atom kind = "class">plus</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">times</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">type</atom>
  <atom kind = "class">zero</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">join_semilorder</atom> &lt; <atom kind = "class">type</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">order</atom>
  <atom kind = "class">lorder</atom> &lt; <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">order</atom>, <atom kind = "class">join_semilorder</atom>
  <atom kind = "class">meet_semilorder</atom> &lt; <atom kind = "class">type</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">order</atom>
  <atom kind = "class">power</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">number</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">number_ring</atom> &lt; <atom kind = "class">plus</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">comm_semiring</atom>, <atom kind = "class">zero</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_group_add</atom>,
    <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_ring</atom>, <atom kind = "class">one</atom>,
    <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">monoid_mult</atom>, <atom kind = "class">comm_monoid_mult</atom>, <atom kind = "class">semiring_1</atom>,
    <atom kind = "class">comm_semiring_1</atom>, <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">ring_1</atom>, <atom kind = "class">comm_semiring_1_cancel</atom>,
    <atom kind = "class">comm_ring_1</atom>, <atom kind = "class">type</atom>, <atom kind = "class">number</atom>
  <atom kind = "class">ab_group_add</atom> &lt; <atom kind = "class">minus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">ab_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>
  <atom kind = "class">ab_semigroup_add</atom> &lt; <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>
  <atom kind = "class">ab_semigroup_mult</atom> &lt; <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">type</atom>
  <atom kind = "class">cancel_ab_semigroup_add</atom> &lt; <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">cancel_semigroup_add</atom>
  <atom kind = "class">cancel_semigroup_add</atom> &lt; <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>
  <atom kind = "class">comm_monoid_add</atom> &lt; <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>
  <atom kind = "class">comm_monoid_mult</atom> &lt; <atom kind = "class">one</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">monoid_mult</atom>
  <atom kind = "class">lordered_ab_group</atom> &lt; <atom kind = "class">pordered_ab_group_add</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">join_semilorder</atom>
  <atom kind = "class">lordered_ab_group_abs</atom> &lt; <atom kind = "class">lordered_ab_group</atom>, <atom kind = "class">pordered_ab_group_add</atom>,
    <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>,
    <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>, <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>,
    <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>,
    <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">meet_semilorder</atom>,
    <atom kind = "class">join_semilorder</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">type</atom>
  <atom kind = "class">lordered_ab_group_join</atom> &lt; <atom kind = "class">pordered_ab_group_add</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">join_semilorder</atom>, <atom kind = "class">lordered_ab_group</atom>, <atom kind = "class">lorder</atom>,
    <atom kind = "class">meet_semilorder</atom>
  <atom kind = "class">lordered_ab_group_meet</atom> &lt; <atom kind = "class">pordered_ab_group_add</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">lordered_ab_group</atom>, <atom kind = "class">lorder</atom>,
    <atom kind = "class">join_semilorder</atom>
  <atom kind = "class">monoid_mult</atom> &lt; <atom kind = "class">one</atom>, <atom kind = "class">type</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>
  <atom kind = "class">ordered_cancel_ab_semigroup_add</atom> &lt; <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>,
    <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">linorder</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">join_semilorder</atom>, <atom kind = "class">meet_semilorder</atom>,
    <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>
  <atom kind = "class">pordered_ab_group_add</atom> &lt; <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>, <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>
  <atom kind = "class">pordered_ab_semigroup_add</atom> &lt; <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ab_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>
  <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom> &lt; <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>,
    <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>
  <atom kind = "class">pordered_cancel_ab_semigroup_add</atom> &lt; <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">cancel_semigroup_add</atom>
  <atom kind = "class">semigroup_add</atom> &lt; <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>
  <atom kind = "class">semigroup_mult</atom> &lt; <atom kind = "class">times</atom>, <atom kind = "class">type</atom>
  <atom kind = "class">even_odd</atom> &lt; <atom kind = "class">type</atom>
  <atom kind = "class">recpower</atom> &lt; <atom kind = "class">power</atom>, <atom kind = "class">type</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">one</atom>, <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">times</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">comm_semiring</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">comm_semiring_0</atom>,
    <atom kind = "class">monoid_mult</atom>, <atom kind = "class">comm_monoid_mult</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">comm_semiring_1</atom>,
    <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">semiring_0_cancel</atom>,
    <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_1_cancel</atom>
  <atom kind = "class">axclass_0_neq_1</atom> &lt; <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">one</atom>
  <atom kind = "class">axclass_abs_if</atom> &lt; <atom kind = "class">minus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">zero</atom>
  <atom kind = "class">axclass_no_zero_divisors</atom> &lt; <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">times</atom>
  <atom kind = "class">comm_ring</atom> &lt; <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0</atom>,
    <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">semiring_0_cancel</atom>,
    <atom kind = "class">comm_semiring_0_cancel</atom>
  <atom kind = "class">comm_ring_1</atom> &lt; <atom kind = "class">comm_ring</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">comm_semiring_1</atom>, <atom kind = "class">comm_monoid_mult</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>,
    <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>, <atom kind = "class">ring_1</atom>, <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">comm_semiring_1_cancel</atom>
  <atom kind = "class">comm_semiring</atom> &lt; <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">semiring</atom>
  <atom kind = "class">comm_semiring_0</atom> &lt; <atom kind = "class">comm_semiring</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">semiring_0</atom>
  <atom kind = "class">comm_semiring_0_cancel</atom> &lt; <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0_cancel</atom>
  <atom kind = "class">comm_semiring_1</atom> &lt; <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">one</atom>, <atom kind = "class">type</atom>, <atom kind = "class">comm_semiring_0</atom>,
    <atom kind = "class">comm_semiring</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>,
    <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>,
    <atom kind = "class">comm_monoid_mult</atom>, <atom kind = "class">monoid_mult</atom>, <atom kind = "class">semiring_1</atom>
  <atom kind = "class">comm_semiring_1_cancel</atom> &lt; <atom kind = "class">comm_semiring_1</atom>, <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">comm_monoid_mult</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>,
    <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">ab_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_1_cancel</atom>,
    <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0_cancel</atom>
  <atom kind = "class">division_by_zero</atom> &lt; <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">inverse</atom>
  <atom kind = "class">field</atom> &lt; <atom kind = "class">comm_ring_1</atom>, <atom kind = "class">comm_ring</atom>, <atom kind = "class">ring_1</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_semiring_1_cancel</atom>, <atom kind = "class">comm_semiring_1</atom>, <atom kind = "class">comm_monoid_mult</atom>,
    <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>,
    <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">inverse</atom>, <atom kind = "class">idom</atom>, <atom kind = "class">axclass_no_zero_divisors</atom>
  <atom kind = "class">idom</atom> &lt; <atom kind = "class">comm_ring_1</atom>, <atom kind = "class">comm_ring</atom>, <atom kind = "class">ring_1</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_semiring_1_cancel</atom>, <atom kind = "class">comm_semiring_1</atom>, <atom kind = "class">comm_monoid_mult</atom>,
    <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>,
    <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">axclass_no_zero_divisors</atom>
  <atom kind = "class">lordered_ring</atom> &lt; <atom kind = "class">pordered_ring</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">pordered_ab_group_add</atom>, <atom kind = "class">ab_group_add</atom>,
    <atom kind = "class">minus</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_cancel_semiring</atom>,
    <atom kind = "class">pordered_semiring</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>,
    <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">lordered_ab_group_abs</atom>,
    <atom kind = "class">lordered_ab_group</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">join_semilorder</atom>,
    <atom kind = "class">lordered_ab_group_meet</atom>, <atom kind = "class">lordered_ab_group_join</atom>
  <atom kind = "class">ordered_comm_semiring_strict</atom> &lt; <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">linorder</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">join_semilorder</atom>,
    <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">ordered_semiring_strict</atom>,
    <atom kind = "class">pordered_cancel_semiring</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">pordered_semiring</atom>,
    <atom kind = "class">pordered_cancel_comm_semiring</atom>, <atom kind = "class">pordered_comm_semiring</atom>
  <atom kind = "class">ordered_field</atom> &lt; <atom kind = "class">field</atom>, <atom kind = "class">inverse</atom>, <atom kind = "class">idom</atom>, <atom kind = "class">comm_ring_1</atom>, <atom kind = "class">comm_ring</atom>, <atom kind = "class">ring_1</atom>,
    <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>, <atom kind = "class">comm_semiring_1_cancel</atom>, <atom kind = "class">comm_semiring_1</atom>,
    <atom kind = "class">comm_monoid_mult</atom>, <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>,
    <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>, <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0</atom>,
    <atom kind = "class">comm_semiring</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>,
    <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>,
    <atom kind = "class">axclass_no_zero_divisors</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">times</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ordered_idom</atom>,
    <atom kind = "class">ordered_comm_semiring_strict</atom>, <atom kind = "class">pordered_cancel_comm_semiring</atom>,
    <atom kind = "class">pordered_comm_semiring</atom>, <atom kind = "class">ordered_ring_strict</atom>, <atom kind = "class">ordered_semiring_strict</atom>,
    <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">linorder</atom>, <atom kind = "class">axclass_abs_if</atom>,
    <atom kind = "class">lordered_ring</atom>, <atom kind = "class">pordered_ring</atom>, <atom kind = "class">pordered_cancel_semiring</atom>,
    <atom kind = "class">pordered_semiring</atom>, <atom kind = "class">lordered_ab_group_abs</atom>, <atom kind = "class">lordered_ab_group_meet</atom>,
    <atom kind = "class">lordered_ab_group_join</atom>, <atom kind = "class">lordered_ab_group</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">meet_semilorder</atom>,
    <atom kind = "class">join_semilorder</atom>, <atom kind = "class">pordered_ab_group_add</atom>,
    <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>, <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>,
    <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">ordered_semidom</atom>
  <atom kind = "class">ordered_idom</atom> &lt; <atom kind = "class">comm_ring_1</atom>, <atom kind = "class">comm_ring</atom>, <atom kind = "class">ring_1</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_semiring_1_cancel</atom>, <atom kind = "class">comm_semiring_1</atom>, <atom kind = "class">comm_monoid_mult</atom>,
    <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>,
    <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">ordered_comm_semiring_strict</atom>, <atom kind = "class">ordered_semiring_strict</atom>,
    <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">linorder</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">join_semilorder</atom>,
    <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_cancel_comm_semiring</atom>,
    <atom kind = "class">pordered_cancel_semiring</atom>, <atom kind = "class">pordered_comm_semiring</atom>, <atom kind = "class">pordered_semiring</atom>,
    <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">axclass_abs_if</atom>,
    <atom kind = "class">ordered_ring_strict</atom>, <atom kind = "class">lordered_ring</atom>, <atom kind = "class">pordered_ring</atom>,
    <atom kind = "class">lordered_ab_group_abs</atom>, <atom kind = "class">lordered_ab_group_meet</atom>, <atom kind = "class">lordered_ab_group_join</atom>,
    <atom kind = "class">lordered_ab_group</atom>, <atom kind = "class">pordered_ab_group_add</atom>, <atom kind = "class">ordered_semidom</atom>,
    <atom kind = "class">axclass_no_zero_divisors</atom>, <atom kind = "class">idom</atom>
  <atom kind = "class">ordered_ring_strict</atom> &lt; <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>, <atom kind = "class">semiring_0_cancel</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>,
    <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ordered_semiring_strict</atom>,
    <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">linorder</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">join_semilorder</atom>,
    <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_cancel_semiring</atom>,
    <atom kind = "class">pordered_semiring</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">axclass_abs_if</atom>, <atom kind = "class">lordered_ab_group</atom>, <atom kind = "class">pordered_ab_group_add</atom>, <atom kind = "class">lordered_ring</atom>,
    <atom kind = "class">pordered_ring</atom>, <atom kind = "class">lordered_ab_group_abs</atom>, <atom kind = "class">lordered_ab_group_meet</atom>,
    <atom kind = "class">lordered_ab_group_join</atom>, <atom kind = "class">axclass_no_zero_divisors</atom>
  <atom kind = "class">ordered_semidom</atom> &lt; <atom kind = "class">comm_semiring_1_cancel</atom>, <atom kind = "class">comm_semiring_1</atom>,
    <atom kind = "class">comm_monoid_mult</atom>, <atom kind = "class">semiring_1_cancel</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>,
    <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>, <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0</atom>,
    <atom kind = "class">comm_semiring</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>,
    <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>,
    <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ordered_comm_semiring_strict</atom>,
    <atom kind = "class">ordered_semiring_strict</atom>, <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">linorder</atom>,
    <atom kind = "class">lorder</atom>, <atom kind = "class">join_semilorder</atom>, <atom kind = "class">meet_semilorder</atom>,
    <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>, <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>,
    <atom kind = "class">pordered_cancel_comm_semiring</atom>, <atom kind = "class">pordered_cancel_semiring</atom>,
    <atom kind = "class">pordered_comm_semiring</atom>, <atom kind = "class">pordered_semiring</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>,
    <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>
  <atom kind = "class">ordered_semiring_strict</atom> &lt; <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">linorder</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">join_semilorder</atom>,
    <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0_cancel</atom>,
    <atom kind = "class">pordered_cancel_semiring</atom>, <atom kind = "class">pordered_semiring</atom>
  <atom kind = "class">pordered_cancel_comm_semiring</atom> &lt; <atom kind = "class">pordered_comm_semiring</atom>, <atom kind = "class">comm_semiring_0</atom>,
    <atom kind = "class">comm_semiring</atom>, <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>,
    <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">pordered_semiring</atom>,
    <atom kind = "class">pordered_cancel_semiring</atom>, <atom kind = "class">semiring_0_cancel</atom>
  <atom kind = "class">pordered_cancel_semiring</atom> &lt; <atom kind = "class">pordered_semiring</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0_cancel</atom>
  <atom kind = "class">pordered_comm_ring</atom> &lt; <atom kind = "class">comm_ring</atom>, <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>,
    <atom kind = "class">comm_semiring_0_cancel</atom>, <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0_cancel</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">pordered_comm_semiring</atom>, <atom kind = "class">pordered_semiring</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>,
    <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>
  <atom kind = "class">pordered_comm_semiring</atom> &lt; <atom kind = "class">comm_semiring_0</atom>, <atom kind = "class">comm_semiring</atom>,
    <atom kind = "class">ab_semigroup_mult</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">pordered_semiring</atom>
  <atom kind = "class">pordered_ring</atom> &lt; <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>, <atom kind = "class">semiring_0_cancel</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>,
    <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">pordered_semiring</atom>, <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>,
    <atom kind = "class">ord</atom>, <atom kind = "class">pordered_ab_group_add</atom>, <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>,
    <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>, <atom kind = "class">pordered_cancel_semiring</atom>
  <atom kind = "class">pordered_semiring</atom> &lt; <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">pordered_ab_semigroup_add</atom>, <atom kind = "class">order</atom>, <atom kind = "class">ord</atom>
  <atom kind = "class">ring</atom> &lt; <atom kind = "class">semiring</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">semigroup_mult</atom>,
    <atom kind = "class">times</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0_cancel</atom>,
    <atom kind = "class">semiring_0</atom>
  <atom kind = "class">ring_1</atom> &lt; <atom kind = "class">ring</atom>, <atom kind = "class">ab_group_add</atom>, <atom kind = "class">minus</atom>, <atom kind = "class">semiring_0_cancel</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>,
    <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>, <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>,
    <atom kind = "class">semiring_1_cancel</atom>
  <atom kind = "class">semiring</atom> &lt; <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">type</atom>, <atom kind = "class">semigroup_mult</atom>,
    <atom kind = "class">times</atom>
  <atom kind = "class">semiring_0</atom> &lt; <atom kind = "class">semiring</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">type</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>
  <atom kind = "class">semiring_0_cancel</atom> &lt; <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">type</atom>,
    <atom kind = "class">cancel_ab_semigroup_add</atom>, <atom kind = "class">cancel_semigroup_add</atom>
  <atom kind = "class">semiring_1</atom> &lt; <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">one</atom>, <atom kind = "class">type</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>,
    <atom kind = "class">plus</atom>, <atom kind = "class">monoid_mult</atom>
  <atom kind = "class">semiring_1_cancel</atom> &lt; <atom kind = "class">semiring_1</atom>, <atom kind = "class">axclass_0_neq_1</atom>, <atom kind = "class">semiring_0</atom>, <atom kind = "class">semiring</atom>,
    <atom kind = "class">comm_monoid_add</atom>, <atom kind = "class">zero</atom>, <atom kind = "class">ab_semigroup_add</atom>, <atom kind = "class">semigroup_add</atom>, <atom kind = "class">plus</atom>,
    <atom kind = "class">monoid_mult</atom>, <atom kind = "class">one</atom>, <atom kind = "class">semigroup_mult</atom>, <atom kind = "class">times</atom>, <atom kind = "class">type</atom>, <atom kind = "class">cancel_ab_semigroup_add</atom>,
    <atom kind = "class">cancel_semigroup_add</atom>, <atom kind = "class">semiring_0_cancel</atom>
  <atom kind = "class">wellorder</atom> &lt; <atom kind = "class">meet_semilorder</atom>, <atom kind = "class">join_semilorder</atom>, <atom kind = "class">lorder</atom>, <atom kind = "class">type</atom>, <atom kind = "class">ord</atom>, <atom kind = "class">order</atom>,
    <atom kind = "class">linorder</atom>
default sort: <atom kind = "class">type</atom>
universal non-emptiness witness: -
syntactic types:
  &quot;#prop&quot;
  &quot;any&quot;
  &quot;aprop&quot;
  &quot;args&quot;
  &quot;asms&quot;
  &quot;cargs&quot;
  &quot;case_syn&quot;
  &quot;cases_syn&quot;
  &quot;classes&quot;
  &quot;field&quot;
  &quot;field_type&quot;
  &quot;field_types&quot;
  &quot;fields&quot;
  &quot;id&quot;
  &quot;ident&quot;
  &quot;idt&quot;
  &quot;idts&quot;
  &quot;index&quot;
  &quot;letbind&quot;
  &quot;letbinds&quot;
  &quot;logic&quot;
  &quot;longid&quot;
  &quot;lupdbind&quot;
  &quot;lupdbinds&quot;
  &quot;num&quot;
  &quot;num_const&quot;
  &quot;patterns&quot;
  &quot;pttrn&quot;
  &quot;pttrns&quot;
  &quot;sort&quot;
  &quot;struct&quot;
  &quot;tid&quot;
  &quot;tuple_args&quot;
  &quot;tvar&quot;
  &quot;type&quot;
  &quot;types&quot;
  &quot;update&quot;
  &quot;updates&quot;
  &quot;updbind&quot;
  &quot;updbinds&quot;
  &quot;var&quot;
  &quot;xnum&quot;
  &quot;xstr&quot;
logical types:
  &quot;<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>&quot;
  &quot;<atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom>&quot;
  &quot;<atom kind = "tfree">&apos;a</atom> ??.Datatype_Universe.item&quot; =
    &quot;(<atom kind = "tfree">&apos;a</atom>, unit) ??.Datatype_Universe.node set&quot;
  &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node&quot;
  &quot;bin&quot;
  &quot;bool&quot;
  &quot;char&quot;
  &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) dtree&quot; = &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  &quot;_&quot;
  &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  &quot;ind&quot;
  &quot;int&quot;
  &quot;<atom kind = "tfree">&apos;a</atom> itself&quot;
  &quot;<atom kind = "tfree">&apos;a</atom> list&quot;
  &quot;nat&quot;
  &quot;nibble&quot;
  &quot;<atom kind = "tfree">&apos;a</atom> option&quot;
  &quot;prop&quot;
  &quot;<atom kind = "tfree">&apos;a</atom> set&quot;
  &quot;string&quot; = &quot;char list&quot;
  &quot;unit&quot;
type arities:
  * :: (<atom kind = "class">finite</atom>, <atom kind = "class">finite</atom>) <atom kind = "class">finite</atom>
  * :: (<atom kind = "class">type</atom>, <atom kind = "class">type</atom>) <atom kind = "class">type</atom>
  + :: (<atom kind = "class">type</atom>, <atom kind = "class">type</atom>) <atom kind = "class">type</atom>
  option :: (<atom kind = "class">type</atom>) <atom kind = "class">type</atom>
  ??.Datatype_Universe.node :: (<atom kind = "class">type</atom>, <atom kind = "class">type</atom>) <atom kind = "class">type</atom>
  int :: <atom kind = "class">even_odd</atom>
  int :: <atom kind = "class">recpower</atom>
  int :: <atom kind = "class">power</atom>
  int :: <atom kind = "class">div</atom>
  int :: <atom kind = "class">number_ring</atom>
  int :: <atom kind = "class">number</atom>
  int :: <atom kind = "class">ordered_idom</atom>
  int :: <atom kind = "class">idom</atom>
  int :: <atom kind = "class">ordered_semidom</atom>
  int :: <atom kind = "class">ordered_ring_strict</atom>
  int :: <atom kind = "class">axclass_no_zero_divisors</atom>
  int :: <atom kind = "class">lordered_ring</atom>
  int :: <atom kind = "class">lordered_ab_group_join</atom>
  int :: <atom kind = "class">lordered_ab_group_meet</atom>
  int :: <atom kind = "class">lordered_ab_group_abs</atom>
  int :: <atom kind = "class">pordered_ring</atom>
  int :: <atom kind = "class">lordered_ab_group</atom>
  int :: <atom kind = "class">pordered_ab_group_add</atom>
  int :: <atom kind = "class">axclass_abs_if</atom>
  int :: <atom kind = "class">ordered_comm_semiring_strict</atom>
  int :: <atom kind = "class">pordered_cancel_comm_semiring</atom>
  int :: <atom kind = "class">pordered_comm_semiring</atom>
  int :: <atom kind = "class">ordered_semiring_strict</atom>
  int :: <atom kind = "class">pordered_cancel_semiring</atom>
  int :: <atom kind = "class">pordered_semiring</atom>
  int :: <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>
  int :: <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>
  int :: <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>
  int :: <atom kind = "class">pordered_ab_semigroup_add</atom>
  int :: <atom kind = "class">linorder</atom>
  int :: <atom kind = "class">lorder</atom>
  int :: <atom kind = "class">join_semilorder</atom>
  int :: <atom kind = "class">meet_semilorder</atom>
  int :: <atom kind = "class">order</atom>
  int :: <atom kind = "class">comm_ring_1</atom>
  int :: <atom kind = "class">comm_semiring_1_cancel</atom>
  int :: <atom kind = "class">ring_1</atom>
  int :: <atom kind = "class">semiring_1_cancel</atom>
  int :: <atom kind = "class">comm_semiring_1</atom>
  int :: <atom kind = "class">semiring_1</atom>
  int :: <atom kind = "class">comm_monoid_mult</atom>
  int :: <atom kind = "class">monoid_mult</atom>
  int :: <atom kind = "class">axclass_0_neq_1</atom>
  int :: <atom kind = "class">comm_ring</atom>
  int :: <atom kind = "class">comm_semiring_0_cancel</atom>
  int :: <atom kind = "class">ring</atom>
  int :: <atom kind = "class">semiring_0_cancel</atom>
  int :: <atom kind = "class">ab_group_add</atom>
  int :: <atom kind = "class">cancel_ab_semigroup_add</atom>
  int :: <atom kind = "class">cancel_semigroup_add</atom>
  int :: <atom kind = "class">comm_semiring_0</atom>
  int :: <atom kind = "class">semiring_0</atom>
  int :: <atom kind = "class">comm_monoid_add</atom>
  int :: <atom kind = "class">comm_semiring</atom>
  int :: <atom kind = "class">semiring</atom>
  int :: <atom kind = "class">ab_semigroup_mult</atom>
  int :: <atom kind = "class">semigroup_mult</atom>
  int :: <atom kind = "class">ab_semigroup_add</atom>
  int :: <atom kind = "class">semigroup_add</atom>
  int :: <atom kind = "class">zero</atom>
  int :: <atom kind = "class">times</atom>
  int :: <atom kind = "class">plus</atom>
  int :: <atom kind = "class">ord</atom>
  int :: <atom kind = "class">one</atom>
  int :: <atom kind = "class">minus</atom>
  int :: <atom kind = "class">type</atom>
  char :: <atom kind = "class">type</atom>
  list :: (<atom kind = "class">type</atom>) <atom kind = "class">type</atom>
  nibble :: <atom kind = "class">type</atom>
  ind :: <atom kind = "class">type</atom>
  bin :: <atom kind = "class">type</atom>
  unit :: <atom kind = "class">finite</atom>
  unit :: <atom kind = "class">type</atom>
  bool :: <atom kind = "class">type</atom>
  fun :: (<atom kind = "class">type</atom>, <atom kind = "class">type</atom>) <atom kind = "class">power</atom>
  fun :: (<atom kind = "class">type</atom>, <atom kind = "class">type</atom>) <atom kind = "class">type</atom>
  nat :: <atom kind = "class">even_odd</atom>
  nat :: <atom kind = "class">number</atom>
  nat :: <atom kind = "class">recpower</atom>
  nat :: <atom kind = "class">div</atom>
  nat :: <atom kind = "class">ordered_semidom</atom>
  nat :: <atom kind = "class">ordered_comm_semiring_strict</atom>
  nat :: <atom kind = "class">pordered_cancel_comm_semiring</atom>
  nat :: <atom kind = "class">pordered_comm_semiring</atom>
  nat :: <atom kind = "class">ordered_semiring_strict</atom>
  nat :: <atom kind = "class">pordered_cancel_semiring</atom>
  nat :: <atom kind = "class">pordered_semiring</atom>
  nat :: <atom kind = "class">ordered_cancel_ab_semigroup_add</atom>
  nat :: <atom kind = "class">pordered_ab_semigroup_add_imp_le</atom>
  nat :: <atom kind = "class">pordered_cancel_ab_semigroup_add</atom>
  nat :: <atom kind = "class">pordered_ab_semigroup_add</atom>
  nat :: <atom kind = "class">comm_semiring_1_cancel</atom>
  nat :: <atom kind = "class">comm_semiring_0_cancel</atom>
  nat :: <atom kind = "class">semiring_1_cancel</atom>
  nat :: <atom kind = "class">semiring_0_cancel</atom>
  nat :: <atom kind = "class">cancel_ab_semigroup_add</atom>
  nat :: <atom kind = "class">cancel_semigroup_add</atom>
  nat :: <atom kind = "class">comm_semiring_1</atom>
  nat :: <atom kind = "class">semiring_1</atom>
  nat :: <atom kind = "class">comm_monoid_mult</atom>
  nat :: <atom kind = "class">monoid_mult</atom>
  nat :: <atom kind = "class">comm_semiring_0</atom>
  nat :: <atom kind = "class">semiring_0</atom>
  nat :: <atom kind = "class">comm_monoid_add</atom>
  nat :: <atom kind = "class">comm_semiring</atom>
  nat :: <atom kind = "class">semiring</atom>
  nat :: <atom kind = "class">ab_semigroup_mult</atom>
  nat :: <atom kind = "class">semigroup_mult</atom>
  nat :: <atom kind = "class">ab_semigroup_add</atom>
  nat :: <atom kind = "class">semigroup_add</atom>
  nat :: <atom kind = "class">axclass_0_neq_1</atom>
  nat :: <atom kind = "class">power</atom>
  nat :: <atom kind = "class">times</atom>
  nat :: <atom kind = "class">plus</atom>
  nat :: <atom kind = "class">minus</atom>
  nat :: <atom kind = "class">wellorder</atom>
  nat :: <atom kind = "class">linorder</atom>
  nat :: <atom kind = "class">lorder</atom>
  nat :: <atom kind = "class">join_semilorder</atom>
  nat :: <atom kind = "class">meet_semilorder</atom>
  nat :: <atom kind = "class">order</atom>
  nat :: <atom kind = "class">zero</atom>
  nat :: <atom kind = "class">ord</atom>
  nat :: <atom kind = "class">one</atom>
  nat :: <atom kind = "class">type</atom>
  set :: (<atom kind = "class">type</atom>) <atom kind = "class">power</atom>
  set :: (<atom kind = "class">type</atom>) <atom kind = "class">order</atom>
  set :: (<atom kind = "class">type</atom>) <atom kind = "class">ord</atom>
  set :: (<atom kind = "class">type</atom>) <atom kind = "class">minus</atom>
  set :: (<atom kind = "class">type</atom>) <atom kind = "class">type</atom>
consts:
  0 :: &quot;<atom kind = "tfree">&apos;a</atom>&quot;
  1 :: &quot;<atom kind = "tfree">&apos;a</atom>&quot;
  == :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; prop&quot;
  ==&gt; :: &quot;prop =&gt; prop =&gt; prop&quot;
  ??.Datatype.Suml :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  ??.Datatype.Sumr :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  ??.Datatype_Universe.Atom ::
    &quot;<atom kind = "tfree">&apos;a</atom> + nat =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  ??.Datatype_Universe.Case ::
    &quot;((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set =&gt; <atom kind = "tfree">&apos;c</atom>)
     =&gt; ((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set =&gt; <atom kind = "tfree">&apos;c</atom>)
        =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  ??.Datatype_Universe.Leaf ::
    &quot;<atom kind = "tfree">&apos;a</atom> =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  ??.Datatype_Universe.Lim ::
    &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set)
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  ??.Datatype_Universe.Node :: &quot;((nat =&gt; <atom kind = "tfree">&apos;b</atom> + nat) * (<atom kind = "tfree">&apos;a</atom> + nat)) set&quot;
  ??.Datatype_Universe.Numb ::
    &quot;nat =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  ??.Datatype_Universe.Push ::
    &quot;<atom kind = "tfree">&apos;b</atom> + nat =&gt; (nat =&gt; <atom kind = "tfree">&apos;b</atom> + nat) =&gt; nat =&gt; <atom kind = "tfree">&apos;b</atom> + nat&quot;
  ??.Datatype_Universe.Split ::
    &quot;((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set
      =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set =&gt; <atom kind = "tfree">&apos;c</atom>)
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  ??.HOL.induct_conj :: &quot;bool =&gt; bool =&gt; bool&quot;
  ??.HOL.induct_equal :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  ??.HOL.induct_forall :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; bool&quot;
  ??.HOL.induct_implies :: &quot;bool =&gt; bool =&gt; bool&quot;
  ??.Inductive.myinv :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  ??.Product_Type.internal_split :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  ACe :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  Abs_Bin :: &quot;int =&gt; bin&quot;
  Abs_Integ :: &quot;(nat * nat) set =&gt; int&quot;
  Abs_Nat :: &quot;ind =&gt; nat&quot;
  Abs_Node ::
    &quot;(nat =&gt; <atom kind = "tfree">&apos;b</atom> + nat) * (<atom kind = "tfree">&apos;a</atom> + nat) =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node&quot;
  Abs_Prod :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>&quot;
  Abs_Sum :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom>&quot;
  Abs_char ::
    &quot;(nibble + nibble, unit) ??.Datatype_Universe.node set =&gt; char&quot;
  Abs_list :: &quot;(<atom kind = "tfree">&apos;a</atom>, unit) ??.Datatype_Universe.node set =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  Abs_nibble :: &quot;(unit, unit) ??.Datatype_Universe.node set =&gt; nibble&quot;
  Abs_option :: &quot;(<atom kind = "tfree">&apos;a</atom>, unit) ??.Datatype_Universe.node set =&gt; <atom kind = "tfree">&apos;a</atom> option&quot;
  Abs_unit :: &quot;bool =&gt; unit&quot;
  All :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; bool&quot;
  Ball :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; bool&quot;
  Bex :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; bool&quot;
  Bin :: &quot;int set&quot;
  Bit :: &quot;bin =&gt; bool =&gt; bin&quot;
  Char :: &quot;nibble =&gt; nibble =&gt; char&quot;
  Collect :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  Cons :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  Divides.quorem :: &quot;(nat * nat) * nat * nat =&gt; bool&quot;
  Domain :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  Ex :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; bool&quot;
  Ex1 :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; bool&quot;
  False :: &quot;bool&quot;
  Field :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  Finites :: &quot;<atom kind = "tfree">&apos;a</atom> set set&quot;
  Goal :: &quot;prop =&gt; prop&quot;
  INTER :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> set) =&gt; <atom kind = "tfree">&apos;b</atom> set&quot;
  Id :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set&quot;
  If :: &quot;bool =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  Image :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;b</atom> set&quot;
  In0 ::
    &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  In1 ::
    &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  Inl :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom>&quot;
  Inl_Rep :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool =&gt; bool&quot;
  Inr :: &quot;<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom>&quot;
  Inr_Rep :: &quot;<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool =&gt; bool&quot;
  IntDiv.quorem :: &quot;(int * int) * int * int =&gt; bool&quot;
  Integ :: &quot;(nat * nat) set set&quot;
  Inter :: &quot;<atom kind = "tfree">&apos;a</atom> set set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  Ints :: &quot;<atom kind = "tfree">&apos;a</atom> set&quot;
  LC :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; bool&quot;
  Least :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  Let :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  Max :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  Min :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  Nat :: &quot;ind set&quot;
  Nats :: &quot;<atom kind = "tfree">&apos;a</atom> set&quot;
  Nibble0 :: &quot;nibble&quot;
  Nibble1 :: &quot;nibble&quot;
  Nibble2 :: &quot;nibble&quot;
  Nibble3 :: &quot;nibble&quot;
  Nibble4 :: &quot;nibble&quot;
  Nibble5 :: &quot;nibble&quot;
  Nibble6 :: &quot;nibble&quot;
  Nibble7 :: &quot;nibble&quot;
  Nibble8 :: &quot;nibble&quot;
  Nibble9 :: &quot;nibble&quot;
  NibbleA :: &quot;nibble&quot;
  NibbleB :: &quot;nibble&quot;
  NibbleC :: &quot;nibble&quot;
  NibbleD :: &quot;nibble&quot;
  NibbleE :: &quot;nibble&quot;
  NibbleF :: &quot;nibble&quot;
  Nil :: &quot;<atom kind = "tfree">&apos;a</atom> list&quot;
  None :: &quot;<atom kind = "tfree">&apos;a</atom> option&quot;
  Not :: &quot;bool =&gt; bool&quot;
  Numeral.Min :: &quot;bin&quot;
  Numeral.Pls :: &quot;bin&quot;
  Pair :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>&quot;
  Pair_Rep :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool&quot;
  Part :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  Plus :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;b</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom>) set&quot;
  Pow :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set set&quot;
  Prod :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool) set&quot;
  Push_Node ::
    &quot;<atom kind = "tfree">&apos;b</atom> + nat
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node
        =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node&quot;
  Range :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; <atom kind = "tfree">&apos;b</atom> set&quot;
  Rep_Bin :: &quot;bin =&gt; int&quot;
  Rep_Integ :: &quot;int =&gt; (nat * nat) set&quot;
  Rep_Nat :: &quot;nat =&gt; ind&quot;
  Rep_Node ::
    &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node =&gt; (nat =&gt; <atom kind = "tfree">&apos;b</atom> + nat) * (<atom kind = "tfree">&apos;a</atom> + nat)&quot;
  Rep_Prod :: &quot;<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool&quot;
  Rep_Sum :: &quot;<atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool =&gt; bool&quot;
  Rep_char ::
    &quot;char =&gt; (nibble + nibble, unit) ??.Datatype_Universe.node set&quot;
  Rep_list :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; (<atom kind = "tfree">&apos;a</atom>, unit) ??.Datatype_Universe.node set&quot;
  Rep_nibble :: &quot;nibble =&gt; (unit, unit) ??.Datatype_Universe.node set&quot;
  Rep_option :: &quot;<atom kind = "tfree">&apos;a</atom> option =&gt; (<atom kind = "tfree">&apos;a</atom>, unit) ??.Datatype_Universe.node set&quot;
  Rep_unit :: &quot;unit =&gt; bool&quot;
  Scons ::
    &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set
        =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  Sigma :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> set) =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set&quot;
  Some :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> option&quot;
  Suc :: &quot;nat =&gt; nat&quot;
  Suc_Rep :: &quot;ind =&gt; ind&quot;
  Sum :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool =&gt; bool) set&quot;
  TYPE :: &quot;<atom kind = "tfree">&apos;a</atom> itself&quot;
  The :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  True :: &quot;bool&quot;
  Trueprop :: &quot;bool =&gt; prop&quot;
  UNION :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> set) =&gt; <atom kind = "tfree">&apos;b</atom> set&quot;
  UNIV :: &quot;<atom kind = "tfree">&apos;a</atom> set&quot;
  Union :: &quot;<atom kind = "tfree">&apos;a</atom> set set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  Unity :: &quot;unit&quot;
  Zero_Rep :: &quot;ind&quot;
  ab_group_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ab_semigroup_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ab_semigroup_mult_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  abs :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  acyclic :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; bool&quot;
  adjust :: &quot;int =&gt; int * int =&gt; int * int&quot;
  adm_wf :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; ((<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; bool&quot;
  all :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; prop) =&gt; prop&quot;
  antisym :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; bool&quot;
  apfst :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom> * <atom kind = "tfree">&apos;b</atom>&quot;
  arbitrary :: &quot;<atom kind = "tfree">&apos;a</atom>&quot;
  atLeast :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  atLeastAtMost :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  atLeastLessThan :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  atMost :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  axclass_0_neq_1_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  axclass_abs_if_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  axclass_no_zero_divisors_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  bij :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; bool&quot;
  bin_add :: &quot;bin =&gt; bin =&gt; bin&quot;
  bin_minus :: &quot;bin =&gt; bin&quot;
  bin_mult :: &quot;bin =&gt; bin =&gt; bin&quot;
  bin_pred :: &quot;bin =&gt; bin&quot;
  bin_succ :: &quot;bin =&gt; bin&quot;
  binomial :: &quot;nat =&gt; nat =&gt; nat&quot;
  bool_case :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; bool =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  bool_rec :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; bool =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  bool_rec_set :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; (bool * <atom kind = "tfree">&apos;t</atom>) set&quot;
  butlast :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  cancel_ab_semigroup_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  cancel_semigroup_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  card :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; nat&quot;
  cardR :: &quot;(<atom kind = "tfree">&apos;a</atom> set * nat) set&quot;
  char_case :: &quot;(nibble =&gt; nibble =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; char =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  char_rec :: &quot;(nibble =&gt; nibble =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; char =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  char_rec_set :: &quot;(nibble =&gt; nibble =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; (char * <atom kind = "tfree">&apos;t</atom>) set&quot;
  char_rep_set ::
    &quot;(nibble + nibble, unit) ??.Datatype_Universe.node set set&quot;
  comm_monoid_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_monoid_mult_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_ring_1_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_ring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_semiring_0_cancel_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_semiring_0_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_semiring_1_cancel_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_semiring_1_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comm_semiring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  comp :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  concat :: &quot;<atom kind = "tfree">&apos;a</atom> list list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  congruent :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; bool&quot;
  congruent2 :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; (<atom kind = "tfree">&apos;b</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; bool&quot;
  contents :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  converse :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; (<atom kind = "tfree">&apos;b</atom> * <atom kind = "tfree">&apos;a</atom>) set&quot;
  curry :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  cut :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  diag :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set&quot;
  distinct :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; bool&quot;
  divAlg :: &quot;int * int =&gt; int * int&quot;
  div_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  divide :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  division_by_zero_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  dprod ::
    &quot;((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set *
      (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set) set
     =&gt; ((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set *
         (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set) set
        =&gt; ((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set *
            (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set) set&quot;
  drop :: &quot;nat =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  dropWhile :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  dsum ::
    &quot;((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set *
      (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set) set
     =&gt; ((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set *
         (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set) set
        =&gt; ((<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set *
            (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set) set&quot;
  dummy_pattern :: &quot;<atom kind = "tfree">&apos;a</atom>&quot;
  equiv :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; bool&quot;
  even :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  even_odd_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  field_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  filter :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  finite_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  finite_psubset :: &quot;(<atom kind = "tfree">&apos;a</atom> set * <atom kind = "tfree">&apos;a</atom> set) set&quot;
  fold :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> set =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  foldSet :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; (<atom kind = "tfree">&apos;b</atom> set * <atom kind = "tfree">&apos;a</atom>) set&quot;
  foldl :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  foldr :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  fst :: &quot;<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  fun_upd :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  gfp :: &quot;(<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set) =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  greaterThan :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  greaterThanAtMost :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  greaterThanLessThan :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  hd :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  id :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  idom_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  image :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;b</atom> set&quot;
  inj_on :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; bool&quot;
  insert :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  int :: &quot;nat =&gt; int&quot;
  int_aux :: &quot;int =&gt; nat =&gt; int&quot;
  intrel :: &quot;((nat * nat) * nat * nat) set&quot;
  inv_image :: &quot;(<atom kind = "tfree">&apos;b</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set&quot;
  inverse :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  inverse_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  is_join :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; bool&quot;
  is_meet :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; bool&quot;
  iszero :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  join :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  join_semilorder_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  last :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  lessThan :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  less_than :: &quot;(nat * nat) set&quot;
  lex :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> list * <atom kind = "tfree">&apos;a</atom> list) set&quot;
  lex_prod :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; (<atom kind = "tfree">&apos;b</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; ((<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) * <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set&quot;
  lexico :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> list * <atom kind = "tfree">&apos;a</atom> list) set&quot;
  lexn :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; nat =&gt; (<atom kind = "tfree">&apos;a</atom> list * <atom kind = "tfree">&apos;a</atom> list) set&quot;
  lfp :: &quot;(<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set) =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  linorder_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  list_all :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; bool&quot;
  list_all2 :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;b</atom> list =&gt; bool&quot;
  list_case :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  list_rec :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  list_rec_set :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> list * <atom kind = "tfree">&apos;t</atom>) set&quot;
  list_rep_set :: &quot;(<atom kind = "tfree">&apos;a</atom>, unit) ??.Datatype_Universe.node set set&quot;
  list_update :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; nat =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  lists :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> list set&quot;
  lorder_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  lordered_ab_group_abs_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  lordered_ab_group_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  lordered_ab_group_join_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  lordered_ab_group_meet_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  lordered_ring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  map :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;b</atom> list&quot;
  max :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  measure :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; nat) =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set&quot;
  meet :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  meet_semilorder_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  min :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  minus_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  mono :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; bool&quot;
  monoid_mult_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  nat :: &quot;int =&gt; nat&quot;
  nat_aux :: &quot;nat =&gt; int =&gt; nat&quot;
  nat_case :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (nat =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; nat =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  nat_rec :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (nat =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; nat =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  nat_rec_set :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (nat =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; (nat * <atom kind = "tfree">&apos;t</atom>) set&quot;
  ndepth :: &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node =&gt; nat&quot;
  neg :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  negDivAlg :: &quot;int * int =&gt; int * int&quot;
  negateSnd :: &quot;int * int =&gt; int * int&quot;
  nibble_case ::
    &quot;<atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>
   =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; nibble =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  nibble_rec ::
    &quot;<atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>
   =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; nibble =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  nibble_rec_set ::
    &quot;<atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>
   =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom>
    =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; <atom kind = "tfree">&apos;t</atom> =&gt; (nibble * <atom kind = "tfree">&apos;t</atom>) set&quot;
  nibble_rep_set :: &quot;(unit, unit) ??.Datatype_Universe.node set set&quot;
  nprt :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  nth :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; nat =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  ntrunc ::
    &quot;nat
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set
        =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set&quot;
  null :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; bool&quot;
  number_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  number_of :: &quot;bin =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  number_ring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  o2s :: &quot;<atom kind = "tfree">&apos;a</atom> option =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  of_int :: &quot;int =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  of_nat :: &quot;nat =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  one_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  op &amp; :: &quot;bool =&gt; bool =&gt; bool&quot;
  op * :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  op + :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  op - :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  op --&gt; :: &quot;bool =&gt; bool =&gt; bool&quot;
  op : :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; bool&quot;
  op &lt; :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  op &lt;= :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  op = :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  op @ :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  op Int :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  op Un :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  op div :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  op dvd :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; bool&quot;
  op mem :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; bool&quot;
  op mod :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  op | :: &quot;bool =&gt; bool =&gt; bool&quot;
  option_case :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> option =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  option_map :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> option =&gt; <atom kind = "tfree">&apos;b</atom> option&quot;
  option_rec :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> option =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  option_rec_set :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> option * <atom kind = "tfree">&apos;t</atom>) set&quot;
  option_rep_set :: &quot;(<atom kind = "tfree">&apos;a</atom>, unit) ??.Datatype_Universe.node set set&quot;
  ord_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  order_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ordered_cancel_ab_semigroup_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ordered_comm_semiring_strict_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ordered_field_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ordered_idom_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ordered_ring_strict_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ordered_semidom_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ordered_semiring_strict_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  overwrite :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  plus_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_ab_group_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_ab_semigroup_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_ab_semigroup_add_imp_le_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_cancel_ab_semigroup_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_cancel_comm_semiring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_cancel_semiring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_comm_ring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_comm_semiring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_ring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pordered_semiring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  posDivAlg :: &quot;int * int =&gt; int * int&quot;
  power :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; nat =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  power_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  pprt :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  pred_nat :: &quot;(nat * nat) set&quot;
  prod_case :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  prod_fun :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; (<atom kind = "tfree">&apos;c</atom> =&gt; <atom kind = "tfree">&apos;d</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;c</atom> =&gt; <atom kind = "tfree">&apos;b</atom> * <atom kind = "tfree">&apos;d</atom>&quot;
  prod_rec :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  prod_rec_set :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; ((<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) * <atom kind = "tfree">&apos;t</atom>) set&quot;
  quotient :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; <atom kind = "tfree">&apos;a</atom> set set&quot;
  recpower_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  refl :: &quot;<atom kind = "tfree">&apos;a</atom> set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; bool&quot;
  rel_comp :: &quot;(<atom kind = "tfree">&apos;b</atom> * <atom kind = "tfree">&apos;c</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;c</atom>) set&quot;
  remdups :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  remove1 :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  replicate :: &quot;nat =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  rev :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  ring_1_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  ring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  rtrancl :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set&quot;
  same_fst ::
    &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; (<atom kind = "tfree">&apos;b</atom> * <atom kind = "tfree">&apos;b</atom>) set) =&gt; ((<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) * <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set&quot;
  semigroup_add_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  semigroup_mult_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  semiring_0_cancel_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  semiring_0_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  semiring_1_cancel_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  semiring_1_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  semiring_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  set :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  setprod :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  setsum :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  single_valued :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set =&gt; bool&quot;
  size :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; nat&quot;
  snd :: &quot;<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  split :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>&quot;
  sublist :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; nat set =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  sum_case :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; (<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  sum_rec :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; (<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  sum_rec_set :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; (<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;t</atom>) =&gt; ((<atom kind = "tfree">&apos;a</atom> + <atom kind = "tfree">&apos;b</atom>) * <atom kind = "tfree">&apos;t</atom>) set&quot;
  surj :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; bool&quot;
  sym :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; bool&quot;
  take :: &quot;nat =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  takeWhile :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; bool) =&gt; <atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  the :: &quot;<atom kind = "tfree">&apos;a</atom> option =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  times_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  tl :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;a</atom> list&quot;
  trancl :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set&quot;
  trans :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; bool&quot;
  type_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  type_definition :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> set =&gt; bool&quot;
  uminus :: &quot;<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;a</atom>&quot;
  unit :: &quot;bool set&quot;
  unit_case :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; unit =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  unit_rec :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; unit =&gt; <atom kind = "tfree">&apos;t</atom>&quot;
  unit_rec_set :: &quot;<atom kind = "tfree">&apos;t</atom> =&gt; (unit * <atom kind = "tfree">&apos;t</atom>) set&quot;
  upd_fst :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom> * <atom kind = "tfree">&apos;b</atom>&quot;
  upd_snd :: &quot;(<atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;c</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom> =&gt; <atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;c</atom>&quot;
  uprod ::
    &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set set
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set set
        =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set set&quot;
  upt :: &quot;nat =&gt; nat =&gt; nat list&quot;
  usum ::
    &quot;(<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set set
     =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set set
        =&gt; (<atom kind = "tfree">&apos;a</atom>, <atom kind = "tfree">&apos;b</atom>) ??.Datatype_Universe.node set set&quot;
  vimage :: &quot;(<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;b</atom> set =&gt; <atom kind = "tfree">&apos;a</atom> set&quot;
  wellorder_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  wf :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; bool&quot;
  wfrec :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; ((<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>&quot;
  wfrec_rel :: &quot;(<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;a</atom>) set =&gt; ((<atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; <atom kind = "tfree">&apos;a</atom> =&gt; <atom kind = "tfree">&apos;b</atom>) =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) set&quot;
  zero_class :: &quot;<atom kind = "tfree">&apos;a</atom> itself =&gt; prop&quot;
  zip :: &quot;<atom kind = "tfree">&apos;a</atom> list =&gt; <atom kind = "tfree">&apos;b</atom> list =&gt; (<atom kind = "tfree">&apos;a</atom> * <atom kind = "tfree">&apos;b</atom>) list&quot;
  {} :: &quot;<atom kind = "tfree">&apos;a</atom> set&quot;
finals consts:
  ==
  ==&gt;
  Abs_Bin
  Abs_Integ
  Abs_Nat
  Abs_Node
  Abs_Prod
  Abs_Sum
  Abs_char
  Abs_list
  Abs_nibble
  Abs_option
  Abs_unit
  Rep_Bin
  Rep_Integ
  Rep_Nat
  Rep_Node
  Rep_Prod
  Rep_Sum
  Rep_char
  Rep_list
  Rep_nibble
  Rep_option
  Rep_unit
  TYPE
  The
  Trueprop
  all
  arbitrary
  op --&gt;
  op =
axioms:
  Char_def:
    &quot;Char <atom kind = "var">?x2.0</atom> <atom kind = "var">?x1.0</atom> ==
     Abs_char
      (Scons (??.Datatype_Universe.Leaf (Inl <atom kind = "var">?x2.0</atom>))
        (??.Datatype_Universe.Leaf (Inl <atom kind = "var">?x1.0</atom>)))&quot;
  Cons_def:
    &quot;<atom kind = "var">?x2.0</atom> # <atom kind = "var">?x1.0</atom> ==
     Abs_list
      (In1 (Scons (??.Datatype_Universe.Leaf <atom kind = "var">?x2.0</atom>) (Rep_list <atom kind = "var">?x1.0</atom>)))&quot;
  Nibble0_def: &quot;Nibble0 == Abs_nibble (In0 (In0 (In0 (In0 arbitrary))))&quot;
  Nibble1_def: &quot;Nibble1 == Abs_nibble (In0 (In0 (In0 (In1 arbitrary))))&quot;
  Nibble2_def: &quot;Nibble2 == Abs_nibble (In0 (In0 (In1 (In0 arbitrary))))&quot;
  Nibble3_def: &quot;Nibble3 == Abs_nibble (In0 (In0 (In1 (In1 arbitrary))))&quot;
  Nibble4_def: &quot;Nibble4 == Abs_nibble (In0 (In1 (In0 (In0 arbitrary))))&quot;
  Nibble5_def: &quot;Nibble5 == Abs_nibble (In0 (In1 (In0 (In1 arbitrary))))&quot;
  Nibble6_def: &quot;Nibble6 == Abs_nibble (In0 (In1 (In1 (In0 arbitrary))))&quot;
  Nibble7_def: &quot;Nibble7 == Abs_nibble (In0 (In1 (In1 (In1 arbitrary))))&quot;
  Nibble8_def: &quot;Nibble8 == Abs_nibble (In1 (In0 (In0 (In0 arbitrary))))&quot;
  Nibble9_def: &quot;Nibble9 == Abs_nibble (In1 (In0 (In0 (In1 arbitrary))))&quot;
  NibbleA_def: &quot;NibbleA == Abs_nibble (In1 (In0 (In1 (In0 arbitrary))))&quot;
  NibbleB_def: &quot;NibbleB == Abs_nibble (In1 (In0 (In1 (In1 arbitrary))))&quot;
  NibbleC_def: &quot;NibbleC == Abs_nibble (In1 (In1 (In0 (In0 arbitrary))))&quot;
  NibbleD_def: &quot;NibbleD == Abs_nibble (In1 (In1 (In0 (In1 arbitrary))))&quot;
  NibbleE_def: &quot;NibbleE == Abs_nibble (In1 (In1 (In1 (In0 arbitrary))))&quot;
  NibbleF_def: &quot;NibbleF == Abs_nibble (In1 (In1 (In1 (In1 arbitrary))))&quot;
  Nil_def: &quot;[] == Abs_list (In0 arbitrary)&quot;
  butlast_list_def:
    &quot;butlast == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. if <atom kind = "bound">xs</atom> = [] then [] else <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom>)&quot;
  char_case_def: &quot;char_case <atom kind = "var">?f1.0</atom> == char_rec <atom kind = "var">?f1.0</atom>&quot;
  char_rec_def: &quot;char_rec <atom kind = "var">?f1.0</atom> == %<atom kind = "bound">x</atom>. THE <atom kind = "bound">y</atom>. (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>) : char_rec_set <atom kind = "var">?f1.0</atom>&quot;
  char_rec_set.defs_1:
    &quot;char_rec_set <atom kind = "var">?f1.0</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>. <atom kind = "bound">x</atom> = (Char <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>, <atom kind = "var">?f1.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>)})&quot;
  char_rep_set.defs_1:
    &quot;char_rep_set ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>.
                     <atom kind = "bound">x</atom> =
                     Scons (??.Datatype_Universe.Leaf (Inl <atom kind = "bound">x2</atom>))
                      (??.Datatype_Universe.Leaf (Inl <atom kind = "bound">x1</atom>))})&quot;
  char_size_def: &quot;size == char_rec (%<atom kind = "bound">x</atom> <atom kind = "bound">xa</atom>. 0)&quot;
  concat_list_def: &quot;concat == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. op @ <atom kind = "bound">x</atom>)&quot;
  distinct_list_def: &quot;distinct == list_rec True (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. op &amp; (<atom kind = "bound">x</atom> ~: set <atom kind = "bound">xs</atom>))&quot;
  dropWhile_list_def:
    &quot;dropWhile ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">P</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. if <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> then <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom> else <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  drop_list_def:
    &quot;drop == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">n</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. nat_case (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  filter_list_def:
    &quot;filter ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">P</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. if <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> then <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom> else <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>) <atom kind = "bound">ua</atom>
         <atom kind = "bound">u</atom>&quot;
  foldl_list_def:
    &quot;foldl ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom> <atom kind = "bound">ub</atom>. list_rec (%<atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">a</atom>) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> (<atom kind = "bound">f</atom> <atom kind = "bound">a</atom> <atom kind = "bound">x</atom>)) <atom kind = "bound">ub</atom> <atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>&quot;
  foldr_list_def:
    &quot;foldr == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">a</atom>) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">f</atom> <atom kind = "bound">x</atom> (<atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> <atom kind = "bound">a</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  hd_list_def: &quot;hd == list_rec arbitrary (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. <atom kind = "bound">x</atom>)&quot;
  last_list_def: &quot;last == list_rec arbitrary (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. If (<atom kind = "bound">xs</atom> = []) <atom kind = "bound">x</atom>)&quot;
  lex_def: &quot;lex <atom kind = "var">?r</atom> == UN <atom kind = "bound">n</atom>. lexn <atom kind = "var">?r</atom> <atom kind = "bound">n</atom>&quot;
  lexico_def:
    &quot;lexico <atom kind = "var">?r</atom> ==
     inv_image (less_than &lt;*lex*&gt; lex <atom kind = "var">?r</atom>) (%<atom kind = "bound">xs</atom>. (length <atom kind = "bound">xs</atom>, <atom kind = "bound">xs</atom>))&quot;
  lexn_nat_def:
    &quot;lexn ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        nat_rec (%<atom kind = "bound">r</atom>. {})
         (%<atom kind = "bound">n</atom> <atom kind = "bound">na</atom> <atom kind = "bound">r</atom>.
             prod_fun (%(<atom kind = "bound">x</atom>, <atom kind = "bound">xs</atom>). <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) (%(<atom kind = "bound">x</atom>, <atom kind = "bound">xs</atom>). <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) `
             (<atom kind = "bound">r</atom> &lt;*lex*&gt; <atom kind = "bound">na</atom> <atom kind = "bound">r</atom>) Int
             {(<atom kind = "bound">xs</atom>, <atom kind = "bound">ys</atom>). length <atom kind = "bound">xs</atom> = Suc <atom kind = "bound">n</atom> &amp; length <atom kind = "bound">ys</atom> = Suc <atom kind = "bound">n</atom>})
         <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  list_all2_def:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom> ==
     length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom> &amp; (ALL (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>):set (zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>). <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> <atom kind = "bound">y</atom>)&quot;
  list_all_list_def:
    &quot;list_all == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">P</atom>. True) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> &amp; <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  list_case_def:
    &quot;list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> == list_rec <atom kind = "var">?f1.0</atom> (%<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x3</atom>. <atom kind = "var">?f2.0</atom> <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>)&quot;
  list_rec_def:
    &quot;list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> == %<atom kind = "bound">x</atom>. THE <atom kind = "bound">y</atom>. (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>) : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom>&quot;
  list_rec_set.defs_1:
    &quot;list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = ([], <atom kind = "var">?f1.0</atom>) |
                  (EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">y1</atom>.
                      <atom kind = "bound">x</atom> = (<atom kind = "bound">x2</atom> # <atom kind = "bound">x1</atom>, <atom kind = "var">?f2.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom> <atom kind = "bound">y1</atom>) &amp; (<atom kind = "bound">x1</atom>, <atom kind = "bound">y1</atom>) : <atom kind = "bound">S</atom>)})&quot;
  list_rep_set.defs_1:
    &quot;list_rep_set ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = In0 arbitrary |
                  (EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>.
                      <atom kind = "bound">x</atom> = In1 (Scons (??.Datatype_Universe.Leaf <atom kind = "bound">x2</atom>) <atom kind = "bound">x1</atom>) &amp;
                      <atom kind = "bound">x1</atom> : <atom kind = "bound">S</atom>)})&quot;
  list_size_def: &quot;size == list_rec 0 (%<atom kind = "bound">x</atom> <atom kind = "bound">xa</atom> <atom kind = "bound">xb</atom>. <atom kind = "bound">xb</atom> + Suc 0)&quot;
  list_update_list_def:
    &quot;list_update ==
     list_rec (%<atom kind = "bound">i</atom> <atom kind = "bound">v</atom>. [])
      (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">i</atom> <atom kind = "bound">v</atom>. case <atom kind = "bound">i</atom> of 0 =&gt; <atom kind = "bound">v</atom> # <atom kind = "bound">xs</atom> | Suc <atom kind = "bound">j</atom> =&gt; <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">j</atom> <atom kind = "bound">v</atom>)&quot;
  lists.defs_1:
    &quot;lists <atom kind = "var">?A</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = [] | (EX <atom kind = "bound">a</atom> <atom kind = "bound">l</atom>. <atom kind = "bound">x</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">l</atom> &amp; <atom kind = "bound">a</atom> : <atom kind = "var">?A</atom> &amp; <atom kind = "bound">l</atom> : <atom kind = "bound">S</atom>)})&quot;
  map_list_def:
    &quot;map == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">f</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom>. <atom kind = "bound">f</atom> <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom>) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  nibble_case_def:
    &quot;nibble_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
      <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> ==
     nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
  nibble_rec_def:
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> ==
     %<atom kind = "bound">x</atom>. THE <atom kind = "bound">y</atom>.
            (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>)
            : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom>
               <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
  nibble_rec_set.defs_1:
    &quot;nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
      <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = (Nibble0, <atom kind = "var">?f1.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble1, <atom kind = "var">?f2.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble2, <atom kind = "var">?f3.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble3, <atom kind = "var">?f4.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble4, <atom kind = "var">?f5.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble5, <atom kind = "var">?f6.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble6, <atom kind = "var">?f7.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble7, <atom kind = "var">?f8.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble8, <atom kind = "var">?f9.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble9, <atom kind = "var">?f10.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleA, <atom kind = "var">?f11.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleB, <atom kind = "var">?f12.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleC, <atom kind = "var">?f13.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleD, <atom kind = "var">?f14.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleE, <atom kind = "var">?f15.0</atom>) | <atom kind = "bound">x</atom> = (NibbleF, <atom kind = "var">?f16.0</atom>)})&quot;
  nibble_rep_set.defs_1:
    &quot;nibble_rep_set ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = In0 (In0 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In0 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In0 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In0 (In1 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In1 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In1 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In1 (In1 arbitrary)))})&quot;
  nibble_size_def: &quot;size == nibble_rec 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&quot;
  nth_list_def: &quot;op ! == list_rec arbitrary (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. nat_case <atom kind = "bound">x</atom>)&quot;
  null_list_def: &quot;null == list_rec True (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. False)&quot;
  op @_list_def: &quot;op @ == list_rec (%<atom kind = "bound">ys</atom>. <atom kind = "bound">ys</atom>) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">ys</atom>. <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">ys</atom>)&quot;
  op mem_list_def:
    &quot;op mem ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">x</atom>. False) (%<atom kind = "bound">y</atom> <atom kind = "bound">ys</atom> <atom kind = "bound">ysa</atom> <atom kind = "bound">x</atom>. if <atom kind = "bound">y</atom> = <atom kind = "bound">x</atom> then True else <atom kind = "bound">ysa</atom> <atom kind = "bound">x</atom>) <atom kind = "bound">ua</atom>
         <atom kind = "bound">u</atom>&quot;
  remdups_list_def:
    &quot;remdups ==
     list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. if <atom kind = "bound">x</atom> : set <atom kind = "bound">xs</atom> then <atom kind = "bound">xsa</atom> else <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom>)&quot;
  remove1_list_def:
    &quot;remove1 ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">x</atom>. []) (%<atom kind = "bound">y</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">x</atom>. if <atom kind = "bound">x</atom> = <atom kind = "bound">y</atom> then <atom kind = "bound">xs</atom> else <atom kind = "bound">y</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">x</atom>) <atom kind = "bound">ua</atom>
         <atom kind = "bound">u</atom>&quot;
  replicate_nat_def: &quot;replicate == nat_rec (%<atom kind = "bound">x</atom>. []) (%<atom kind = "bound">n</atom> <atom kind = "bound">na</atom> <atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> # <atom kind = "bound">na</atom> <atom kind = "bound">x</atom>)&quot;
  rev_list_def: &quot;rev == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. <atom kind = "bound">xsa</atom> @ [<atom kind = "bound">x</atom>])&quot;
  set_list_def: &quot;set == list_rec {} (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. insert <atom kind = "bound">x</atom>)&quot;
  sublist_def:
    &quot;sublist <atom kind = "var">?xs</atom> <atom kind = "var">?A</atom> == map fst [<atom kind = "bound">p</atom>:zip <atom kind = "var">?xs</atom> [0..length <atom kind = "var">?xs</atom>(]. snd <atom kind = "bound">p</atom> : <atom kind = "var">?A</atom>]&quot;
  takeWhile_list_def:
    &quot;takeWhile ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">P</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. if <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> then <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom> else []) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  take_list_def:
    &quot;take ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">n</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. nat_case [] (%<atom kind = "bound">m</atom>. <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">m</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  tl_list_def: &quot;tl == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. <atom kind = "bound">xs</atom>)&quot;
  type_definition_char:
    &quot;EX <atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : char_rep_set
     ==&gt; type_definition Rep_char Abs_char char_rep_set&quot;
  type_definition_list:
    &quot;EX <atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : list_rep_set
     ==&gt; type_definition Rep_list Abs_list list_rep_set&quot;
  type_definition_nibble:
    &quot;EX <atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : nibble_rep_set
     ==&gt; type_definition Rep_nibble Abs_nibble nibble_rep_set&quot;
  upt_nat_def:
    &quot;upt ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        nat_rec (%<atom kind = "bound">i</atom>. []) (%<atom kind = "bound">j</atom> <atom kind = "bound">ja</atom> <atom kind = "bound">i</atom>. if <atom kind = "bound">i</atom> &lt;= <atom kind = "bound">j</atom> then <atom kind = "bound">ja</atom> <atom kind = "bound">i</atom> @ [<atom kind = "bound">j</atom>] else []) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  zip_list_def:
    &quot;zip ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">xs</atom>. [])
         (%<atom kind = "bound">y</atom> <atom kind = "bound">ys</atom> <atom kind = "bound">ysa</atom>. list_case [] (%<atom kind = "bound">z</atom> <atom kind = "bound">zs</atom>. (<atom kind = "bound">z</atom>, <atom kind = "bound">y</atom>) # <atom kind = "bound">ysa</atom> <atom kind = "bound">zs</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
oracles: constr_distinct presburger_oracle skip_proof
theorems:
  Abs_char_cases:
    &quot;(!!<atom kind = "bound">y</atom>. [| <atom kind = "var">?x</atom> = Abs_char <atom kind = "bound">y</atom>; <atom kind = "bound">y</atom> : char_rep_set |] ==&gt; <atom kind = "var">?P</atom>) ==&gt; <atom kind = "var">?P</atom>&quot;
  Abs_char_induct: &quot;(!!<atom kind = "bound">y</atom>. <atom kind = "bound">y</atom> : char_rep_set ==&gt; <atom kind = "var">?P</atom> (Abs_char <atom kind = "bound">y</atom>)) ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom>&quot;
  Abs_char_inject:
    &quot;[| <atom kind = "var">?x</atom> : char_rep_set; <atom kind = "var">?y</atom> : char_rep_set |]
     ==&gt; (Abs_char <atom kind = "var">?x</atom> = Abs_char <atom kind = "var">?y</atom>) = (<atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>)&quot;
  Abs_char_inverse: &quot;<atom kind = "var">?y</atom> : char_rep_set ==&gt; Rep_char (Abs_char <atom kind = "var">?y</atom>) = <atom kind = "var">?y</atom>&quot;
  Abs_list_cases:
    &quot;(!!<atom kind = "bound">y</atom>. [| <atom kind = "var">?x</atom> = Abs_list <atom kind = "bound">y</atom>; <atom kind = "bound">y</atom> : list_rep_set |] ==&gt; <atom kind = "var">?P</atom>) ==&gt; <atom kind = "var">?P</atom>&quot;
  Abs_list_induct: &quot;(!!<atom kind = "bound">y</atom>. <atom kind = "bound">y</atom> : list_rep_set ==&gt; <atom kind = "var">?P</atom> (Abs_list <atom kind = "bound">y</atom>)) ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom>&quot;
  Abs_list_inject:
    &quot;[| <atom kind = "var">?x</atom> : list_rep_set; <atom kind = "var">?y</atom> : list_rep_set |]
     ==&gt; (Abs_list <atom kind = "var">?x</atom> = Abs_list <atom kind = "var">?y</atom>) = (<atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>)&quot;
  Abs_list_inverse: &quot;<atom kind = "var">?y</atom> : list_rep_set ==&gt; Rep_list (Abs_list <atom kind = "var">?y</atom>) = <atom kind = "var">?y</atom>&quot;
  Abs_nibble_cases:
    &quot;(!!<atom kind = "bound">y</atom>. [| <atom kind = "var">?x</atom> = Abs_nibble <atom kind = "bound">y</atom>; <atom kind = "bound">y</atom> : nibble_rep_set |] ==&gt; <atom kind = "var">?P</atom>) ==&gt; <atom kind = "var">?P</atom>&quot;
  Abs_nibble_induct:
    &quot;(!!<atom kind = "bound">y</atom>. <atom kind = "bound">y</atom> : nibble_rep_set ==&gt; <atom kind = "var">?P</atom> (Abs_nibble <atom kind = "bound">y</atom>)) ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom>&quot;
  Abs_nibble_inject:
    &quot;[| <atom kind = "var">?x</atom> : nibble_rep_set; <atom kind = "var">?y</atom> : nibble_rep_set |]
     ==&gt; (Abs_nibble <atom kind = "var">?x</atom> = Abs_nibble <atom kind = "var">?y</atom>) = (<atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>)&quot;
  Abs_nibble_inverse:
    &quot;<atom kind = "var">?y</atom> : nibble_rep_set ==&gt; Rep_nibble (Abs_nibble <atom kind = "var">?y</atom>) = <atom kind = "var">?y</atom>&quot;
  Char_def:
    &quot;Char <atom kind = "var">?x2.0</atom> <atom kind = "var">?x1.0</atom> ==
     Abs_char
      (Scons (??.Datatype_Universe.Leaf (Inl <atom kind = "var">?x2.0</atom>))
        (??.Datatype_Universe.Leaf (Inl <atom kind = "var">?x1.0</atom>)))&quot;
  Cons: &quot;[| <atom kind = "var">?a</atom> : <atom kind = "var">?A</atom>; <atom kind = "var">?l</atom> : lists <atom kind = "var">?A</atom> |] ==&gt; <atom kind = "var">?a</atom> # <atom kind = "var">?l</atom> : lists <atom kind = "var">?A</atom>&quot;
  Cons_def:
    &quot;<atom kind = "var">?x2.0</atom> # <atom kind = "var">?x1.0</atom> ==
     Abs_list
      (In1 (Scons (??.Datatype_Universe.Leaf <atom kind = "var">?x2.0</atom>) (Rep_list <atom kind = "var">?x1.0</atom>)))&quot;
  Cons_eq_appendI:
    &quot;[| <atom kind = "var">?x</atom> # <atom kind = "var">?xs1.0</atom> = <atom kind = "var">?ys</atom>; <atom kind = "var">?xs</atom> = <atom kind = "var">?xs1.0</atom> @ <atom kind = "var">?zs</atom> |] ==&gt; <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom> @ <atom kind = "var">?zs</atom>&quot;
  Cons_eq_append_conv:
    &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom> @ <atom kind = "var">?zs</atom>) =
     (<atom kind = "var">?ys</atom> = [] &amp; <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> = <atom kind = "var">?zs</atom> |
      (EX <atom kind = "bound">ys&apos;</atom>. <atom kind = "var">?x</atom> # <atom kind = "bound">ys&apos;</atom> = <atom kind = "var">?ys</atom> &amp; <atom kind = "var">?xs</atom> = <atom kind = "bound">ys&apos;</atom> @ <atom kind = "var">?zs</atom>))&quot;
  Cons_eq_map_conv:
    &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom>) =
     (EX <atom kind = "bound">z</atom> <atom kind = "bound">zs</atom>. <atom kind = "var">?ys</atom> = <atom kind = "bound">z</atom> # <atom kind = "bound">zs</atom> &amp; <atom kind = "var">?x</atom> = <atom kind = "var">?f</atom> <atom kind = "bound">z</atom> &amp; <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "bound">zs</atom>)&quot;
  Cons_in_lex:
    &quot;((<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>, <atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) : lex <atom kind = "var">?r</atom>) =
     ((<atom kind = "var">?x</atom>, <atom kind = "var">?y</atom>) : <atom kind = "var">?r</atom> &amp; length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom> |
      <atom kind = "var">?x</atom> = <atom kind = "var">?y</atom> &amp; (<atom kind = "var">?xs</atom>, <atom kind = "var">?ys</atom>) : lex <atom kind = "var">?r</atom>)&quot;
  Nibble0_def: &quot;Nibble0 == Abs_nibble (In0 (In0 (In0 (In0 arbitrary))))&quot;
  Nibble1_def: &quot;Nibble1 == Abs_nibble (In0 (In0 (In0 (In1 arbitrary))))&quot;
  Nibble2_def: &quot;Nibble2 == Abs_nibble (In0 (In0 (In1 (In0 arbitrary))))&quot;
  Nibble3_def: &quot;Nibble3 == Abs_nibble (In0 (In0 (In1 (In1 arbitrary))))&quot;
  Nibble4_def: &quot;Nibble4 == Abs_nibble (In0 (In1 (In0 (In0 arbitrary))))&quot;
  Nibble5_def: &quot;Nibble5 == Abs_nibble (In0 (In1 (In0 (In1 arbitrary))))&quot;
  Nibble6_def: &quot;Nibble6 == Abs_nibble (In0 (In1 (In1 (In0 arbitrary))))&quot;
  Nibble7_def: &quot;Nibble7 == Abs_nibble (In0 (In1 (In1 (In1 arbitrary))))&quot;
  Nibble8_def: &quot;Nibble8 == Abs_nibble (In1 (In0 (In0 (In0 arbitrary))))&quot;
  Nibble9_def: &quot;Nibble9 == Abs_nibble (In1 (In0 (In0 (In1 arbitrary))))&quot;
  NibbleA_def: &quot;NibbleA == Abs_nibble (In1 (In0 (In1 (In0 arbitrary))))&quot;
  NibbleB_def: &quot;NibbleB == Abs_nibble (In1 (In0 (In1 (In1 arbitrary))))&quot;
  NibbleC_def: &quot;NibbleC == Abs_nibble (In1 (In1 (In0 (In0 arbitrary))))&quot;
  NibbleD_def: &quot;NibbleD == Abs_nibble (In1 (In1 (In0 (In1 arbitrary))))&quot;
  NibbleE_def: &quot;NibbleE == Abs_nibble (In1 (In1 (In1 (In0 arbitrary))))&quot;
  NibbleF_def: &quot;NibbleF == Abs_nibble (In1 (In1 (In1 (In1 arbitrary))))&quot;
  Nil: &quot;[] : lists <atom kind = "var">?A</atom>&quot;
  Nil2_notin_lex: &quot;(<atom kind = "var">?xs</atom>, []) ~: lex <atom kind = "var">?r</atom>&quot;
  Nil_def: &quot;[] == Abs_list (In0 arbitrary)&quot;
  Nil_eq_concat_conv: &quot;([] = concat <atom kind = "var">?xss</atom>) = (ALL <atom kind = "bound">xs</atom>:set <atom kind = "var">?xss</atom>. <atom kind = "bound">xs</atom> = [])&quot;
  Nil_is_append_conv: &quot;([] = <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = (<atom kind = "var">?xs</atom> = [] &amp; <atom kind = "var">?ys</atom> = [])&quot;
  Nil_is_map_conv: &quot;([] = map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>) = (<atom kind = "var">?xs</atom> = [])&quot;
  Nil_is_rev_conv: &quot;([] = rev <atom kind = "var">?xs</atom>) = (<atom kind = "var">?xs</atom> = [])&quot;
  Nil_notin_lex: &quot;([], <atom kind = "var">?ys</atom>) ~: lex <atom kind = "var">?r</atom>&quot;
  Rep_char: &quot;Rep_char <atom kind = "var">?x</atom> : char_rep_set&quot;
  Rep_char_cases:
    &quot;[| <atom kind = "var">?y</atom> : char_rep_set; !!<atom kind = "bound">x</atom>. <atom kind = "var">?y</atom> = Rep_char <atom kind = "bound">x</atom> ==&gt; <atom kind = "var">?P</atom> |] ==&gt; <atom kind = "var">?P</atom>&quot;
  Rep_char_induct: &quot;[| <atom kind = "var">?y</atom> : char_rep_set; !!<atom kind = "bound">x</atom>. <atom kind = "var">?P</atom> (Rep_char <atom kind = "bound">x</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?y</atom>&quot;
  Rep_char_inject: &quot;(Rep_char <atom kind = "var">?x</atom> = Rep_char <atom kind = "var">?y</atom>) = (<atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>)&quot;
  Rep_char_inverse: &quot;Abs_char (Rep_char <atom kind = "var">?x</atom>) = <atom kind = "var">?x</atom>&quot;
  Rep_list: &quot;Rep_list <atom kind = "var">?x</atom> : list_rep_set&quot;
  Rep_list_cases:
    &quot;[| <atom kind = "var">?y</atom> : list_rep_set; !!<atom kind = "bound">x</atom>. <atom kind = "var">?y</atom> = Rep_list <atom kind = "bound">x</atom> ==&gt; <atom kind = "var">?P</atom> |] ==&gt; <atom kind = "var">?P</atom>&quot;
  Rep_list_induct: &quot;[| <atom kind = "var">?y</atom> : list_rep_set; !!<atom kind = "bound">x</atom>. <atom kind = "var">?P</atom> (Rep_list <atom kind = "bound">x</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?y</atom>&quot;
  Rep_list_inject: &quot;(Rep_list <atom kind = "var">?x</atom> = Rep_list <atom kind = "var">?y</atom>) = (<atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>)&quot;
  Rep_list_inverse: &quot;Abs_list (Rep_list <atom kind = "var">?x</atom>) = <atom kind = "var">?x</atom>&quot;
  Rep_nibble: &quot;Rep_nibble <atom kind = "var">?x</atom> : nibble_rep_set&quot;
  Rep_nibble_cases:
    &quot;[| <atom kind = "var">?y</atom> : nibble_rep_set; !!<atom kind = "bound">x</atom>. <atom kind = "var">?y</atom> = Rep_nibble <atom kind = "bound">x</atom> ==&gt; <atom kind = "var">?P</atom> |] ==&gt; <atom kind = "var">?P</atom>&quot;
  Rep_nibble_induct:
    &quot;[| <atom kind = "var">?y</atom> : nibble_rep_set; !!<atom kind = "bound">x</atom>. <atom kind = "var">?P</atom> (Rep_nibble <atom kind = "bound">x</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?y</atom>&quot;
  Rep_nibble_inject: &quot;(Rep_nibble <atom kind = "var">?x</atom> = Rep_nibble <atom kind = "var">?y</atom>) = (<atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>)&quot;
  Rep_nibble_inverse: &quot;Abs_nibble (Rep_nibble <atom kind = "var">?x</atom>) = <atom kind = "var">?x</atom>&quot;
  Suc_length_conv:
    &quot;(Suc <atom kind = "var">?n</atom> = length <atom kind = "var">?xs</atom>) = (EX <atom kind = "bound">y</atom> <atom kind = "bound">ys</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">y</atom> # <atom kind = "bound">ys</atom> &amp; length <atom kind = "bound">ys</atom> = <atom kind = "var">?n</atom>)&quot;
  all_nth_imp_all_set:
    &quot;[| ALL <atom kind = "bound">i</atom>&lt;length <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom>); <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom> |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom>&quot;
  all_set_conv_all_nth:
    &quot;(ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>) = (ALL <atom kind = "bound">i</atom>&lt;length <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom>))&quot;
  append1_eq_conv: &quot;(<atom kind = "var">?xs</atom> @ [<atom kind = "var">?x</atom>] = <atom kind = "var">?ys</atom> @ [<atom kind = "var">?y</atom>]) = (<atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom> &amp; <atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>)&quot;
  append_Cons: &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) @ <atom kind = "var">?ys</atom> = <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>&quot;
  append_Nil: &quot;[] @ <atom kind = "var">?ys</atom> = <atom kind = "var">?ys</atom>&quot;
  append_Nil2: &quot;<atom kind = "var">?xs</atom> @ [] = <atom kind = "var">?xs</atom>&quot;
  append_assoc: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) @ <atom kind = "var">?zs</atom> = <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> @ <atom kind = "var">?zs</atom>&quot;
  append_butlast_last_id: &quot;<atom kind = "var">?xs</atom> ~= [] ==&gt; butlast <atom kind = "var">?xs</atom> @ [last <atom kind = "var">?xs</atom>] = <atom kind = "var">?xs</atom>&quot;
  append_eq_appendI:
    &quot;[| <atom kind = "var">?xs</atom> @ <atom kind = "var">?xs1.0</atom> = <atom kind = "var">?zs</atom>; <atom kind = "var">?ys</atom> = <atom kind = "var">?xs1.0</atom> @ <atom kind = "var">?us</atom> |] ==&gt; <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> = <atom kind = "var">?zs</atom> @ <atom kind = "var">?us</atom>&quot;
  append_eq_append_conv:
    &quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom> | length <atom kind = "var">?us</atom> = length <atom kind = "var">?vs</atom>
     ==&gt; (<atom kind = "var">?xs</atom> @ <atom kind = "var">?us</atom> = <atom kind = "var">?ys</atom> @ <atom kind = "var">?vs</atom>) = (<atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom> &amp; <atom kind = "var">?us</atom> = <atom kind = "var">?vs</atom>)&quot;
  append_eq_append_conv2:
    &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> = <atom kind = "var">?zs</atom> @ <atom kind = "var">?ts</atom>) =
     (EX <atom kind = "bound">us</atom>.
         <atom kind = "var">?xs</atom> = <atom kind = "var">?zs</atom> @ <atom kind = "bound">us</atom> &amp; <atom kind = "bound">us</atom> @ <atom kind = "var">?ys</atom> = <atom kind = "var">?ts</atom> | <atom kind = "var">?xs</atom> @ <atom kind = "bound">us</atom> = <atom kind = "var">?zs</atom> &amp; <atom kind = "var">?ys</atom> = <atom kind = "bound">us</atom> @ <atom kind = "var">?ts</atom>)&quot;
  append_eq_append_conv_if:
    &quot;(<atom kind = "var">?xs\&lt;^isub&gt;1.0</atom> @ <atom kind = "var">?xs\&lt;^isub&gt;2.0</atom> = <atom kind = "var">?ys\&lt;^isub&gt;1.0</atom> @ <atom kind = "var">?ys\&lt;^isub&gt;2.0</atom>) =
     (if length <atom kind = "var">?xs\&lt;^isub&gt;1.0</atom> &lt;= length <atom kind = "var">?ys\&lt;^isub&gt;1.0</atom>
      then <atom kind = "var">?xs\&lt;^isub&gt;1.0</atom> = take (length <atom kind = "var">?xs\&lt;^isub&gt;1.0</atom>) <atom kind = "var">?ys\&lt;^isub&gt;1.0</atom> &amp;
           <atom kind = "var">?xs\&lt;^isub&gt;2.0</atom> = drop (length <atom kind = "var">?xs\&lt;^isub&gt;1.0</atom>) <atom kind = "var">?ys\&lt;^isub&gt;1.0</atom> @ <atom kind = "var">?ys\&lt;^isub&gt;2.0</atom>
      else take (length <atom kind = "var">?ys\&lt;^isub&gt;1.0</atom>) <atom kind = "var">?xs\&lt;^isub&gt;1.0</atom> = <atom kind = "var">?ys\&lt;^isub&gt;1.0</atom> &amp;
           drop (length <atom kind = "var">?ys\&lt;^isub&gt;1.0</atom>) <atom kind = "var">?xs\&lt;^isub&gt;1.0</atom> @ <atom kind = "var">?xs\&lt;^isub&gt;2.0</atom> = <atom kind = "var">?ys\&lt;^isub&gt;2.0</atom>)&quot;
  append_eq_conv_conj:
    &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> = <atom kind = "var">?zs</atom>) =
     (<atom kind = "var">?xs</atom> = take (length <atom kind = "var">?xs</atom>) <atom kind = "var">?zs</atom> &amp; <atom kind = "var">?ys</atom> = drop (length <atom kind = "var">?xs</atom>) <atom kind = "var">?zs</atom>)&quot;
  append_in_lists_conv:
    &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> : lists <atom kind = "var">?A</atom>) = (<atom kind = "var">?xs</atom> : lists <atom kind = "var">?A</atom> &amp; <atom kind = "var">?ys</atom> : lists <atom kind = "var">?A</atom>)&quot;
  append_is_Nil_conv: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> = []) = (<atom kind = "var">?xs</atom> = [] &amp; <atom kind = "var">?ys</atom> = [])&quot;
  append_same_eq: &quot;(<atom kind = "var">?ys</atom> @ <atom kind = "var">?xs</atom> = <atom kind = "var">?zs</atom> @ <atom kind = "var">?xs</atom>) = (<atom kind = "var">?ys</atom> = <atom kind = "var">?zs</atom>)&quot;
  append_self_conv: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> = <atom kind = "var">?xs</atom>) = (<atom kind = "var">?ys</atom> = [])&quot;
  append_self_conv2: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> = <atom kind = "var">?ys</atom>) = (<atom kind = "var">?xs</atom> = [])&quot;
  append_take_drop_id: &quot;take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> @ drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>&quot;
  butlast.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  butlast.simps:
    &quot;butlast [] = []&quot;
    &quot;butlast (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (if <atom kind = "var">?xs</atom> = [] then [] else <atom kind = "var">?x</atom> # butlast <atom kind = "var">?xs</atom>)&quot;
  butlast_append:
    &quot;butlast (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) =
     (if <atom kind = "var">?ys</atom> = [] then butlast <atom kind = "var">?xs</atom> else <atom kind = "var">?xs</atom> @ butlast <atom kind = "var">?ys</atom>)&quot;
  butlast_list_def:
    &quot;butlast == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. if <atom kind = "bound">xs</atom> = [] then [] else <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom>)&quot;
  butlast_snoc: &quot;butlast (<atom kind = "var">?xs</atom> @ [<atom kind = "var">?x</atom>]) = <atom kind = "var">?xs</atom>&quot;
  card_distinct: &quot;card (set <atom kind = "var">?xs</atom>) = length <atom kind = "var">?xs</atom> ==&gt; distinct <atom kind = "var">?xs</atom>&quot;
  card_length: &quot;card (set <atom kind = "var">?xs</atom>) &lt;= length <atom kind = "var">?xs</atom>&quot;
  char.case_cong:
    &quot;[| <atom kind = "var">?M</atom> = <atom kind = "var">?M&apos;</atom>;
        !!<atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>.
           <atom kind = "var">?M&apos;</atom> = Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>
           ==&gt; <atom kind = "var">?f1.0</atom> <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom> = <atom kind = "var">?g1.0</atom> <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom> |]
     ==&gt; char_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?M</atom> = char_case <atom kind = "var">?g1.0</atom> <atom kind = "var">?M&apos;</atom>&quot;
  char.cases:
    &quot;char_case <atom kind = "var">?f1.0</atom> (Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>) =
     <atom kind = "var">?f1.0</atom> <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>&quot;
  char.distinct:
  char.exhaust:
    &quot;(!!<atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>. <atom kind = "var">?y</atom> = Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom> ==&gt; <atom kind = "var">?P</atom>) ==&gt; <atom kind = "var">?P</atom>&quot;
  char.induct: &quot;(!!<atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>. <atom kind = "var">?P</atom> (Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>)) ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?char</atom>&quot;
  char.inject:
    &quot;(Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom> = Char <atom kind = "var">?nibble1&apos;</atom> <atom kind = "var">?nibble2&apos;</atom>) =
     (<atom kind = "var">?nibble1.0</atom> = <atom kind = "var">?nibble1&apos;</atom> &amp; <atom kind = "var">?nibble2.0</atom> = <atom kind = "var">?nibble2&apos;</atom>)&quot;
  char.nchotomy: &quot;ALL <atom kind = "bound">v</atom>. EX <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>. <atom kind = "bound">v</atom> = Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>&quot;
  char.recs:
    &quot;char_rec <atom kind = "var">?f1.0</atom> (Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>) =
     <atom kind = "var">?f1.0</atom> <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>&quot;
  char.simps:
    &quot;(Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom> = Char <atom kind = "var">?nibble1&apos;</atom> <atom kind = "var">?nibble2&apos;</atom>) =
     (<atom kind = "var">?nibble1.0</atom> = <atom kind = "var">?nibble1&apos;</atom> &amp; <atom kind = "var">?nibble2.0</atom> = <atom kind = "var">?nibble2&apos;</atom>)&quot;
    &quot;char_case <atom kind = "var">?f1.0</atom> (Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>) =
     <atom kind = "var">?f1.0</atom> <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>&quot;
    &quot;size (Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>) = 0&quot;
    &quot;char_rec <atom kind = "var">?f1.0</atom> (Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>) =
     <atom kind = "var">?f1.0</atom> <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>&quot;
  char.size: &quot;size (Char <atom kind = "var">?nibble1.0</atom> <atom kind = "var">?nibble2.0</atom>) = 0&quot;
  char.split:
    &quot;<atom kind = "var">?P</atom> (char_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?x</atom>) =
     (ALL <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>.
         <atom kind = "var">?x</atom> = Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom> --&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?f1.0</atom> <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>))&quot;
  char.split_asm:
    &quot;<atom kind = "var">?P</atom> (char_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?x</atom>) =
     (~ (EX <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>.
            <atom kind = "var">?x</atom> = Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom> &amp; ~ <atom kind = "var">?P</atom> (<atom kind = "var">?f1.0</atom> <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>)))&quot;
  char.splits:
    &quot;<atom kind = "var">?P</atom> (char_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?x</atom>) =
     (ALL <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>.
         <atom kind = "var">?x</atom> = Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom> --&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?f1.0</atom> <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>))&quot;
    &quot;<atom kind = "var">?P</atom> (char_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?x</atom>) =
     (~ (EX <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>.
            <atom kind = "var">?x</atom> = Char <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom> &amp; ~ <atom kind = "var">?P</atom> (<atom kind = "var">?f1.0</atom> <atom kind = "bound">nibble1</atom> <atom kind = "bound">nibble2</atom>)))&quot;
  char.weak_case_cong:
    &quot;<atom kind = "var">?M</atom> = <atom kind = "var">?M&apos;</atom> ==&gt; char_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?M</atom> = char_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?M&apos;</atom>&quot;
  char_case_def: &quot;char_case <atom kind = "var">?f1.0</atom> == char_rec <atom kind = "var">?f1.0</atom>&quot;
  char_rec_def: &quot;char_rec <atom kind = "var">?f1.0</atom> == %<atom kind = "bound">x</atom>. THE <atom kind = "bound">y</atom>. (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>) : char_rec_set <atom kind = "var">?f1.0</atom>&quot;
  char_rec_set.cases:
    &quot;[| <atom kind = "var">?a</atom> : char_rec_set <atom kind = "var">?f1.0</atom>;
        !!<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>. <atom kind = "var">?a</atom> = (Char <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>, <atom kind = "var">?f1.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>) ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  char_rec_set.defs:
    &quot;char_rec_set <atom kind = "var">?f1.0</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>. <atom kind = "bound">x</atom> = (Char <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>, <atom kind = "var">?f1.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>)})&quot;
  char_rec_set.elims:
    &quot;[| <atom kind = "var">?a</atom> : char_rec_set <atom kind = "var">?f1.0</atom>;
        !!<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>. <atom kind = "var">?a</atom> = (Char <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>, <atom kind = "var">?f1.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom>) ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  char_rec_set.induct: &quot;PROP <atom kind = "var">?psi</atom> ==&gt; PROP <atom kind = "var">?psi</atom>&quot;
  char_rec_set.intros:
    &quot;(Char <atom kind = "var">?x2.0</atom> <atom kind = "var">?x1.0</atom>, <atom kind = "var">?f1.0</atom> <atom kind = "var">?x2.0</atom> <atom kind = "var">?x1.0</atom>) : char_rec_set <atom kind = "var">?f1.0</atom>&quot;
  char_rep_set.defs:
    &quot;char_rep_set ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>.
                     <atom kind = "bound">x</atom> =
                     Scons (??.Datatype_Universe.Leaf (Inl <atom kind = "bound">x2</atom>))
                      (??.Datatype_Universe.Leaf (Inl <atom kind = "bound">x1</atom>))})&quot;
  char_rep_set.elims:
  char_rep_set.induct:
    &quot;[| <atom kind = "var">?xa</atom> : char_rep_set;
        !!<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>.
           <atom kind = "var">?P</atom> (Scons (??.Datatype_Universe.Leaf (Inl <atom kind = "bound">x2</atom>))
                (??.Datatype_Universe.Leaf (Inl <atom kind = "bound">x1</atom>))) |]
     ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?xa</atom>&quot;
  char_rep_set.intros:
    &quot;Scons (??.Datatype_Universe.Leaf (Inl <atom kind = "var">?x2.0</atom>))
      (??.Datatype_Universe.Leaf (Inl <atom kind = "var">?x1.0</atom>))
     : char_rep_set&quot;
  char_size_def: &quot;size == char_rec (%<atom kind = "bound">x</atom> <atom kind = "bound">xa</atom>. 0)&quot;
  concat.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  concat.simps:
    &quot;concat [] = []&quot;
    &quot;concat (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = <atom kind = "var">?x</atom> @ concat <atom kind = "var">?xs</atom>&quot;
  concat_append: &quot;concat (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = concat <atom kind = "var">?xs</atom> @ concat <atom kind = "var">?ys</atom>&quot;
  concat_eq_Nil_conv: &quot;(concat <atom kind = "var">?xss</atom> = []) = (ALL <atom kind = "bound">xs</atom>:set <atom kind = "var">?xss</atom>. <atom kind = "bound">xs</atom> = [])&quot;
  concat_list_def: &quot;concat == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. op @ <atom kind = "bound">x</atom>)&quot;
  distinct.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  distinct.simps:
    &quot;distinct [] = True&quot;
    &quot;distinct (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (<atom kind = "var">?x</atom> ~: set <atom kind = "var">?xs</atom> &amp; distinct <atom kind = "var">?xs</atom>)&quot;
  distinct_append:
    &quot;distinct (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) =
     (distinct <atom kind = "var">?xs</atom> &amp; distinct <atom kind = "var">?ys</atom> &amp; set <atom kind = "var">?xs</atom> Int set <atom kind = "var">?ys</atom> = {})&quot;
  distinct_card: &quot;distinct <atom kind = "var">?xs</atom> ==&gt; card (set <atom kind = "var">?xs</atom>) = length <atom kind = "var">?xs</atom>&quot;
  distinct_conv_nth:
    &quot;distinct <atom kind = "var">?xs</atom> =
     (ALL <atom kind = "bound">i</atom> <atom kind = "bound">j</atom>.
         <atom kind = "bound">i</atom> &lt; length <atom kind = "var">?xs</atom> &amp; <atom kind = "bound">j</atom> &lt; length <atom kind = "var">?xs</atom> &amp; <atom kind = "bound">i</atom> ~= <atom kind = "bound">j</atom> --&gt; <atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom> ~= <atom kind = "var">?xs</atom> ! <atom kind = "bound">j</atom>)&quot;
  distinct_filter: &quot;distinct <atom kind = "var">?xs</atom> ==&gt; distinct (filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>)&quot;
  distinct_list_def: &quot;distinct == list_rec True (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. op &amp; (<atom kind = "bound">x</atom> ~: set <atom kind = "bound">xs</atom>))&quot;
  distinct_remdups: &quot;distinct (remdups <atom kind = "var">?xs</atom>)&quot;
  distinct_remove1: &quot;distinct <atom kind = "var">?xs</atom> ==&gt; distinct (remove1 <atom kind = "var">?x</atom> <atom kind = "var">?xs</atom>)&quot;
  drop.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  drop.simps:
    &quot;drop <atom kind = "var">?n</atom> [] = []&quot;
    &quot;drop <atom kind = "var">?n</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (case <atom kind = "var">?n</atom> of 0 =&gt; <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> | Suc <atom kind = "bound">m</atom> =&gt; drop <atom kind = "bound">m</atom> <atom kind = "var">?xs</atom>)&quot;
  dropWhile.induct:
    &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  dropWhile.simps:
    &quot;dropWhile <atom kind = "var">?P</atom> [] = []&quot;
    &quot;dropWhile <atom kind = "var">?P</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) =
     (if <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> then dropWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> else <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>)&quot;
  dropWhile_append1:
    &quot;[| <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom>; ~ <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> |]
     ==&gt; dropWhile <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = dropWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>&quot;
  dropWhile_append2:
    &quot;(!!<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : set <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>)
     ==&gt; dropWhile <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = dropWhile <atom kind = "var">?P</atom> <atom kind = "var">?ys</atom>&quot;
  dropWhile_eq_Cons_conv:
    &quot;(dropWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) =
     (<atom kind = "var">?xs</atom> = takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> @ <atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom> &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?y</atom>)&quot;
  dropWhile_eq_Nil_conv: &quot;(dropWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> = []) = (ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>)&quot;
  dropWhile_list_def:
    &quot;dropWhile ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">P</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. if <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> then <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom> else <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  drop_0: &quot;drop 0 <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>&quot;
  drop_Cons:
    &quot;drop <atom kind = "var">?n</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (case <atom kind = "var">?n</atom> of 0 =&gt; <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> | Suc <atom kind = "bound">m</atom> =&gt; drop <atom kind = "bound">m</atom> <atom kind = "var">?xs</atom>)&quot;
  drop_Cons&apos;:
    &quot;drop <atom kind = "var">?n</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (if <atom kind = "var">?n</atom> = 0 then <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> else drop (<atom kind = "var">?n</atom> - 1) <atom kind = "var">?xs</atom>)&quot;
  drop_Nil: &quot;drop <atom kind = "var">?n</atom> [] = []&quot;
  drop_Suc: &quot;drop (Suc <atom kind = "var">?n</atom>) <atom kind = "var">?xs</atom> = drop <atom kind = "var">?n</atom> (tl <atom kind = "var">?xs</atom>)&quot;
  drop_Suc_Cons: &quot;drop (Suc <atom kind = "var">?n</atom>) (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>&quot;
  drop_Suc_conv_tl:
    &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom> # drop (Suc <atom kind = "var">?i</atom>) <atom kind = "var">?xs</atom> = drop <atom kind = "var">?i</atom> <atom kind = "var">?xs</atom>&quot;
  drop_all: &quot;length <atom kind = "var">?xs</atom> &lt;= <atom kind = "var">?n</atom> ==&gt; drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> = []&quot;
  drop_append:
    &quot;drop <atom kind = "var">?n</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> @ drop (<atom kind = "var">?n</atom> - length <atom kind = "var">?xs</atom>) <atom kind = "var">?ys</atom>&quot;
  drop_drop: &quot;drop <atom kind = "var">?n</atom> (drop <atom kind = "var">?m</atom> <atom kind = "var">?xs</atom>) = drop (<atom kind = "var">?n</atom> + <atom kind = "var">?m</atom>) <atom kind = "var">?xs</atom>&quot;
  drop_eq_Nil: &quot;(drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> = []) = (length <atom kind = "var">?xs</atom> &lt;= <atom kind = "var">?n</atom>)&quot;
  drop_list_def:
    &quot;drop == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">n</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. nat_case (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  drop_map: &quot;drop <atom kind = "var">?n</atom> (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>) = map <atom kind = "var">?f</atom> (drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>)&quot;
  drop_take: &quot;drop <atom kind = "var">?n</atom> (take <atom kind = "var">?m</atom> <atom kind = "var">?xs</atom>) = take (<atom kind = "var">?m</atom> - <atom kind = "var">?n</atom>) (drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>)&quot;
  drop_tl: &quot;drop <atom kind = "var">?n</atom> (tl <atom kind = "var">?xs</atom>) = tl (drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>)&quot;
  elem_le_sum: &quot;<atom kind = "var">?n</atom> : set <atom kind = "var">?ns</atom> ==&gt; <atom kind = "var">?n</atom> &lt;= foldl op + 0 <atom kind = "var">?ns</atom>&quot;
  eq_Nil_appendI: &quot;<atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom> ==&gt; <atom kind = "var">?xs</atom> = [] @ <atom kind = "var">?ys</atom>&quot;
  ex_map_conv: &quot;(EX <atom kind = "bound">xs</atom>. <atom kind = "var">?ys</atom> = map <atom kind = "var">?f</atom> <atom kind = "bound">xs</atom>) = (ALL <atom kind = "bound">y</atom>:set <atom kind = "var">?ys</atom>. EX <atom kind = "bound">x</atom>. <atom kind = "bound">y</atom> = <atom kind = "var">?f</atom> <atom kind = "bound">x</atom>)&quot;
  filter.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  filter.simps:
    &quot;filter <atom kind = "var">?P</atom> [] = []&quot;
    &quot;filter <atom kind = "var">?P</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) =
     (if <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> then <atom kind = "var">?x</atom> # filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> else filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>)&quot;
  filter_False: &quot;ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. ~ <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> ==&gt; filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> = []&quot;
  filter_True: &quot;ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> ==&gt; filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>&quot;
  filter_append: &quot;filter <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> @ filter <atom kind = "var">?P</atom> <atom kind = "var">?ys</atom>&quot;
  filter_concat: &quot;filter <atom kind = "var">?p</atom> (concat <atom kind = "var">?xs</atom>) = concat (map (filter <atom kind = "var">?p</atom>) <atom kind = "var">?xs</atom>)&quot;
  filter_filter: &quot;filter <atom kind = "var">?P</atom> (filter <atom kind = "var">?Q</atom> <atom kind = "var">?xs</atom>) = [<atom kind = "bound">x</atom>:<atom kind = "var">?xs</atom>. <atom kind = "var">?Q</atom> <atom kind = "bound">x</atom> &amp; <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>]&quot;
  filter_is_subset: &quot;set (filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>) &lt;= set <atom kind = "var">?xs</atom>&quot;
  filter_list_def:
    &quot;filter ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">P</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. if <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> then <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom> else <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>) <atom kind = "bound">ua</atom>
         <atom kind = "bound">u</atom>&quot;
  finite_list: &quot;finite <atom kind = "var">?A</atom> ==&gt; EX <atom kind = "bound">l</atom>. set <atom kind = "bound">l</atom> = <atom kind = "var">?A</atom>&quot;
  finite_set: &quot;finite (set <atom kind = "var">?xs</atom>)&quot;
  foldl.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  foldl.simps:
    &quot;foldl <atom kind = "var">?f</atom> <atom kind = "var">?a</atom> [] = <atom kind = "var">?a</atom>&quot;
    &quot;foldl <atom kind = "var">?f</atom> <atom kind = "var">?a</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = foldl <atom kind = "var">?f</atom> (<atom kind = "var">?f</atom> <atom kind = "var">?a</atom> <atom kind = "var">?x</atom>) <atom kind = "var">?xs</atom>&quot;
  foldl_Cons: &quot;foldl <atom kind = "var">?f</atom> <atom kind = "var">?a</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = foldl <atom kind = "var">?f</atom> (<atom kind = "var">?f</atom> <atom kind = "var">?a</atom> <atom kind = "var">?x</atom>) <atom kind = "var">?xs</atom>&quot;
  foldl_Nil: &quot;foldl <atom kind = "var">?f</atom> <atom kind = "var">?a</atom> [] = <atom kind = "var">?a</atom>&quot;
  foldl_append: &quot;foldl <atom kind = "var">?f</atom> <atom kind = "var">?a</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = foldl <atom kind = "var">?f</atom> (foldl <atom kind = "var">?f</atom> <atom kind = "var">?a</atom> <atom kind = "var">?xs</atom>) <atom kind = "var">?ys</atom>&quot;
  foldl_foldr: &quot;foldl <atom kind = "var">?f</atom> <atom kind = "var">?a</atom> <atom kind = "var">?xs</atom> = foldr (%<atom kind = "bound">x</atom> <atom kind = "bound">y</atom>. <atom kind = "var">?f</atom> <atom kind = "bound">y</atom> <atom kind = "bound">x</atom>) (rev <atom kind = "var">?xs</atom>) <atom kind = "var">?a</atom>&quot;
  foldl_list_def:
    &quot;foldl ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom> <atom kind = "bound">ub</atom>. list_rec (%<atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">a</atom>) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> (<atom kind = "bound">f</atom> <atom kind = "bound">a</atom> <atom kind = "bound">x</atom>)) <atom kind = "bound">ub</atom> <atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>&quot;
  foldr.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  foldr.simps:
    &quot;foldr <atom kind = "var">?f</atom> [] <atom kind = "var">?a</atom> = <atom kind = "var">?a</atom>&quot;
    &quot;foldr <atom kind = "var">?f</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) <atom kind = "var">?a</atom> = <atom kind = "var">?f</atom> <atom kind = "var">?x</atom> (foldr <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?a</atom>)&quot;
  foldr_append: &quot;foldr <atom kind = "var">?f</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) <atom kind = "var">?a</atom> = foldr <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> (foldr <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom> <atom kind = "var">?a</atom>)&quot;
  foldr_foldl: &quot;foldr <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?a</atom> = foldl (%<atom kind = "bound">x</atom> <atom kind = "bound">y</atom>. <atom kind = "var">?f</atom> <atom kind = "bound">y</atom> <atom kind = "bound">x</atom>) <atom kind = "var">?a</atom> (rev <atom kind = "var">?xs</atom>)&quot;
  foldr_list_def:
    &quot;foldr == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">a</atom>) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> <atom kind = "bound">a</atom>. <atom kind = "bound">f</atom> <atom kind = "bound">x</atom> (<atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom> <atom kind = "bound">a</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  hd.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  hd.simps: &quot;hd (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = <atom kind = "var">?x</atom>&quot;
  hd_Cons_tl: &quot;<atom kind = "var">?xs</atom> ~= [] ==&gt; hd <atom kind = "var">?xs</atom> # tl <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>&quot;
  hd_append: &quot;hd (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = (if <atom kind = "var">?xs</atom> = [] then hd <atom kind = "var">?ys</atom> else hd <atom kind = "var">?xs</atom>)&quot;
  hd_append2: &quot;<atom kind = "var">?xs</atom> ~= [] ==&gt; hd (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = hd <atom kind = "var">?xs</atom>&quot;
  hd_in_set: &quot;<atom kind = "var">?l</atom> = <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?x</atom> : set <atom kind = "var">?l</atom>&quot;
  hd_list_def: &quot;hd == list_rec arbitrary (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. <atom kind = "bound">x</atom>)&quot;
  hd_replicate: &quot;<atom kind = "var">?n</atom> ~= 0 ==&gt; hd (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = <atom kind = "var">?x</atom>&quot;
  impossible_Cons: &quot;length <atom kind = "var">?xs</atom> &lt;= length <atom kind = "var">?ys</atom> ==&gt; (<atom kind = "var">?xs</atom> = <atom kind = "var">?x</atom> # <atom kind = "var">?ys</atom>) = False&quot;
  in_listsD: &quot;<atom kind = "var">?xs</atom> : lists <atom kind = "var">?A</atom> ==&gt; ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "bound">x</atom> : <atom kind = "var">?A</atom>&quot;
  in_listsI: &quot;ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "bound">x</atom> : <atom kind = "var">?A</atom> ==&gt; <atom kind = "var">?xs</atom> : lists <atom kind = "var">?A</atom>&quot;
  in_lists_conv_set: &quot;(<atom kind = "var">?xs</atom> : lists <atom kind = "var">?A</atom>) = (ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "bound">x</atom> : <atom kind = "var">?A</atom>)&quot;
  in_set_butlastD: &quot;<atom kind = "var">?x</atom> : set (butlast <atom kind = "var">?xs</atom>) ==&gt; <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom>&quot;
  in_set_butlast_appendI:
    &quot;<atom kind = "var">?x</atom> : set (butlast <atom kind = "var">?xs</atom>) | <atom kind = "var">?x</atom> : set (butlast <atom kind = "var">?ys</atom>)
     ==&gt; <atom kind = "var">?x</atom> : set (butlast (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>))&quot;
  in_set_conv_decomp: &quot;(<atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom>) = (EX <atom kind = "bound">ys</atom> <atom kind = "bound">zs</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">ys</atom> @ <atom kind = "var">?x</atom> # <atom kind = "bound">zs</atom>)&quot;
  in_set_dropD: &quot;<atom kind = "var">?x</atom> : set (drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>) ==&gt; <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom>&quot;
  in_set_replicateD: &quot;<atom kind = "var">?x</atom> : set (replicate <atom kind = "var">?n</atom> <atom kind = "var">?y</atom>) ==&gt; <atom kind = "var">?x</atom> = <atom kind = "var">?y</atom>&quot;
  in_set_takeD: &quot;<atom kind = "var">?x</atom> : set (take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>) ==&gt; <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom>&quot;
  inj_map: &quot;inj (map <atom kind = "var">?f</atom>) = inj <atom kind = "var">?f</atom>&quot;
  inj_mapD: &quot;inj (map <atom kind = "var">?f</atom>) ==&gt; inj <atom kind = "var">?f</atom>&quot;
  inj_mapI: &quot;inj <atom kind = "var">?f</atom> ==&gt; inj (map <atom kind = "var">?f</atom>)&quot;
  inj_map_eq_map: &quot;inj <atom kind = "var">?f</atom> ==&gt; (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom>) = (<atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>)&quot;
  inj_on_map_eq_map:
    &quot;inj_on <atom kind = "var">?f</atom> (set <atom kind = "var">?xs</atom> Un set <atom kind = "var">?ys</atom>)
     ==&gt; (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom>) = (<atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>)&quot;
  inj_on_setI: &quot;distinct (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>) ==&gt; inj_on <atom kind = "var">?f</atom> (set <atom kind = "var">?xs</atom>)&quot;
  inj_on_set_conv:
    &quot;distinct <atom kind = "var">?xs</atom> ==&gt; inj_on <atom kind = "var">?f</atom> (set <atom kind = "var">?xs</atom>) = distinct (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>)&quot;
  last.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  last.simps: &quot;last (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (if <atom kind = "var">?xs</atom> = [] then <atom kind = "var">?x</atom> else last <atom kind = "var">?xs</atom>)&quot;
  last_ConsL: &quot;<atom kind = "var">?xs</atom> = [] ==&gt; last (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = <atom kind = "var">?x</atom>&quot;
  last_ConsR: &quot;<atom kind = "var">?xs</atom> ~= [] ==&gt; last (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = last <atom kind = "var">?xs</atom>&quot;
  last_append:
    &quot;last (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = (if <atom kind = "var">?ys</atom> = [] then last <atom kind = "var">?xs</atom> else last <atom kind = "var">?ys</atom>)&quot;
  last_appendL: &quot;<atom kind = "var">?ys</atom> = [] ==&gt; last (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = last <atom kind = "var">?xs</atom>&quot;
  last_appendR: &quot;<atom kind = "var">?ys</atom> ~= [] ==&gt; last (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = last <atom kind = "var">?ys</atom>&quot;
  last_list_def: &quot;last == list_rec arbitrary (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. If (<atom kind = "bound">xs</atom> = []) <atom kind = "bound">x</atom>)&quot;
  last_replicate: &quot;<atom kind = "var">?n</atom> ~= 0 ==&gt; last (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = <atom kind = "var">?x</atom>&quot;
  last_snoc: &quot;last (<atom kind = "var">?xs</atom> @ [<atom kind = "var">?x</atom>]) = <atom kind = "var">?x</atom>&quot;
  length_0_conv: &quot;(length <atom kind = "var">?xs</atom> = 0) = (<atom kind = "var">?xs</atom> = [])&quot;
  length_Suc_conv:
    &quot;(length <atom kind = "var">?xs</atom> = Suc <atom kind = "var">?n</atom>) = (EX <atom kind = "bound">y</atom> <atom kind = "bound">ys</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">y</atom> # <atom kind = "bound">ys</atom> &amp; length <atom kind = "bound">ys</atom> = <atom kind = "var">?n</atom>)&quot;
  length_append: &quot;length (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = length <atom kind = "var">?xs</atom> + length <atom kind = "var">?ys</atom>&quot;
  length_butlast: &quot;length (butlast <atom kind = "var">?xs</atom>) = length <atom kind = "var">?xs</atom> - 1&quot;
  length_drop: &quot;length (drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>) = length <atom kind = "var">?xs</atom> - <atom kind = "var">?n</atom>&quot;
  length_filter: &quot;length (filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>) &lt;= length <atom kind = "var">?xs</atom>&quot;
  length_greater_0_conv: &quot;(0 &lt; length <atom kind = "var">?xs</atom>) = (<atom kind = "var">?xs</atom> ~= [])&quot;
  length_induct:
    &quot;(!!<atom kind = "bound">xs</atom>. ALL <atom kind = "bound">ys</atom>. length <atom kind = "bound">ys</atom> &lt; length <atom kind = "bound">xs</atom> --&gt; <atom kind = "var">?P</atom> <atom kind = "bound">ys</atom> ==&gt; <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom>) ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>&quot;
  length_list_update: &quot;length (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>]) = length <atom kind = "var">?xs</atom>&quot;
  length_map: &quot;length (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>) = length <atom kind = "var">?xs</atom>&quot;
  length_replicate: &quot;length (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = <atom kind = "var">?n</atom>&quot;
  length_rev: &quot;length (rev <atom kind = "var">?xs</atom>) = length <atom kind = "var">?xs</atom>&quot;
  length_take: &quot;length (take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>) = min (length <atom kind = "var">?xs</atom>) <atom kind = "var">?n</atom>&quot;
  length_tl: &quot;length (tl <atom kind = "var">?xs</atom>) = length <atom kind = "var">?xs</atom> - 1&quot;
  length_upt: &quot;length [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] = <atom kind = "var">?j</atom> - <atom kind = "var">?i</atom>&quot;
  length_zip: &quot;length (zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>) = min (length <atom kind = "var">?xs</atom>) (length <atom kind = "var">?ys</atom>)&quot;
  lex_conv:
    &quot;lex <atom kind = "var">?r</atom> =
     {(<atom kind = "bound">xs</atom>, <atom kind = "bound">ys</atom>).
      length <atom kind = "bound">xs</atom> = length <atom kind = "bound">ys</atom> &amp;
      (EX <atom kind = "bound">xys</atom> <atom kind = "bound">x</atom> <atom kind = "bound">y</atom> <atom kind = "bound">xs&apos;</atom> <atom kind = "bound">ys&apos;</atom>.
          <atom kind = "bound">xs</atom> = <atom kind = "bound">xys</atom> @ <atom kind = "bound">x</atom> # <atom kind = "bound">xs&apos;</atom> &amp; <atom kind = "bound">ys</atom> = <atom kind = "bound">xys</atom> @ <atom kind = "bound">y</atom> # <atom kind = "bound">ys&apos;</atom> &amp; (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>) : <atom kind = "var">?r</atom>)}&quot;
  lex_def: &quot;lex <atom kind = "var">?r</atom> == UN <atom kind = "bound">n</atom>. lexn <atom kind = "var">?r</atom> <atom kind = "bound">n</atom>&quot;
  lexico_conv:
    &quot;lexico <atom kind = "var">?r</atom> =
     {(<atom kind = "bound">xs</atom>, <atom kind = "bound">ys</atom>).
      length <atom kind = "bound">xs</atom> &lt; length <atom kind = "bound">ys</atom> | length <atom kind = "bound">xs</atom> = length <atom kind = "bound">ys</atom> &amp; (<atom kind = "bound">xs</atom>, <atom kind = "bound">ys</atom>) : lex <atom kind = "var">?r</atom>}&quot;
  lexico_def:
    &quot;lexico <atom kind = "var">?r</atom> ==
     inv_image (less_than &lt;*lex*&gt; lex <atom kind = "var">?r</atom>) (%<atom kind = "bound">xs</atom>. (length <atom kind = "bound">xs</atom>, <atom kind = "bound">xs</atom>))&quot;
  lexn.induct: &quot;[| <atom kind = "var">?P</atom> 0; !!<atom kind = "bound">n</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">n</atom> ==&gt; <atom kind = "var">?P</atom> (Suc <atom kind = "bound">n</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?n</atom>&quot;
  lexn.simps:
    &quot;lexn <atom kind = "var">?r</atom> 0 = {}&quot;
    &quot;lexn <atom kind = "var">?r</atom> (Suc <atom kind = "var">?n</atom>) =
     prod_fun (%(<atom kind = "bound">x</atom>, <atom kind = "bound">xs</atom>). <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) (%(<atom kind = "bound">x</atom>, <atom kind = "bound">xs</atom>). <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) `
     (<atom kind = "var">?r</atom> &lt;*lex*&gt; lexn <atom kind = "var">?r</atom> <atom kind = "var">?n</atom>) Int
     {(<atom kind = "bound">xs</atom>, <atom kind = "bound">ys</atom>). length <atom kind = "bound">xs</atom> = Suc <atom kind = "var">?n</atom> &amp; length <atom kind = "bound">ys</atom> = Suc <atom kind = "var">?n</atom>}&quot;
  lexn_conv:
    &quot;lexn <atom kind = "var">?r</atom> <atom kind = "var">?n</atom> =
     {(<atom kind = "bound">xs</atom>, <atom kind = "bound">ys</atom>).
      length <atom kind = "bound">xs</atom> = <atom kind = "var">?n</atom> &amp;
      length <atom kind = "bound">ys</atom> = <atom kind = "var">?n</atom> &amp;
      (EX <atom kind = "bound">xys</atom> <atom kind = "bound">x</atom> <atom kind = "bound">y</atom> <atom kind = "bound">xs&apos;</atom> <atom kind = "bound">ys&apos;</atom>.
          <atom kind = "bound">xs</atom> = <atom kind = "bound">xys</atom> @ <atom kind = "bound">x</atom> # <atom kind = "bound">xs&apos;</atom> &amp; <atom kind = "bound">ys</atom> = <atom kind = "bound">xys</atom> @ <atom kind = "bound">y</atom> # <atom kind = "bound">ys&apos;</atom> &amp; (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>) : <atom kind = "var">?r</atom>)}&quot;
  lexn_length:
    &quot;(<atom kind = "var">?xs</atom>, <atom kind = "var">?ys</atom>) : lexn <atom kind = "var">?r</atom> <atom kind = "var">?n</atom> ==&gt; length <atom kind = "var">?xs</atom> = <atom kind = "var">?n</atom> &amp; length <atom kind = "var">?ys</atom> = <atom kind = "var">?n</atom>&quot;
  lexn_nat_def:
    &quot;lexn ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        nat_rec (%<atom kind = "bound">r</atom>. {})
         (%<atom kind = "bound">n</atom> <atom kind = "bound">na</atom> <atom kind = "bound">r</atom>.
             prod_fun (%(<atom kind = "bound">x</atom>, <atom kind = "bound">xs</atom>). <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) (%(<atom kind = "bound">x</atom>, <atom kind = "bound">xs</atom>). <atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) `
             (<atom kind = "bound">r</atom> &lt;*lex*&gt; <atom kind = "bound">na</atom> <atom kind = "bound">r</atom>) Int
             {(<atom kind = "bound">xs</atom>, <atom kind = "bound">ys</atom>). length <atom kind = "bound">xs</atom> = Suc <atom kind = "bound">n</atom> &amp; length <atom kind = "bound">ys</atom> = Suc <atom kind = "bound">n</atom>})
         <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  list.case_cong:
    &quot;[| <atom kind = "var">?M</atom> = <atom kind = "var">?M&apos;</atom>; <atom kind = "var">?M&apos;</atom> = [] ==&gt; <atom kind = "var">?f1.0</atom> = <atom kind = "var">?g1.0</atom>;
        !!<atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "var">?M&apos;</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">list</atom> ==&gt; <atom kind = "var">?f2.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">list</atom> = <atom kind = "var">?g2.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">list</atom> |]
     ==&gt; list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?M</atom> = list_case <atom kind = "var">?g1.0</atom> <atom kind = "var">?g2.0</atom> <atom kind = "var">?M&apos;</atom>&quot;
  list.cases:
    &quot;list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> [] = <atom kind = "var">?f1.0</atom>&quot;
    &quot;list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> (<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom>) = <atom kind = "var">?f2.0</atom> <atom kind = "var">?a</atom> <atom kind = "var">?list</atom>&quot;
  list.distinct:
    &quot;[] ~= <atom kind = "var">?a&apos;</atom> # <atom kind = "var">?list&apos;</atom>&quot;
    &quot;<atom kind = "var">?a&apos;</atom> # <atom kind = "var">?list&apos;</atom> ~= []&quot;
  list.exhaust:
    &quot;[| <atom kind = "var">?y</atom> = [] ==&gt; <atom kind = "var">?P</atom>; !!<atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "var">?y</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">list</atom> ==&gt; <atom kind = "var">?P</atom> |] ==&gt; <atom kind = "var">?P</atom>&quot;
  list.induct:
    &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">list</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">a</atom> # <atom kind = "bound">list</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  list.inject: &quot;(<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom> = <atom kind = "var">?a&apos;</atom> # <atom kind = "var">?list&apos;</atom>) = (<atom kind = "var">?a</atom> = <atom kind = "var">?a&apos;</atom> &amp; <atom kind = "var">?list</atom> = <atom kind = "var">?list&apos;</atom>)&quot;
  list.nchotomy: &quot;ALL <atom kind = "bound">v</atom>. <atom kind = "bound">v</atom> = [] | (EX <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "bound">v</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">list</atom>)&quot;
  list.recs:
    &quot;list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> [] = <atom kind = "var">?f1.0</atom>&quot;
    &quot;list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> (<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom>) =
     <atom kind = "var">?f2.0</atom> <atom kind = "var">?a</atom> <atom kind = "var">?list</atom> (list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?list</atom>)&quot;
  list.simps:
    &quot;[] ~= <atom kind = "var">?a&apos;</atom> # <atom kind = "var">?list&apos;</atom>&quot;
    &quot;<atom kind = "var">?a&apos;</atom> # <atom kind = "var">?list&apos;</atom> ~= []&quot;
    &quot;(<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom> = <atom kind = "var">?a&apos;</atom> # <atom kind = "var">?list&apos;</atom>) = (<atom kind = "var">?a</atom> = <atom kind = "var">?a&apos;</atom> &amp; <atom kind = "var">?list</atom> = <atom kind = "var">?list&apos;</atom>)&quot;
    &quot;list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> [] = <atom kind = "var">?f1.0</atom>&quot;
    &quot;list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> (<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom>) = <atom kind = "var">?f2.0</atom> <atom kind = "var">?a</atom> <atom kind = "var">?list</atom>&quot;
    &quot;length [] = 0&quot;
    &quot;length (<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom>) = length <atom kind = "var">?list</atom> + Suc 0&quot;
    &quot;list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> [] = <atom kind = "var">?f1.0</atom>&quot;
    &quot;list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> (<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom>) =
     <atom kind = "var">?f2.0</atom> <atom kind = "var">?a</atom> <atom kind = "var">?list</atom> (list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?list</atom>)&quot;
  list.size:
    &quot;length [] = 0&quot;
    &quot;length (<atom kind = "var">?a</atom> # <atom kind = "var">?list</atom>) = length <atom kind = "var">?list</atom> + Suc 0&quot;
  list.split:
    &quot;<atom kind = "var">?P</atom> (list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?x</atom>) =
     ((<atom kind = "var">?x</atom> = [] --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom>) &amp;
      (ALL <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "var">?x</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">list</atom> --&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?f2.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>)))&quot;
  list.split_asm:
    &quot;<atom kind = "var">?P</atom> (list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?x</atom>) =
     (~ (<atom kind = "var">?x</atom> = [] &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom> |
         (EX <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "var">?x</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">list</atom> &amp; ~ <atom kind = "var">?P</atom> (<atom kind = "var">?f2.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>))))&quot;
  list.splits:
    &quot;<atom kind = "var">?P</atom> (list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?x</atom>) =
     ((<atom kind = "var">?x</atom> = [] --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom>) &amp;
      (ALL <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "var">?x</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">list</atom> --&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?f2.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>)))&quot;
    &quot;<atom kind = "var">?P</atom> (list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?x</atom>) =
     (~ (<atom kind = "var">?x</atom> = [] &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom> |
         (EX <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>. <atom kind = "var">?x</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">list</atom> &amp; ~ <atom kind = "var">?P</atom> (<atom kind = "var">?f2.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">list</atom>))))&quot;
  list.weak_case_cong:
    &quot;<atom kind = "var">?M</atom> = <atom kind = "var">?M&apos;</atom> ==&gt; list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?M</atom> = list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?M&apos;</atom>&quot;
  list_all.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  list_all.simps:
    &quot;list_all <atom kind = "var">?P</atom> [] = True&quot;
    &quot;list_all <atom kind = "var">?P</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (<atom kind = "var">?P</atom> <atom kind = "var">?x</atom> &amp; list_all <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>)&quot;
  list_all2I:
    &quot;[| ALL <atom kind = "bound">x</atom>:set (zip <atom kind = "var">?a</atom> <atom kind = "var">?b</atom>). split <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>; length <atom kind = "var">?a</atom> = length <atom kind = "var">?b</atom> |]
     ==&gt; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?a</atom> <atom kind = "var">?b</atom>&quot;
  list_all2_Cons:
    &quot;list_all2 <atom kind = "var">?P</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) (<atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) = (<atom kind = "var">?P</atom> <atom kind = "var">?x</atom> <atom kind = "var">?y</atom> &amp; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>)&quot;
  list_all2_Cons1:
    &quot;list_all2 <atom kind = "var">?P</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) <atom kind = "var">?ys</atom> =
     (EX <atom kind = "bound">z</atom> <atom kind = "bound">zs</atom>. <atom kind = "var">?ys</atom> = <atom kind = "bound">z</atom> # <atom kind = "bound">zs</atom> &amp; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> <atom kind = "bound">z</atom> &amp; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "bound">zs</atom>)&quot;
  list_all2_Cons2:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> (<atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) =
     (EX <atom kind = "bound">z</atom> <atom kind = "bound">zs</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">z</atom> # <atom kind = "bound">zs</atom> &amp; <atom kind = "var">?P</atom> <atom kind = "bound">z</atom> <atom kind = "var">?y</atom> &amp; list_all2 <atom kind = "var">?P</atom> <atom kind = "bound">zs</atom> <atom kind = "var">?ys</atom>)&quot;
  list_all2_Nil: &quot;list_all2 <atom kind = "var">?P</atom> [] <atom kind = "var">?ys</atom> = (<atom kind = "var">?ys</atom> = [])&quot;
  list_all2_Nil2: &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> [] = (<atom kind = "var">?xs</atom> = [])&quot;
  list_all2_all_nthI:
    &quot;[| length <atom kind = "var">?a</atom> = length <atom kind = "var">?b</atom>;
        !!<atom kind = "bound">n</atom>. <atom kind = "bound">n</atom> &lt; length <atom kind = "var">?a</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?a</atom> ! <atom kind = "bound">n</atom>) (<atom kind = "var">?b</atom> ! <atom kind = "bound">n</atom>) |]
     ==&gt; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?a</atom> <atom kind = "var">?b</atom>&quot;
  list_all2_antisym:
    &quot;[| !!<atom kind = "bound">x</atom> <atom kind = "bound">y</atom>. [| <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> <atom kind = "bound">y</atom>; <atom kind = "var">?Q</atom> <atom kind = "bound">y</atom> <atom kind = "bound">x</atom> |] ==&gt; <atom kind = "bound">x</atom> = <atom kind = "bound">y</atom>; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>;
        list_all2 <atom kind = "var">?Q</atom> <atom kind = "var">?ys</atom> <atom kind = "var">?xs</atom> |]
     ==&gt; <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>&quot;
  list_all2_append:
    &quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>
     ==&gt; list_all2 <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?us</atom>) (<atom kind = "var">?ys</atom> @ <atom kind = "var">?vs</atom>) =
         (list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom> &amp; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?us</atom> <atom kind = "var">?vs</atom>)&quot;
  list_all2_append1:
    &quot;list_all2 <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) <atom kind = "var">?zs</atom> =
     (EX <atom kind = "bound">us</atom> <atom kind = "bound">vs</atom>.
         <atom kind = "var">?zs</atom> = <atom kind = "bound">us</atom> @ <atom kind = "bound">vs</atom> &amp;
         length <atom kind = "bound">us</atom> = length <atom kind = "var">?xs</atom> &amp;
         length <atom kind = "bound">vs</atom> = length <atom kind = "var">?ys</atom> &amp;
         list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "bound">us</atom> &amp; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?ys</atom> <atom kind = "bound">vs</atom>)&quot;
  list_all2_append2:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> (<atom kind = "var">?ys</atom> @ <atom kind = "var">?zs</atom>) =
     (EX <atom kind = "bound">us</atom> <atom kind = "bound">vs</atom>.
         <atom kind = "var">?xs</atom> = <atom kind = "bound">us</atom> @ <atom kind = "bound">vs</atom> &amp;
         length <atom kind = "bound">us</atom> = length <atom kind = "var">?ys</atom> &amp;
         length <atom kind = "bound">vs</atom> = length <atom kind = "var">?zs</atom> &amp;
         list_all2 <atom kind = "var">?P</atom> <atom kind = "bound">us</atom> <atom kind = "var">?ys</atom> &amp; list_all2 <atom kind = "var">?P</atom> <atom kind = "bound">vs</atom> <atom kind = "var">?zs</atom>)&quot;
  list_all2_appendI:
    &quot;[| list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?a</atom> <atom kind = "var">?b</atom>; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?c</atom> <atom kind = "var">?d</atom> |]
     ==&gt; list_all2 <atom kind = "var">?P</atom> (<atom kind = "var">?a</atom> @ <atom kind = "var">?c</atom>) (<atom kind = "var">?b</atom> @ <atom kind = "var">?d</atom>)&quot;
  list_all2_conv_all_nth:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom> =
     (length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom> &amp; (ALL <atom kind = "bound">i</atom>&lt;length <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom>) (<atom kind = "var">?ys</atom> ! <atom kind = "bound">i</atom>)))&quot;
  list_all2_def:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom> ==
     length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom> &amp; (ALL (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>):set (zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>). <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> <atom kind = "bound">y</atom>)&quot;
  list_all2_dropI:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?as</atom> <atom kind = "var">?bs</atom> ==&gt; list_all2 <atom kind = "var">?P</atom> (drop <atom kind = "var">?n</atom> <atom kind = "var">?as</atom>) (drop <atom kind = "var">?n</atom> <atom kind = "var">?bs</atom>)&quot;
  list_all2_lengthD: &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom> ==&gt; length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>&quot;
  list_all2_map1:
    &quot;list_all2 <atom kind = "var">?P</atom> (map <atom kind = "var">?f</atom> <atom kind = "var">?as</atom>) <atom kind = "var">?bs</atom> = list_all2 (%<atom kind = "bound">x</atom>. <atom kind = "var">?P</atom> (<atom kind = "var">?f</atom> <atom kind = "bound">x</atom>)) <atom kind = "var">?as</atom> <atom kind = "var">?bs</atom>&quot;
  list_all2_map2:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?as</atom> (map <atom kind = "var">?f</atom> <atom kind = "var">?bs</atom>) = list_all2 (%<atom kind = "bound">x</atom> <atom kind = "bound">y</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> (<atom kind = "var">?f</atom> <atom kind = "bound">y</atom>)) <atom kind = "var">?as</atom> <atom kind = "var">?bs</atom>&quot;
  list_all2_mono:
    &quot;[| list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> <atom kind = "var">?y</atom>; !!<atom kind = "bound">x</atom> <atom kind = "bound">y</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> <atom kind = "bound">y</atom> ==&gt; <atom kind = "var">?Q</atom> <atom kind = "bound">x</atom> <atom kind = "bound">y</atom> |]
     ==&gt; list_all2 <atom kind = "var">?Q</atom> <atom kind = "var">?x</atom> <atom kind = "var">?y</atom>&quot;
  list_all2_nthD:
    &quot;[| list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>; <atom kind = "var">?p</atom> &lt; length <atom kind = "var">?xs</atom> |]
     ==&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> ! <atom kind = "var">?p</atom>) (<atom kind = "var">?ys</atom> ! <atom kind = "var">?p</atom>)&quot;
  list_all2_nthD2:
    &quot;[| list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>; <atom kind = "var">?p</atom> &lt; length <atom kind = "var">?ys</atom> |]
     ==&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> ! <atom kind = "var">?p</atom>) (<atom kind = "var">?ys</atom> ! <atom kind = "var">?p</atom>)&quot;
  list_all2_refl: &quot;(!!<atom kind = "bound">x</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> <atom kind = "bound">x</atom>) ==&gt; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?xs</atom>&quot;
  list_all2_rev: &quot;list_all2 <atom kind = "var">?P</atom> (rev <atom kind = "var">?xs</atom>) (rev <atom kind = "var">?ys</atom>) = list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>&quot;
  list_all2_rev1: &quot;list_all2 <atom kind = "var">?P</atom> (rev <atom kind = "var">?xs</atom>) <atom kind = "var">?ys</atom> = list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> (rev <atom kind = "var">?ys</atom>)&quot;
  list_all2_takeI:
    &quot;list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom> ==&gt; list_all2 <atom kind = "var">?P</atom> (take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>) (take <atom kind = "var">?n</atom> <atom kind = "var">?ys</atom>)&quot;
  list_all2_trans:
    &quot;[| !!<atom kind = "bound">a</atom> <atom kind = "bound">b</atom> <atom kind = "bound">c</atom>. [| <atom kind = "var">?P1.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">b</atom>; <atom kind = "var">?P2.0</atom> <atom kind = "bound">b</atom> <atom kind = "bound">c</atom> |] ==&gt; <atom kind = "var">?P3.0</atom> <atom kind = "bound">a</atom> <atom kind = "bound">c</atom>;
        list_all2 <atom kind = "var">?P1.0</atom> <atom kind = "var">?as</atom> <atom kind = "var">?bs</atom>; list_all2 <atom kind = "var">?P2.0</atom> <atom kind = "var">?bs</atom> <atom kind = "var">?cs</atom> |]
     ==&gt; list_all2 <atom kind = "var">?P3.0</atom> <atom kind = "var">?as</atom> <atom kind = "var">?cs</atom>&quot;
  list_all2_update_cong:
    &quot;[| <atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom>; list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> <atom kind = "var">?y</atom> |]
     ==&gt; list_all2 <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>]) (<atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?y</atom>])&quot;
  list_all2_update_cong2:
    &quot;[| list_all2 <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> <atom kind = "var">?y</atom>; <atom kind = "var">?i</atom> &lt; length <atom kind = "var">?ys</atom> |]
     ==&gt; list_all2 <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>]) (<atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?y</atom>])&quot;
  list_all_Cons: &quot;list_all <atom kind = "var">?P</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (<atom kind = "var">?P</atom> <atom kind = "var">?x</atom> &amp; list_all <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>)&quot;
  list_all_Nil: &quot;list_all <atom kind = "var">?P</atom> [] = True&quot;
  list_all_append:
    &quot;list_all <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = (list_all <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> &amp; list_all <atom kind = "var">?P</atom> <atom kind = "var">?ys</atom>)&quot;
  list_all_conv: &quot;list_all <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> = (ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>)&quot;
  list_all_list_def:
    &quot;list_all == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">P</atom>. True) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> &amp; <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  list_ball_nth:
    &quot;[| <atom kind = "var">?n</atom> &lt; length <atom kind = "var">?xs</atom>; ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom> |] ==&gt; <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> ! <atom kind = "var">?n</atom>)&quot;
  list_case_def:
    &quot;list_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> == list_rec <atom kind = "var">?f1.0</atom> (%<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x3</atom>. <atom kind = "var">?f2.0</atom> <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>)&quot;
  list_induct2:
    &quot;[| length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>; <atom kind = "var">?P</atom> [] [];
        !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">y</atom> <atom kind = "bound">ys</atom>.
           [| length <atom kind = "bound">xs</atom> = length <atom kind = "bound">ys</atom>; <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">ys</atom> |] ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) (<atom kind = "bound">y</atom> # <atom kind = "bound">ys</atom>) |]
     ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>&quot;
  list_rec_def:
    &quot;list_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> == %<atom kind = "bound">x</atom>. THE <atom kind = "bound">y</atom>. (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>) : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom>&quot;
  list_rec_set.cases:
    &quot;[| <atom kind = "var">?a</atom> : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom>; <atom kind = "var">?a</atom> = ([], <atom kind = "var">?f1.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        !!<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">y1</atom>.
           [| <atom kind = "var">?a</atom> = (<atom kind = "bound">x2</atom> # <atom kind = "bound">x1</atom>, <atom kind = "var">?f2.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom> <atom kind = "bound">y1</atom>);
              (<atom kind = "bound">x1</atom>, <atom kind = "bound">y1</atom>) : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> |]
           ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  list_rec_set.defs:
    &quot;list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = ([], <atom kind = "var">?f1.0</atom>) |
                  (EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">y1</atom>.
                      <atom kind = "bound">x</atom> = (<atom kind = "bound">x2</atom> # <atom kind = "bound">x1</atom>, <atom kind = "var">?f2.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom> <atom kind = "bound">y1</atom>) &amp; (<atom kind = "bound">x1</atom>, <atom kind = "bound">y1</atom>) : <atom kind = "bound">S</atom>)})&quot;
  list_rec_set.elims:
    &quot;[| <atom kind = "var">?a</atom> : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom>; <atom kind = "var">?a</atom> = ([], <atom kind = "var">?f1.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        !!<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">y1</atom>.
           [| <atom kind = "var">?a</atom> = (<atom kind = "bound">x2</atom> # <atom kind = "bound">x1</atom>, <atom kind = "var">?f2.0</atom> <atom kind = "bound">x2</atom> <atom kind = "bound">x1</atom> <atom kind = "bound">y1</atom>);
              (<atom kind = "bound">x1</atom>, <atom kind = "bound">y1</atom>) : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> |]
           ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  list_rec_set.induct: &quot;PROP <atom kind = "var">?psi</atom> ==&gt; PROP <atom kind = "var">?psi</atom>&quot;
  list_rec_set.intros:
    &quot;([], <atom kind = "var">?f1.0</atom>) : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom>&quot;
    &quot;(<atom kind = "var">?x1.0</atom>, <atom kind = "var">?y1.0</atom>) : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom>
     ==&gt; (<atom kind = "var">?x2.0</atom> # <atom kind = "var">?x1.0</atom>, <atom kind = "var">?f2.0</atom> <atom kind = "var">?x2.0</atom> <atom kind = "var">?x1.0</atom> <atom kind = "var">?y1.0</atom>)
         : list_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom>&quot;
  list_rep_set.defs:
    &quot;list_rep_set ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = In0 arbitrary |
                  (EX <atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>.
                      <atom kind = "bound">x</atom> = In1 (Scons (??.Datatype_Universe.Leaf <atom kind = "bound">x2</atom>) <atom kind = "bound">x1</atom>) &amp;
                      <atom kind = "bound">x1</atom> : <atom kind = "bound">S</atom>)})&quot;
  list_rep_set.elims:
  list_rep_set.induct:
    &quot;[| <atom kind = "var">?xa</atom> : list_rep_set; <atom kind = "var">?P</atom> (In0 arbitrary);
        !!<atom kind = "bound">x1</atom> <atom kind = "bound">x2</atom>.
           [| <atom kind = "bound">x1</atom> : list_rep_set; <atom kind = "var">?P</atom> <atom kind = "bound">x1</atom> |]
           ==&gt; <atom kind = "var">?P</atom> (In1 (Scons (??.Datatype_Universe.Leaf <atom kind = "bound">x2</atom>) <atom kind = "bound">x1</atom>)) |]
     ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?xa</atom>&quot;
  list_rep_set.intros:
    &quot;In0 arbitrary : list_rep_set&quot;
    &quot;<atom kind = "var">?x1.0</atom> : list_rep_set
     ==&gt; In1 (Scons (??.Datatype_Universe.Leaf <atom kind = "var">?x2.0</atom>) <atom kind = "var">?x1.0</atom>) : list_rep_set&quot;
  list_size_def: &quot;size == list_rec 0 (%<atom kind = "bound">x</atom> <atom kind = "bound">xa</atom> <atom kind = "bound">xb</atom>. <atom kind = "bound">xb</atom> + Suc 0)&quot;
  list_update.induct:
    &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  list_update.simps:
    &quot;[][<atom kind = "var">?i</atom> := <atom kind = "var">?v</atom>] = []&quot;
    &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>)[<atom kind = "var">?i</atom> := <atom kind = "var">?v</atom>] =
     (case <atom kind = "var">?i</atom> of 0 =&gt; <atom kind = "var">?v</atom> # <atom kind = "var">?xs</atom> | Suc <atom kind = "bound">j</atom> =&gt; <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>[<atom kind = "bound">j</atom> := <atom kind = "var">?v</atom>])&quot;
  list_update_append1:
    &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>)[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>] = <atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>] @ <atom kind = "var">?ys</atom>&quot;
  list_update_id: &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom>] = <atom kind = "var">?xs</atom>&quot;
  list_update_length: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?x</atom> # <atom kind = "var">?ys</atom>)[length <atom kind = "var">?xs</atom> := <atom kind = "var">?y</atom>] = <atom kind = "var">?xs</atom> @ <atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>&quot;
  list_update_list_def:
    &quot;list_update ==
     list_rec (%<atom kind = "bound">i</atom> <atom kind = "bound">v</atom>. [])
      (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">i</atom> <atom kind = "bound">v</atom>. case <atom kind = "bound">i</atom> of 0 =&gt; <atom kind = "bound">v</atom> # <atom kind = "bound">xs</atom> | Suc <atom kind = "bound">j</atom> =&gt; <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">j</atom> <atom kind = "bound">v</atom>)&quot;
  list_update_overwrite:
    &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>, <atom kind = "var">?i</atom> := <atom kind = "var">?y</atom>] = <atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?y</atom>]&quot;
  list_update_same_conv:
    &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>] = <atom kind = "var">?xs</atom>) = (<atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom> = <atom kind = "var">?x</atom>)&quot;
  lists.cases:
    &quot;[| <atom kind = "var">?aa</atom> : lists <atom kind = "var">?A</atom>; <atom kind = "var">?aa</atom> = [] ==&gt; <atom kind = "var">?P</atom>;
        !!<atom kind = "bound">a</atom> <atom kind = "bound">l</atom>. [| <atom kind = "var">?aa</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">l</atom>; <atom kind = "bound">a</atom> : <atom kind = "var">?A</atom>; <atom kind = "bound">l</atom> : lists <atom kind = "var">?A</atom> |] ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  lists.defs:
    &quot;lists <atom kind = "var">?A</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = [] | (EX <atom kind = "bound">a</atom> <atom kind = "bound">l</atom>. <atom kind = "bound">x</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">l</atom> &amp; <atom kind = "bound">a</atom> : <atom kind = "var">?A</atom> &amp; <atom kind = "bound">l</atom> : <atom kind = "bound">S</atom>)})&quot;
  lists.elims:
    &quot;[| <atom kind = "var">?aa</atom> : lists <atom kind = "var">?A</atom>; <atom kind = "var">?aa</atom> = [] ==&gt; <atom kind = "var">?P</atom>;
        !!<atom kind = "bound">a</atom> <atom kind = "bound">l</atom>. [| <atom kind = "var">?aa</atom> = <atom kind = "bound">a</atom> # <atom kind = "bound">l</atom>; <atom kind = "bound">a</atom> : <atom kind = "var">?A</atom>; <atom kind = "bound">l</atom> : lists <atom kind = "var">?A</atom> |] ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  lists.induct:
    &quot;[| <atom kind = "var">?xa</atom> : lists <atom kind = "var">?A</atom>; <atom kind = "var">?P</atom> [];
        !!<atom kind = "bound">a</atom> <atom kind = "bound">l</atom>. [| <atom kind = "bound">a</atom> : <atom kind = "var">?A</atom>; <atom kind = "bound">l</atom> : lists <atom kind = "var">?A</atom>; <atom kind = "var">?P</atom> <atom kind = "bound">l</atom> |] ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">a</atom> # <atom kind = "bound">l</atom>) |]
     ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?xa</atom>&quot;
  lists.intros:
    &quot;[] : lists <atom kind = "var">?A</atom>&quot;
    &quot;[| <atom kind = "var">?a</atom> : <atom kind = "var">?A</atom>; <atom kind = "var">?l</atom> : lists <atom kind = "var">?A</atom> |] ==&gt; <atom kind = "var">?a</atom> # <atom kind = "var">?l</atom> : lists <atom kind = "var">?A</atom>&quot;
  listsE:
    &quot;[| <atom kind = "var">?x</atom> # <atom kind = "var">?l</atom> : lists <atom kind = "var">?A</atom>; [| <atom kind = "var">?x</atom> : <atom kind = "var">?A</atom>; <atom kind = "var">?l</atom> : lists <atom kind = "var">?A</atom> |] ==&gt; <atom kind = "var">?P</atom> |] ==&gt; <atom kind = "var">?P</atom>&quot;
  lists_IntI:
    &quot;[| <atom kind = "var">?l</atom> : lists <atom kind = "var">?A</atom>; <atom kind = "var">?l</atom> : lists <atom kind = "var">?B</atom> |] ==&gt; <atom kind = "var">?l</atom> : lists (<atom kind = "var">?A</atom> Int <atom kind = "var">?B</atom>)&quot;
  lists_Int_eq: &quot;lists (<atom kind = "var">?A</atom> Int <atom kind = "var">?B</atom>) = lists <atom kind = "var">?A</atom> Int lists <atom kind = "var">?B</atom>&quot;
  lists_mono: &quot;<atom kind = "var">?A</atom> &lt;= <atom kind = "var">?B</atom> ==&gt; lists <atom kind = "var">?A</atom> &lt;= lists <atom kind = "var">?B</atom>&quot;
  map.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  map.simps:
    &quot;map <atom kind = "var">?f</atom> [] = []&quot;
    &quot;map <atom kind = "var">?f</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = <atom kind = "var">?f</atom> <atom kind = "var">?x</atom> # map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>&quot;
  map_Suc_upt: &quot;map Suc [<atom kind = "var">?m</atom>..<atom kind = "var">?n</atom>(] = [Suc <atom kind = "var">?m</atom>..<atom kind = "var">?n</atom>]&quot;
  map_append: &quot;map <atom kind = "var">?f</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> @ map <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom>&quot;
  map_compose: &quot;map (<atom kind = "var">?f</atom> o <atom kind = "var">?g</atom>) <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> (map <atom kind = "var">?g</atom> <atom kind = "var">?xs</atom>)&quot;
  map_concat: &quot;map <atom kind = "var">?f</atom> (concat <atom kind = "var">?xs</atom>) = concat (map (map <atom kind = "var">?f</atom>) <atom kind = "var">?xs</atom>)&quot;
  map_cong:
    &quot;[| <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>; !!<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : set <atom kind = "var">?ys</atom> ==&gt; <atom kind = "var">?f</atom> <atom kind = "bound">x</atom> = <atom kind = "var">?g</atom> <atom kind = "bound">x</atom> |]
     ==&gt; map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?g</atom> <atom kind = "var">?ys</atom>&quot;
  map_eq_Cons_conv:
    &quot;(map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) =
     (EX <atom kind = "bound">z</atom> <atom kind = "bound">zs</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">z</atom> # <atom kind = "bound">zs</atom> &amp; <atom kind = "var">?f</atom> <atom kind = "bound">z</atom> = <atom kind = "var">?y</atom> &amp; map <atom kind = "var">?f</atom> <atom kind = "bound">zs</atom> = <atom kind = "var">?ys</atom>)&quot;
  map_eq_conv: &quot;(map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?g</atom> <atom kind = "var">?xs</atom>) = (ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "var">?f</atom> <atom kind = "bound">x</atom> = <atom kind = "var">?g</atom> <atom kind = "bound">x</atom>)&quot;
  map_eq_imp_length_eq:
    &quot;map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom> ==&gt; length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>&quot;
  map_ext: &quot;(!!<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : set <atom kind = "var">?xs</atom> --&gt; <atom kind = "var">?f</atom> <atom kind = "bound">x</atom> = <atom kind = "var">?g</atom> <atom kind = "bound">x</atom>) ==&gt; map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?g</atom> <atom kind = "var">?xs</atom>&quot;
  map_fst_zip: &quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom> ==&gt; map fst (zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>) = <atom kind = "var">?xs</atom>&quot;
  map_fun_upd: &quot;<atom kind = "var">?y</atom> ~: set <atom kind = "var">?xs</atom> ==&gt; map (<atom kind = "var">?f</atom>(<atom kind = "var">?y</atom> := <atom kind = "var">?v</atom>)) <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>&quot;
  map_idI: &quot;(!!<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : set <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?f</atom> <atom kind = "bound">x</atom> = <atom kind = "bound">x</atom>) ==&gt; map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>&quot;
  map_ident: &quot;map (%<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom>) = (%<atom kind = "bound">xs</atom>. <atom kind = "bound">xs</atom>)&quot;
  map_inj_on:
    &quot;[| map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom>; inj_on <atom kind = "var">?f</atom> (set <atom kind = "var">?xs</atom> Un set <atom kind = "var">?ys</atom>) |]
     ==&gt; <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>&quot;
  map_injective: &quot;[| map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = map <atom kind = "var">?f</atom> <atom kind = "var">?ys</atom>; inj <atom kind = "var">?f</atom> |] ==&gt; <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>&quot;
  map_is_Nil_conv: &quot;(map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> = []) = (<atom kind = "var">?xs</atom> = [])&quot;
  map_list_def:
    &quot;map == %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">f</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom>. <atom kind = "bound">f</atom> <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">f</atom>) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  map_replicate: &quot;map <atom kind = "var">?f</atom> (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = replicate <atom kind = "var">?n</atom> (<atom kind = "var">?f</atom> <atom kind = "var">?x</atom>)&quot;
  map_snd_zip: &quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom> ==&gt; map snd (zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>) = <atom kind = "var">?ys</atom>&quot;
  neq_Nil_conv: &quot;(<atom kind = "var">?xs</atom> ~= []) = (EX <atom kind = "bound">y</atom> <atom kind = "bound">ys</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">y</atom> # <atom kind = "bound">ys</atom>)&quot;
  nibble.case_cong:
    &quot;[| <atom kind = "var">?M</atom> = <atom kind = "var">?M&apos;</atom>; <atom kind = "var">?M&apos;</atom> = Nibble0 ==&gt; <atom kind = "var">?f1.0</atom> = <atom kind = "var">?g1.0</atom>;
        <atom kind = "var">?M&apos;</atom> = Nibble1 ==&gt; <atom kind = "var">?f2.0</atom> = <atom kind = "var">?g2.0</atom>; <atom kind = "var">?M&apos;</atom> = Nibble2 ==&gt; <atom kind = "var">?f3.0</atom> = <atom kind = "var">?g3.0</atom>;
        <atom kind = "var">?M&apos;</atom> = Nibble3 ==&gt; <atom kind = "var">?f4.0</atom> = <atom kind = "var">?g4.0</atom>; <atom kind = "var">?M&apos;</atom> = Nibble4 ==&gt; <atom kind = "var">?f5.0</atom> = <atom kind = "var">?g5.0</atom>;
        <atom kind = "var">?M&apos;</atom> = Nibble5 ==&gt; <atom kind = "var">?f6.0</atom> = <atom kind = "var">?g6.0</atom>; <atom kind = "var">?M&apos;</atom> = Nibble6 ==&gt; <atom kind = "var">?f7.0</atom> = <atom kind = "var">?g7.0</atom>;
        <atom kind = "var">?M&apos;</atom> = Nibble7 ==&gt; <atom kind = "var">?f8.0</atom> = <atom kind = "var">?g8.0</atom>; <atom kind = "var">?M&apos;</atom> = Nibble8 ==&gt; <atom kind = "var">?f9.0</atom> = <atom kind = "var">?g9.0</atom>;
        <atom kind = "var">?M&apos;</atom> = Nibble9 ==&gt; <atom kind = "var">?f10.0</atom> = <atom kind = "var">?g10.0</atom>;
        <atom kind = "var">?M&apos;</atom> = NibbleA ==&gt; <atom kind = "var">?f11.0</atom> = <atom kind = "var">?g11.0</atom>;
        <atom kind = "var">?M&apos;</atom> = NibbleB ==&gt; <atom kind = "var">?f12.0</atom> = <atom kind = "var">?g12.0</atom>;
        <atom kind = "var">?M&apos;</atom> = NibbleC ==&gt; <atom kind = "var">?f13.0</atom> = <atom kind = "var">?g13.0</atom>;
        <atom kind = "var">?M&apos;</atom> = NibbleD ==&gt; <atom kind = "var">?f14.0</atom> = <atom kind = "var">?g14.0</atom>;
        <atom kind = "var">?M&apos;</atom> = NibbleE ==&gt; <atom kind = "var">?f15.0</atom> = <atom kind = "var">?g15.0</atom>;
        <atom kind = "var">?M&apos;</atom> = NibbleF ==&gt; <atom kind = "var">?f16.0</atom> = <atom kind = "var">?g16.0</atom> |]
     ==&gt; (case <atom kind = "var">?M</atom> of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
          | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
          | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
          | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
          | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
          | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
         (case <atom kind = "var">?M&apos;</atom> of Nibble0 =&gt; <atom kind = "var">?g1.0</atom> | Nibble1 =&gt; <atom kind = "var">?g2.0</atom> | Nibble2 =&gt; <atom kind = "var">?g3.0</atom>
          | Nibble3 =&gt; <atom kind = "var">?g4.0</atom> | Nibble4 =&gt; <atom kind = "var">?g5.0</atom> | Nibble5 =&gt; <atom kind = "var">?g6.0</atom>
          | Nibble6 =&gt; <atom kind = "var">?g7.0</atom> | Nibble7 =&gt; <atom kind = "var">?g8.0</atom> | Nibble8 =&gt; <atom kind = "var">?g9.0</atom>
          | Nibble9 =&gt; <atom kind = "var">?g10.0</atom> | NibbleA =&gt; <atom kind = "var">?g11.0</atom> | NibbleB =&gt; <atom kind = "var">?g12.0</atom>
          | NibbleC =&gt; <atom kind = "var">?g13.0</atom> | NibbleD =&gt; <atom kind = "var">?g14.0</atom> | NibbleE =&gt; <atom kind = "var">?g15.0</atom>
          | NibbleF =&gt; <atom kind = "var">?g16.0</atom>)&quot;
  nibble.cases:
    &quot;(case Nibble0 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f1.0</atom>&quot;
    &quot;(case Nibble1 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f2.0</atom>&quot;
    &quot;(case Nibble2 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f3.0</atom>&quot;
    &quot;(case Nibble3 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f4.0</atom>&quot;
    &quot;(case Nibble4 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f5.0</atom>&quot;
    &quot;(case Nibble5 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f6.0</atom>&quot;
    &quot;(case Nibble6 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f7.0</atom>&quot;
    &quot;(case Nibble7 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f8.0</atom>&quot;
    &quot;(case Nibble8 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f9.0</atom>&quot;
    &quot;(case Nibble9 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f10.0</atom>&quot;
    &quot;(case NibbleA of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f11.0</atom>&quot;
    &quot;(case NibbleB of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f12.0</atom>&quot;
    &quot;(case NibbleC of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f13.0</atom>&quot;
    &quot;(case NibbleD of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f14.0</atom>&quot;
    &quot;(case NibbleE of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f15.0</atom>&quot;
    &quot;(case NibbleF of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f16.0</atom>&quot;
  nibble.distinct:
  nibble.exhaust:
    &quot;[| <atom kind = "var">?y</atom> = Nibble0 ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = Nibble1 ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = Nibble2 ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?y</atom> = Nibble3 ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = Nibble4 ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = Nibble5 ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?y</atom> = Nibble6 ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = Nibble7 ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = Nibble8 ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?y</atom> = Nibble9 ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = NibbleA ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = NibbleB ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?y</atom> = NibbleC ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = NibbleD ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?y</atom> = NibbleE ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?y</atom> = NibbleF ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  nibble.induct:
    &quot;[| <atom kind = "var">?P</atom> Nibble0; <atom kind = "var">?P</atom> Nibble1; <atom kind = "var">?P</atom> Nibble2; <atom kind = "var">?P</atom> Nibble3; <atom kind = "var">?P</atom> Nibble4;
        <atom kind = "var">?P</atom> Nibble5; <atom kind = "var">?P</atom> Nibble6; <atom kind = "var">?P</atom> Nibble7; <atom kind = "var">?P</atom> Nibble8; <atom kind = "var">?P</atom> Nibble9;
        <atom kind = "var">?P</atom> NibbleA; <atom kind = "var">?P</atom> NibbleB; <atom kind = "var">?P</atom> NibbleC; <atom kind = "var">?P</atom> NibbleD; <atom kind = "var">?P</atom> NibbleE;
        <atom kind = "var">?P</atom> NibbleF |]
     ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?nibble</atom>&quot;
  nibble.inject:
  nibble.nchotomy:
    &quot;ALL <atom kind = "bound">v</atom>.
        <atom kind = "bound">v</atom> = Nibble0 |
        <atom kind = "bound">v</atom> = Nibble1 |
        <atom kind = "bound">v</atom> = Nibble2 |
        <atom kind = "bound">v</atom> = Nibble3 |
        <atom kind = "bound">v</atom> = Nibble4 |
        <atom kind = "bound">v</atom> = Nibble5 |
        <atom kind = "bound">v</atom> = Nibble6 |
        <atom kind = "bound">v</atom> = Nibble7 |
        <atom kind = "bound">v</atom> = Nibble8 |
        <atom kind = "bound">v</atom> = Nibble9 |
        <atom kind = "bound">v</atom> = NibbleA |
        <atom kind = "bound">v</atom> = NibbleB | <atom kind = "bound">v</atom> = NibbleC | <atom kind = "bound">v</atom> = NibbleD | <atom kind = "bound">v</atom> = NibbleE | <atom kind = "bound">v</atom> = NibbleF&quot;
  nibble.recs:
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble0 =
     <atom kind = "var">?f1.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble1 =
     <atom kind = "var">?f2.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble2 =
     <atom kind = "var">?f3.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble3 =
     <atom kind = "var">?f4.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble4 =
     <atom kind = "var">?f5.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble5 =
     <atom kind = "var">?f6.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble6 =
     <atom kind = "var">?f7.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble7 =
     <atom kind = "var">?f8.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble8 =
     <atom kind = "var">?f9.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble9 =
     <atom kind = "var">?f10.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleA =
     <atom kind = "var">?f11.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleB =
     <atom kind = "var">?f12.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleC =
     <atom kind = "var">?f13.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleD =
     <atom kind = "var">?f14.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleE =
     <atom kind = "var">?f15.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleF =
     <atom kind = "var">?f16.0</atom>&quot;
  nibble.simps:
    &quot;(case Nibble0 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f1.0</atom>&quot;
    &quot;(case Nibble1 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f2.0</atom>&quot;
    &quot;(case Nibble2 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f3.0</atom>&quot;
    &quot;(case Nibble3 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f4.0</atom>&quot;
    &quot;(case Nibble4 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f5.0</atom>&quot;
    &quot;(case Nibble5 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f6.0</atom>&quot;
    &quot;(case Nibble6 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f7.0</atom>&quot;
    &quot;(case Nibble7 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f8.0</atom>&quot;
    &quot;(case Nibble8 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f9.0</atom>&quot;
    &quot;(case Nibble9 of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f10.0</atom>&quot;
    &quot;(case NibbleA of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f11.0</atom>&quot;
    &quot;(case NibbleB of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f12.0</atom>&quot;
    &quot;(case NibbleC of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f13.0</atom>&quot;
    &quot;(case NibbleD of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f14.0</atom>&quot;
    &quot;(case NibbleE of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f15.0</atom>&quot;
    &quot;(case NibbleF of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
      | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
      | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
      | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
      | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
      | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     <atom kind = "var">?f16.0</atom>&quot;
    &quot;size Nibble0 = 0&quot;
    &quot;size Nibble1 = 0&quot;
    &quot;size Nibble2 = 0&quot;
    &quot;size Nibble3 = 0&quot;
    &quot;size Nibble4 = 0&quot;
    &quot;size Nibble5 = 0&quot;
    &quot;size Nibble6 = 0&quot;
    &quot;size Nibble7 = 0&quot;
    &quot;size Nibble8 = 0&quot;
    &quot;size Nibble9 = 0&quot;
    &quot;size NibbleA = 0&quot;
    &quot;size NibbleB = 0&quot;
    &quot;size NibbleC = 0&quot;
    &quot;size NibbleD = 0&quot;
    &quot;size NibbleE = 0&quot;
    &quot;size NibbleF = 0&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble0 =
     <atom kind = "var">?f1.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble1 =
     <atom kind = "var">?f2.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble2 =
     <atom kind = "var">?f3.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble3 =
     <atom kind = "var">?f4.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble4 =
     <atom kind = "var">?f5.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble5 =
     <atom kind = "var">?f6.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble6 =
     <atom kind = "var">?f7.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble7 =
     <atom kind = "var">?f8.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble8 =
     <atom kind = "var">?f9.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> Nibble9 =
     <atom kind = "var">?f10.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleA =
     <atom kind = "var">?f11.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleB =
     <atom kind = "var">?f12.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleC =
     <atom kind = "var">?f13.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleD =
     <atom kind = "var">?f14.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleE =
     <atom kind = "var">?f15.0</atom>&quot;
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> NibbleF =
     <atom kind = "var">?f16.0</atom>&quot;
  nibble.size:
    &quot;size Nibble0 = 0&quot;
    &quot;size Nibble1 = 0&quot;
    &quot;size Nibble2 = 0&quot;
    &quot;size Nibble3 = 0&quot;
    &quot;size Nibble4 = 0&quot;
    &quot;size Nibble5 = 0&quot;
    &quot;size Nibble6 = 0&quot;
    &quot;size Nibble7 = 0&quot;
    &quot;size Nibble8 = 0&quot;
    &quot;size Nibble9 = 0&quot;
    &quot;size NibbleA = 0&quot;
    &quot;size NibbleB = 0&quot;
    &quot;size NibbleC = 0&quot;
    &quot;size NibbleD = 0&quot;
    &quot;size NibbleE = 0&quot;
    &quot;size NibbleF = 0&quot;
  nibble.split:
    &quot;<atom kind = "var">?P</atom> (case <atom kind = "var">?x</atom> of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
         | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
         | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
         | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
         | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
         | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     ((<atom kind = "var">?x</atom> = Nibble0 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble1 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f2.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble2 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f3.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble3 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f4.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble4 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f5.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble5 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f6.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble6 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f7.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble7 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f8.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble8 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f9.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble9 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f10.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleA --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f11.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleB --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f12.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleC --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f13.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleD --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f14.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleE --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f15.0</atom>) &amp; (<atom kind = "var">?x</atom> = NibbleF --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f16.0</atom>))&quot;
  nibble.split_asm:
    &quot;<atom kind = "var">?P</atom> (case <atom kind = "var">?x</atom> of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
         | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
         | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
         | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
         | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
         | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     (~ (<atom kind = "var">?x</atom> = Nibble0 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom> |
         <atom kind = "var">?x</atom> = Nibble1 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f2.0</atom> |
         <atom kind = "var">?x</atom> = Nibble2 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f3.0</atom> |
         <atom kind = "var">?x</atom> = Nibble3 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f4.0</atom> |
         <atom kind = "var">?x</atom> = Nibble4 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f5.0</atom> |
         <atom kind = "var">?x</atom> = Nibble5 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f6.0</atom> |
         <atom kind = "var">?x</atom> = Nibble6 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f7.0</atom> |
         <atom kind = "var">?x</atom> = Nibble7 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f8.0</atom> |
         <atom kind = "var">?x</atom> = Nibble8 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f9.0</atom> |
         <atom kind = "var">?x</atom> = Nibble9 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f10.0</atom> |
         <atom kind = "var">?x</atom> = NibbleA &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f11.0</atom> |
         <atom kind = "var">?x</atom> = NibbleB &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f12.0</atom> |
         <atom kind = "var">?x</atom> = NibbleC &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f13.0</atom> |
         <atom kind = "var">?x</atom> = NibbleD &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f14.0</atom> |
         <atom kind = "var">?x</atom> = NibbleE &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f15.0</atom> | <atom kind = "var">?x</atom> = NibbleF &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f16.0</atom>))&quot;
  nibble.splits:
    &quot;<atom kind = "var">?P</atom> (case <atom kind = "var">?x</atom> of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
         | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
         | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
         | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
         | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
         | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     ((<atom kind = "var">?x</atom> = Nibble0 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble1 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f2.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble2 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f3.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble3 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f4.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble4 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f5.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble5 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f6.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble6 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f7.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble7 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f8.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble8 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f9.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = Nibble9 --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f10.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleA --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f11.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleB --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f12.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleC --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f13.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleD --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f14.0</atom>) &amp;
      (<atom kind = "var">?x</atom> = NibbleE --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f15.0</atom>) &amp; (<atom kind = "var">?x</atom> = NibbleF --&gt; <atom kind = "var">?P</atom> <atom kind = "var">?f16.0</atom>))&quot;
    &quot;<atom kind = "var">?P</atom> (case <atom kind = "var">?x</atom> of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
         | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
         | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
         | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
         | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
         | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
     (~ (<atom kind = "var">?x</atom> = Nibble0 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f1.0</atom> |
         <atom kind = "var">?x</atom> = Nibble1 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f2.0</atom> |
         <atom kind = "var">?x</atom> = Nibble2 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f3.0</atom> |
         <atom kind = "var">?x</atom> = Nibble3 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f4.0</atom> |
         <atom kind = "var">?x</atom> = Nibble4 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f5.0</atom> |
         <atom kind = "var">?x</atom> = Nibble5 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f6.0</atom> |
         <atom kind = "var">?x</atom> = Nibble6 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f7.0</atom> |
         <atom kind = "var">?x</atom> = Nibble7 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f8.0</atom> |
         <atom kind = "var">?x</atom> = Nibble8 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f9.0</atom> |
         <atom kind = "var">?x</atom> = Nibble9 &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f10.0</atom> |
         <atom kind = "var">?x</atom> = NibbleA &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f11.0</atom> |
         <atom kind = "var">?x</atom> = NibbleB &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f12.0</atom> |
         <atom kind = "var">?x</atom> = NibbleC &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f13.0</atom> |
         <atom kind = "var">?x</atom> = NibbleD &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f14.0</atom> |
         <atom kind = "var">?x</atom> = NibbleE &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f15.0</atom> | <atom kind = "var">?x</atom> = NibbleF &amp; ~ <atom kind = "var">?P</atom> <atom kind = "var">?f16.0</atom>))&quot;
  nibble.weak_case_cong:
    &quot;<atom kind = "var">?M</atom> = <atom kind = "var">?M&apos;</atom>
     ==&gt; (case <atom kind = "var">?M</atom> of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
          | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
          | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
          | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
          | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
          | NibbleF =&gt; <atom kind = "var">?f16.0</atom>) =
         (case <atom kind = "var">?M&apos;</atom> of Nibble0 =&gt; <atom kind = "var">?f1.0</atom> | Nibble1 =&gt; <atom kind = "var">?f2.0</atom> | Nibble2 =&gt; <atom kind = "var">?f3.0</atom>
          | Nibble3 =&gt; <atom kind = "var">?f4.0</atom> | Nibble4 =&gt; <atom kind = "var">?f5.0</atom> | Nibble5 =&gt; <atom kind = "var">?f6.0</atom>
          | Nibble6 =&gt; <atom kind = "var">?f7.0</atom> | Nibble7 =&gt; <atom kind = "var">?f8.0</atom> | Nibble8 =&gt; <atom kind = "var">?f9.0</atom>
          | Nibble9 =&gt; <atom kind = "var">?f10.0</atom> | NibbleA =&gt; <atom kind = "var">?f11.0</atom> | NibbleB =&gt; <atom kind = "var">?f12.0</atom>
          | NibbleC =&gt; <atom kind = "var">?f13.0</atom> | NibbleD =&gt; <atom kind = "var">?f14.0</atom> | NibbleE =&gt; <atom kind = "var">?f15.0</atom>
          | NibbleF =&gt; <atom kind = "var">?f16.0</atom>)&quot;
  nibble_case_def:
    &quot;nibble_case <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
      <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> ==
     nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
  nibble_rec_def:
    &quot;nibble_rec <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom>
      <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> ==
     %<atom kind = "bound">x</atom>. THE <atom kind = "bound">y</atom>.
            (<atom kind = "bound">x</atom>, <atom kind = "bound">y</atom>)
            : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom>
               <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
  nibble_rec_set.cases:
    &quot;[| <atom kind = "var">?a</atom> : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom>
              <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>;
        <atom kind = "var">?a</atom> = (Nibble0, <atom kind = "var">?f1.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble1, <atom kind = "var">?f2.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble2, <atom kind = "var">?f3.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble3, <atom kind = "var">?f4.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble4, <atom kind = "var">?f5.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble5, <atom kind = "var">?f6.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble6, <atom kind = "var">?f7.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble7, <atom kind = "var">?f8.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble8, <atom kind = "var">?f9.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble9, <atom kind = "var">?f10.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (NibbleA, <atom kind = "var">?f11.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (NibbleB, <atom kind = "var">?f12.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (NibbleC, <atom kind = "var">?f13.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (NibbleD, <atom kind = "var">?f14.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (NibbleE, <atom kind = "var">?f15.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (NibbleF, <atom kind = "var">?f16.0</atom>) ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  nibble_rec_set.defs:
    &quot;nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
      <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom> ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = (Nibble0, <atom kind = "var">?f1.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble1, <atom kind = "var">?f2.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble2, <atom kind = "var">?f3.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble3, <atom kind = "var">?f4.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble4, <atom kind = "var">?f5.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble5, <atom kind = "var">?f6.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble6, <atom kind = "var">?f7.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble7, <atom kind = "var">?f8.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble8, <atom kind = "var">?f9.0</atom>) |
                  <atom kind = "bound">x</atom> = (Nibble9, <atom kind = "var">?f10.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleA, <atom kind = "var">?f11.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleB, <atom kind = "var">?f12.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleC, <atom kind = "var">?f13.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleD, <atom kind = "var">?f14.0</atom>) |
                  <atom kind = "bound">x</atom> = (NibbleE, <atom kind = "var">?f15.0</atom>) | <atom kind = "bound">x</atom> = (NibbleF, <atom kind = "var">?f16.0</atom>)})&quot;
  nibble_rec_set.elims:
    &quot;[| <atom kind = "var">?a</atom> : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom>
              <atom kind = "var">?f9.0</atom> <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>;
        <atom kind = "var">?a</atom> = (Nibble0, <atom kind = "var">?f1.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble1, <atom kind = "var">?f2.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble2, <atom kind = "var">?f3.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble3, <atom kind = "var">?f4.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble4, <atom kind = "var">?f5.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble5, <atom kind = "var">?f6.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble6, <atom kind = "var">?f7.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble7, <atom kind = "var">?f8.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (Nibble8, <atom kind = "var">?f9.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (Nibble9, <atom kind = "var">?f10.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (NibbleA, <atom kind = "var">?f11.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (NibbleB, <atom kind = "var">?f12.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (NibbleC, <atom kind = "var">?f13.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (NibbleD, <atom kind = "var">?f14.0</atom>) ==&gt; <atom kind = "var">?P</atom>;
        <atom kind = "var">?a</atom> = (NibbleE, <atom kind = "var">?f15.0</atom>) ==&gt; <atom kind = "var">?P</atom>; <atom kind = "var">?a</atom> = (NibbleF, <atom kind = "var">?f16.0</atom>) ==&gt; <atom kind = "var">?P</atom> |]
     ==&gt; <atom kind = "var">?P</atom>&quot;
  nibble_rec_set.induct: &quot;PROP <atom kind = "var">?psi</atom> ==&gt; PROP <atom kind = "var">?psi</atom>&quot;
  nibble_rec_set.intros:
    &quot;(Nibble0, <atom kind = "var">?f1.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble1, <atom kind = "var">?f2.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble2, <atom kind = "var">?f3.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble3, <atom kind = "var">?f4.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble4, <atom kind = "var">?f5.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble5, <atom kind = "var">?f6.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble6, <atom kind = "var">?f7.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble7, <atom kind = "var">?f8.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble8, <atom kind = "var">?f9.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(Nibble9, <atom kind = "var">?f10.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(NibbleA, <atom kind = "var">?f11.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(NibbleB, <atom kind = "var">?f12.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(NibbleC, <atom kind = "var">?f13.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(NibbleD, <atom kind = "var">?f14.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(NibbleE, <atom kind = "var">?f15.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
    &quot;(NibbleF, <atom kind = "var">?f16.0</atom>)
     : nibble_rec_set <atom kind = "var">?f1.0</atom> <atom kind = "var">?f2.0</atom> <atom kind = "var">?f3.0</atom> <atom kind = "var">?f4.0</atom> <atom kind = "var">?f5.0</atom> <atom kind = "var">?f6.0</atom> <atom kind = "var">?f7.0</atom> <atom kind = "var">?f8.0</atom> <atom kind = "var">?f9.0</atom>
        <atom kind = "var">?f10.0</atom> <atom kind = "var">?f11.0</atom> <atom kind = "var">?f12.0</atom> <atom kind = "var">?f13.0</atom> <atom kind = "var">?f14.0</atom> <atom kind = "var">?f15.0</atom> <atom kind = "var">?f16.0</atom>&quot;
  nibble_rep_set.defs:
    &quot;nibble_rep_set ==
     lfp (%<atom kind = "bound">S</atom>. {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> = In0 (In0 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In0 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In0 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In0 (In1 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In0 (In1 (In1 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In0 (In1 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In0 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In0 (In1 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In1 (In0 arbitrary))) |
                  <atom kind = "bound">x</atom> = In1 (In1 (In1 (In1 arbitrary)))})&quot;
  nibble_rep_set.elims:
  nibble_rep_set.induct:
    &quot;[| <atom kind = "var">?xa</atom> : nibble_rep_set; <atom kind = "var">?P</atom> (In0 (In0 (In0 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In0 (In0 (In0 (In1 arbitrary))));
        <atom kind = "var">?P</atom> (In0 (In0 (In1 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In0 (In0 (In1 (In1 arbitrary))));
        <atom kind = "var">?P</atom> (In0 (In1 (In0 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In0 (In1 (In0 (In1 arbitrary))));
        <atom kind = "var">?P</atom> (In0 (In1 (In1 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In0 (In1 (In1 (In1 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In0 (In0 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In0 (In0 (In1 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In0 (In1 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In0 (In1 (In1 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In1 (In0 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In1 (In0 (In1 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In1 (In1 (In0 arbitrary))));
        <atom kind = "var">?P</atom> (In1 (In1 (In1 (In1 arbitrary)))) |]
     ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?xa</atom>&quot;
  nibble_rep_set.intros:
    &quot;In0 (In0 (In0 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In0 (In0 (In0 (In1 arbitrary))) : nibble_rep_set&quot;
    &quot;In0 (In0 (In1 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In0 (In0 (In1 (In1 arbitrary))) : nibble_rep_set&quot;
    &quot;In0 (In1 (In0 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In0 (In1 (In0 (In1 arbitrary))) : nibble_rep_set&quot;
    &quot;In0 (In1 (In1 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In0 (In1 (In1 (In1 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In0 (In0 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In0 (In0 (In1 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In0 (In1 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In0 (In1 (In1 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In1 (In0 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In1 (In0 (In1 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In1 (In1 (In0 arbitrary))) : nibble_rep_set&quot;
    &quot;In1 (In1 (In1 (In1 arbitrary))) : nibble_rep_set&quot;
  nibble_size_def: &quot;size == nibble_rec 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&quot;
  not_Cons_self: &quot;<atom kind = "var">?xs</atom> ~= <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>&quot;
  not_Cons_self2: &quot;<atom kind = "var">?x1</atom> # <atom kind = "var">?t</atom> ~= <atom kind = "var">?t</atom>&quot;
  notin_set_remove1: &quot;<atom kind = "var">?x</atom> ~: set <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?x</atom> ~: set (remove1 <atom kind = "var">?y</atom> <atom kind = "var">?xs</atom>)&quot;
  nth.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  nth.simps: &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) ! <atom kind = "var">?n</atom> = (case <atom kind = "var">?n</atom> of 0 =&gt; <atom kind = "var">?x</atom> | Suc <atom kind = "bound">k</atom> =&gt; <atom kind = "var">?xs</atom> ! <atom kind = "bound">k</atom>)&quot;
  nth_Cons: &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) ! <atom kind = "var">?n</atom> = (case <atom kind = "var">?n</atom> of 0 =&gt; <atom kind = "var">?x</atom> | Suc <atom kind = "bound">k</atom> =&gt; <atom kind = "var">?xs</atom> ! <atom kind = "bound">k</atom>)&quot;
  nth_Cons&apos;: &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) ! <atom kind = "var">?n</atom> = (if <atom kind = "var">?n</atom> = 0 then <atom kind = "var">?x</atom> else <atom kind = "var">?xs</atom> ! (<atom kind = "var">?n</atom> - 1))&quot;
  nth_Cons_0: &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) ! 0 = <atom kind = "var">?x</atom>&quot;
  nth_Cons_Suc: &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) ! Suc <atom kind = "var">?n</atom> = <atom kind = "var">?xs</atom> ! <atom kind = "var">?n</atom>&quot;
  nth_append:
    &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) ! <atom kind = "var">?n</atom> =
     (if <atom kind = "var">?n</atom> &lt; length <atom kind = "var">?xs</atom> then <atom kind = "var">?xs</atom> ! <atom kind = "var">?n</atom> else <atom kind = "var">?ys</atom> ! (<atom kind = "var">?n</atom> - length <atom kind = "var">?xs</atom>))&quot;
  nth_append_length: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?x</atom> # <atom kind = "var">?ys</atom>) ! length <atom kind = "var">?xs</atom> = <atom kind = "var">?x</atom>&quot;
  nth_append_length_plus: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) ! (length <atom kind = "var">?xs</atom> + <atom kind = "var">?n</atom>) = <atom kind = "var">?ys</atom> ! <atom kind = "var">?n</atom>&quot;
  nth_drop: &quot;<atom kind = "var">?n</atom> + <atom kind = "var">?i</atom> &lt;= length <atom kind = "var">?xs</atom> ==&gt; drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom> = <atom kind = "var">?xs</atom> ! (<atom kind = "var">?n</atom> + <atom kind = "var">?i</atom>)&quot;
  nth_equalityI:
    &quot;[| length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>; ALL <atom kind = "bound">i</atom>&lt;length <atom kind = "var">?xs</atom>. <atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom> = <atom kind = "var">?ys</atom> ! <atom kind = "bound">i</atom> |]
     ==&gt; <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>&quot;
  nth_list_def: &quot;op ! == list_rec arbitrary (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. nat_case <atom kind = "bound">x</atom>)&quot;
  nth_list_update:
    &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom>
     ==&gt; <atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>] ! <atom kind = "var">?j</atom> = (if <atom kind = "var">?i</atom> = <atom kind = "var">?j</atom> then <atom kind = "var">?x</atom> else <atom kind = "var">?xs</atom> ! <atom kind = "var">?j</atom>)&quot;
  nth_list_update_eq: &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>] ! <atom kind = "var">?i</atom> = <atom kind = "var">?x</atom>&quot;
  nth_list_update_neq: &quot;<atom kind = "var">?i</atom> ~= <atom kind = "var">?j</atom> ==&gt; <atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>] ! <atom kind = "var">?j</atom> = <atom kind = "var">?xs</atom> ! <atom kind = "var">?j</atom>&quot;
  nth_map: &quot;<atom kind = "var">?n</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom> ! <atom kind = "var">?n</atom> = <atom kind = "var">?f</atom> (<atom kind = "var">?xs</atom> ! <atom kind = "var">?n</atom>)&quot;
  nth_map_upt: &quot;<atom kind = "var">?i</atom> &lt; <atom kind = "var">?n</atom> - <atom kind = "var">?m</atom> ==&gt; map <atom kind = "var">?f</atom> [<atom kind = "var">?m</atom>..<atom kind = "var">?n</atom>(] ! <atom kind = "var">?i</atom> = <atom kind = "var">?f</atom> (<atom kind = "var">?m</atom> + <atom kind = "var">?i</atom>)&quot;
  nth_mem: &quot;<atom kind = "var">?n</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?xs</atom> ! <atom kind = "var">?n</atom> : set <atom kind = "var">?xs</atom>&quot;
  nth_replicate: &quot;<atom kind = "var">?i</atom> &lt; <atom kind = "var">?n</atom> ==&gt; replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom> ! <atom kind = "var">?i</atom> = <atom kind = "var">?x</atom>&quot;
  nth_take: &quot;<atom kind = "var">?i</atom> &lt; <atom kind = "var">?n</atom> ==&gt; take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom> = <atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom>&quot;
  nth_take_lemma:
    &quot;[| <atom kind = "var">?k</atom> &lt;= length <atom kind = "var">?xs</atom>; <atom kind = "var">?k</atom> &lt;= length <atom kind = "var">?ys</atom>;
        !!<atom kind = "bound">i</atom>. <atom kind = "bound">i</atom> &lt; <atom kind = "var">?k</atom> --&gt; <atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom> = <atom kind = "var">?ys</atom> ! <atom kind = "bound">i</atom> |]
     ==&gt; take <atom kind = "var">?k</atom> <atom kind = "var">?xs</atom> = take <atom kind = "var">?k</atom> <atom kind = "var">?ys</atom>&quot;
  nth_upt: &quot;<atom kind = "var">?i</atom> + <atom kind = "var">?k</atom> &lt; <atom kind = "var">?j</atom> ==&gt; [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] ! <atom kind = "var">?k</atom> = <atom kind = "var">?i</atom> + <atom kind = "var">?k</atom>&quot;
  nth_via_drop: &quot;drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom> ==&gt; <atom kind = "var">?xs</atom> ! <atom kind = "var">?n</atom> = <atom kind = "var">?y</atom>&quot;
  nth_zip:
    &quot;[| <atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom>; <atom kind = "var">?i</atom> &lt; length <atom kind = "var">?ys</atom> |]
     ==&gt; zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom> ! <atom kind = "var">?i</atom> = (<atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom>, <atom kind = "var">?ys</atom> ! <atom kind = "var">?i</atom>)&quot;
  null.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  null.simps:
    &quot;null [] = True&quot;
    &quot;null (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = False&quot;
  null_list_def: &quot;null == list_rec True (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. False)&quot;
  op @.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  op @.simps:
    &quot;[] @ <atom kind = "var">?ys</atom> = <atom kind = "var">?ys</atom>&quot;
    &quot;(<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) @ <atom kind = "var">?ys</atom> = <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>&quot;
  op @_list_def: &quot;op @ == list_rec (%<atom kind = "bound">ys</atom>. <atom kind = "bound">ys</atom>) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">ys</atom>. <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">ys</atom>)&quot;
  op mem.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">y</atom> <atom kind = "bound">ys</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">ys</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">y</atom> # <atom kind = "bound">ys</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  op mem.simps:
    &quot;<atom kind = "var">?x</atom> mem [] = False&quot;
    &quot;<atom kind = "var">?x</atom> mem <atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom> = (if <atom kind = "var">?y</atom> = <atom kind = "var">?x</atom> then True else <atom kind = "var">?x</atom> mem <atom kind = "var">?ys</atom>)&quot;
  op mem_list_def:
    &quot;op mem ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">x</atom>. False) (%<atom kind = "bound">y</atom> <atom kind = "bound">ys</atom> <atom kind = "bound">ysa</atom> <atom kind = "bound">x</atom>. if <atom kind = "bound">y</atom> = <atom kind = "bound">x</atom> then True else <atom kind = "bound">ysa</atom> <atom kind = "bound">x</atom>) <atom kind = "bound">ua</atom>
         <atom kind = "bound">u</atom>&quot;
  remdups.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  remdups.simps:
    &quot;remdups [] = []&quot;
    &quot;remdups (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) =
     (if <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom> then remdups <atom kind = "var">?xs</atom> else <atom kind = "var">?x</atom> # remdups <atom kind = "var">?xs</atom>)&quot;
  remdups_eq_nil_iff: &quot;(remdups <atom kind = "var">?x</atom> = []) = (<atom kind = "var">?x</atom> = [])&quot;
  remdups_eq_nil_right_iff: &quot;([] = remdups <atom kind = "var">?x</atom>) = (<atom kind = "var">?x</atom> = [])&quot;
  remdups_list_def:
    &quot;remdups ==
     list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. if <atom kind = "bound">x</atom> : set <atom kind = "bound">xs</atom> then <atom kind = "bound">xsa</atom> else <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom>)&quot;
  remove1.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">y</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">y</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  remove1.simps:
    &quot;remove1 <atom kind = "var">?x</atom> [] = []&quot;
    &quot;remove1 <atom kind = "var">?x</atom> (<atom kind = "var">?y</atom> # <atom kind = "var">?xs</atom>) = (if <atom kind = "var">?x</atom> = <atom kind = "var">?y</atom> then <atom kind = "var">?xs</atom> else <atom kind = "var">?y</atom> # remove1 <atom kind = "var">?x</atom> <atom kind = "var">?xs</atom>)&quot;
  remove1_list_def:
    &quot;remove1 ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">x</atom>. []) (%<atom kind = "bound">y</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">x</atom>. if <atom kind = "bound">x</atom> = <atom kind = "bound">y</atom> then <atom kind = "bound">xs</atom> else <atom kind = "bound">y</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">x</atom>) <atom kind = "bound">ua</atom>
         <atom kind = "bound">u</atom>&quot;
  replicate.induct: &quot;[| <atom kind = "var">?P</atom> 0; !!<atom kind = "bound">n</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">n</atom> ==&gt; <atom kind = "var">?P</atom> (Suc <atom kind = "bound">n</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?n</atom>&quot;
  replicate.simps:
    &quot;replicate 0 <atom kind = "var">?x</atom> = []&quot;
    &quot;replicate (Suc <atom kind = "var">?n</atom>) <atom kind = "var">?x</atom> = <atom kind = "var">?x</atom> # replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>&quot;
  replicate_0: &quot;replicate 0 <atom kind = "var">?x</atom> = []&quot;
  replicate_Suc: &quot;replicate (Suc <atom kind = "var">?n</atom>) <atom kind = "var">?x</atom> = <atom kind = "var">?x</atom> # replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>&quot;
  replicate_add:
    &quot;replicate (<atom kind = "var">?n</atom> + <atom kind = "var">?m</atom>) <atom kind = "var">?x</atom> = replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom> @ replicate <atom kind = "var">?m</atom> <atom kind = "var">?x</atom>&quot;
  replicate_app_Cons_same:
    &quot;replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom> @ <atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom> = <atom kind = "var">?x</atom> # replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom> @ <atom kind = "var">?xs</atom>&quot;
  replicate_nat_def: &quot;replicate == nat_rec (%<atom kind = "bound">x</atom>. []) (%<atom kind = "bound">n</atom> <atom kind = "bound">na</atom> <atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> # <atom kind = "bound">na</atom> <atom kind = "bound">x</atom>)&quot;
  rev.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  rev.simps:
    &quot;rev [] = []&quot;
    &quot;rev (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = rev <atom kind = "var">?xs</atom> @ [<atom kind = "var">?x</atom>]&quot;
  rev_append: &quot;rev (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = rev <atom kind = "var">?ys</atom> @ rev <atom kind = "var">?xs</atom>&quot;
  rev_cases: &quot;[| <atom kind = "var">?xs</atom> = [] ==&gt; <atom kind = "var">?P</atom>; !!<atom kind = "bound">ys</atom> <atom kind = "bound">y</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">ys</atom> @ [<atom kind = "bound">y</atom>] ==&gt; <atom kind = "var">?P</atom> |] ==&gt; <atom kind = "var">?P</atom>&quot;
  rev_concat: &quot;rev (concat <atom kind = "var">?xs</atom>) = concat (map rev (rev <atom kind = "var">?xs</atom>))&quot;
  rev_drop: &quot;rev (drop <atom kind = "var">?i</atom> <atom kind = "var">?xs</atom>) = take (length <atom kind = "var">?xs</atom> - <atom kind = "var">?i</atom>) (rev <atom kind = "var">?xs</atom>)&quot;
  rev_exhaust: &quot;[| <atom kind = "var">?xs</atom> = [] ==&gt; <atom kind = "var">?P</atom>; !!<atom kind = "bound">ys</atom> <atom kind = "bound">y</atom>. <atom kind = "var">?xs</atom> = <atom kind = "bound">ys</atom> @ [<atom kind = "bound">y</atom>] ==&gt; <atom kind = "var">?P</atom> |] ==&gt; <atom kind = "var">?P</atom>&quot;
  rev_induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">xs</atom> @ [<atom kind = "bound">x</atom>]) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>&quot;
  rev_is_Nil_conv: &quot;(rev <atom kind = "var">?xs</atom> = []) = (<atom kind = "var">?xs</atom> = [])&quot;
  rev_is_rev_conv: &quot;(rev <atom kind = "var">?xs</atom> = rev <atom kind = "var">?ys</atom>) = (<atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>)&quot;
  rev_list_def: &quot;rev == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. <atom kind = "bound">xsa</atom> @ [<atom kind = "bound">x</atom>])&quot;
  rev_map: &quot;rev (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>) = map <atom kind = "var">?f</atom> (rev <atom kind = "var">?xs</atom>)&quot;
  rev_replicate: &quot;rev (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>&quot;
  rev_rev_ident: &quot;rev (rev <atom kind = "var">?xs</atom>) = <atom kind = "var">?xs</atom>&quot;
  rev_take: &quot;rev (take <atom kind = "var">?i</atom> <atom kind = "var">?xs</atom>) = drop (length <atom kind = "var">?xs</atom> - <atom kind = "var">?i</atom>) (rev <atom kind = "var">?xs</atom>)&quot;
  same_append_eq: &quot;(<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom> = <atom kind = "var">?xs</atom> @ <atom kind = "var">?zs</atom>) = (<atom kind = "var">?ys</atom> = <atom kind = "var">?zs</atom>)&quot;
  self_append_conv: &quot;(<atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = (<atom kind = "var">?ys</atom> = [])&quot;
  self_append_conv2: &quot;(<atom kind = "var">?ys</atom> = <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = (<atom kind = "var">?xs</atom> = [])&quot;
  set.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  set.simps:
    &quot;set [] = {}&quot;
    &quot;set (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = insert <atom kind = "var">?x</atom> (set <atom kind = "var">?xs</atom>)&quot;
  set_ConsD: &quot;<atom kind = "var">?y</atom> : set (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) ==&gt; <atom kind = "var">?y</atom> = <atom kind = "var">?x</atom> | <atom kind = "var">?y</atom> : set <atom kind = "var">?xs</atom>&quot;
  set_append: &quot;set (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = set <atom kind = "var">?xs</atom> Un set <atom kind = "var">?ys</atom>&quot;
  set_concat: &quot;set (concat <atom kind = "var">?xs</atom>) = Union (set ` set <atom kind = "var">?xs</atom>)&quot;
  set_conv_nth: &quot;set <atom kind = "var">?xs</atom> = {<atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom> |<atom kind = "bound">i</atom>. <atom kind = "bound">i</atom> &lt; length <atom kind = "var">?xs</atom>}&quot;
  set_drop_subset: &quot;set (drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>) &lt;= set <atom kind = "var">?xs</atom>&quot;
  set_empty: &quot;(set <atom kind = "var">?xs</atom> = {}) = (<atom kind = "var">?xs</atom> = [])&quot;
  set_filter: &quot;set (filter <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>) = {<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : set <atom kind = "var">?xs</atom> &amp; <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>}&quot;
  set_list_def: &quot;set == list_rec {} (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. insert <atom kind = "bound">x</atom>)&quot;
  set_map: &quot;set (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>) = <atom kind = "var">?f</atom> ` set <atom kind = "var">?xs</atom>&quot;
  set_mem_eq: &quot;<atom kind = "var">?x</atom> mem <atom kind = "var">?xs</atom> = (<atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom>)&quot;
  set_remdups: &quot;set (remdups <atom kind = "var">?xs</atom>) = set <atom kind = "var">?xs</atom>&quot;
  set_remove1_subset: &quot;set (remove1 <atom kind = "var">?x</atom> <atom kind = "var">?xs</atom>) &lt;= set <atom kind = "var">?xs</atom>&quot;
  set_replicate: &quot;<atom kind = "var">?n</atom> ~= 0 ==&gt; set (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = {<atom kind = "var">?x</atom>}&quot;
  set_replicate_Suc: &quot;set (replicate (Suc <atom kind = "var">?n</atom>) <atom kind = "var">?x</atom>) = {<atom kind = "var">?x</atom>}&quot;
  set_replicate_conv_if:
    &quot;set (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = (if <atom kind = "var">?n</atom> = 0 then {} else {<atom kind = "var">?x</atom>})&quot;
  set_rev: &quot;set (rev <atom kind = "var">?xs</atom>) = set <atom kind = "var">?xs</atom>&quot;
  set_subset_Cons: &quot;set <atom kind = "var">?xs</atom> &lt;= set (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>)&quot;
  set_take_subset: &quot;set (take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>) &lt;= set <atom kind = "var">?xs</atom>&quot;
  set_take_whileD: &quot;<atom kind = "var">?x</atom> : set (takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>) ==&gt; <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom> &amp; <atom kind = "var">?P</atom> <atom kind = "var">?x</atom>&quot;
  set_update_subsetI:
    &quot;[| set <atom kind = "var">?xs</atom> &lt;= <atom kind = "var">?A</atom>; <atom kind = "var">?x</atom> : <atom kind = "var">?A</atom> |] ==&gt; set (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>]) &lt;= <atom kind = "var">?A</atom>&quot;
  set_update_subset_insert: &quot;set (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>]) &lt;= insert <atom kind = "var">?x</atom> (set <atom kind = "var">?xs</atom>)&quot;
  set_upt: &quot;set [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] = {<atom kind = "bound">k</atom>. <atom kind = "var">?i</atom> &lt;= <atom kind = "bound">k</atom> &amp; <atom kind = "bound">k</atom> &lt; <atom kind = "var">?j</atom>}&quot;
  set_zip:
    &quot;set (zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>) =
     {(<atom kind = "var">?xs</atom> ! <atom kind = "bound">i</atom>, <atom kind = "var">?ys</atom> ! <atom kind = "bound">i</atom>) |<atom kind = "bound">i</atom>. <atom kind = "bound">i</atom> &lt; min (length <atom kind = "var">?xs</atom>) (length <atom kind = "var">?ys</atom>)}&quot;
  start_le_sum: &quot;<atom kind = "var">?m</atom> &lt;= <atom kind = "var">?n</atom> ==&gt; <atom kind = "var">?m</atom> &lt;= foldl op + <atom kind = "var">?n</atom> <atom kind = "var">?ns</atom>&quot;
  sublist_Cons:
    &quot;sublist (<atom kind = "var">?x</atom> # <atom kind = "var">?l</atom>) <atom kind = "var">?A</atom> =
     (if 0 : <atom kind = "var">?A</atom> then [<atom kind = "var">?x</atom>] else []) @ sublist <atom kind = "var">?l</atom> {<atom kind = "bound">j</atom>. Suc <atom kind = "bound">j</atom> : <atom kind = "var">?A</atom>}&quot;
  sublist_append:
    &quot;sublist (<atom kind = "var">?l</atom> @ <atom kind = "var">?l&apos;</atom>) <atom kind = "var">?A</atom> =
     sublist <atom kind = "var">?l</atom> <atom kind = "var">?A</atom> @ sublist <atom kind = "var">?l&apos;</atom> {<atom kind = "bound">j</atom>. <atom kind = "bound">j</atom> + length <atom kind = "var">?l</atom> : <atom kind = "var">?A</atom>}&quot;
  sublist_def:
    &quot;sublist <atom kind = "var">?xs</atom> <atom kind = "var">?A</atom> == map fst [<atom kind = "bound">p</atom>:zip <atom kind = "var">?xs</atom> [0..length <atom kind = "var">?xs</atom>(]. snd <atom kind = "bound">p</atom> : <atom kind = "var">?A</atom>]&quot;
  sublist_empty: &quot;sublist <atom kind = "var">?xs</atom> {} = []&quot;
  sublist_nil: &quot;sublist [] <atom kind = "var">?A</atom> = []&quot;
  sublist_shift_lemma:
    &quot;map fst [<atom kind = "bound">p</atom>:zip <atom kind = "var">?xs</atom> [<atom kind = "var">?i</atom>..<atom kind = "var">?i</atom> + length <atom kind = "var">?xs</atom>(]. snd <atom kind = "bound">p</atom> : <atom kind = "var">?A</atom>] =
     map fst [<atom kind = "bound">p</atom>:zip <atom kind = "var">?xs</atom> [0..length <atom kind = "var">?xs</atom>(]. snd <atom kind = "bound">p</atom> + <atom kind = "var">?i</atom> : <atom kind = "var">?A</atom>]&quot;
  sublist_singleton: &quot;sublist [<atom kind = "var">?x</atom>] <atom kind = "var">?A</atom> = (if 0 : <atom kind = "var">?A</atom> then [<atom kind = "var">?x</atom>] else [])&quot;
  sublist_upt_eq_take: &quot;sublist <atom kind = "var">?l</atom> {..&lt;<atom kind = "var">?n</atom>} = take <atom kind = "var">?n</atom> <atom kind = "var">?l</atom>&quot;
  sum_eq_0_conv:
    &quot;(foldl op + <atom kind = "var">?m</atom> <atom kind = "var">?ns</atom> = 0) = (<atom kind = "var">?m</atom> = 0 &amp; (ALL <atom kind = "bound">n</atom>:set <atom kind = "var">?ns</atom>. <atom kind = "bound">n</atom> = 0))&quot;
  take.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  take.simps:
    &quot;take <atom kind = "var">?n</atom> [] = []&quot;
    &quot;take <atom kind = "var">?n</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (case <atom kind = "var">?n</atom> of 0 =&gt; [] | Suc <atom kind = "bound">m</atom> =&gt; <atom kind = "var">?x</atom> # take <atom kind = "bound">m</atom> <atom kind = "var">?xs</atom>)&quot;
  takeWhile.induct:
    &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  takeWhile.simps:
    &quot;takeWhile <atom kind = "var">?P</atom> [] = []&quot;
    &quot;takeWhile <atom kind = "var">?P</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) =
     (if <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> then <atom kind = "var">?x</atom> # takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> else [])&quot;
  takeWhile_append1:
    &quot;[| <atom kind = "var">?x</atom> : set <atom kind = "var">?xs</atom>; ~ <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> |]
     ==&gt; takeWhile <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>&quot;
  takeWhile_append2:
    &quot;(!!<atom kind = "bound">x</atom>. <atom kind = "bound">x</atom> : set <atom kind = "var">?xs</atom> ==&gt; <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>)
     ==&gt; takeWhile <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = <atom kind = "var">?xs</atom> @ takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?ys</atom>&quot;
  takeWhile_dropWhile_id: &quot;takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> @ dropWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>&quot;
  takeWhile_eq_all_conv: &quot;(takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>) = (ALL <atom kind = "bound">x</atom>:set <atom kind = "var">?xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">x</atom>)&quot;
  takeWhile_list_def:
    &quot;takeWhile ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">P</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom>. if <atom kind = "bound">P</atom> <atom kind = "bound">x</atom> then <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">P</atom> else []) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  takeWhile_tail:
    &quot;~ <atom kind = "var">?P</atom> <atom kind = "var">?x</atom> ==&gt; takeWhile <atom kind = "var">?P</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?x</atom> # <atom kind = "var">?l</atom>) = takeWhile <atom kind = "var">?P</atom> <atom kind = "var">?xs</atom>&quot;
  take_0: &quot;take 0 <atom kind = "var">?xs</atom> = []&quot;
  take_Cons:
    &quot;take <atom kind = "var">?n</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (case <atom kind = "var">?n</atom> of 0 =&gt; [] | Suc <atom kind = "bound">m</atom> =&gt; <atom kind = "var">?x</atom> # take <atom kind = "bound">m</atom> <atom kind = "var">?xs</atom>)&quot;
  take_Cons&apos;:
    &quot;take <atom kind = "var">?n</atom> (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = (if <atom kind = "var">?n</atom> = 0 then [] else <atom kind = "var">?x</atom> # take (<atom kind = "var">?n</atom> - 1) <atom kind = "var">?xs</atom>)&quot;
  take_Nil: &quot;take <atom kind = "var">?n</atom> [] = []&quot;
  take_Suc: &quot;<atom kind = "var">?xs</atom> ~= [] ==&gt; take (Suc <atom kind = "var">?n</atom>) <atom kind = "var">?xs</atom> = hd <atom kind = "var">?xs</atom> # take <atom kind = "var">?n</atom> (tl <atom kind = "var">?xs</atom>)&quot;
  take_Suc_Cons: &quot;take (Suc <atom kind = "var">?n</atom>) (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = <atom kind = "var">?x</atom> # take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>&quot;
  take_Suc_conv_app_nth:
    &quot;<atom kind = "var">?i</atom> &lt; length <atom kind = "var">?xs</atom> ==&gt; take (Suc <atom kind = "var">?i</atom>) <atom kind = "var">?xs</atom> = take <atom kind = "var">?i</atom> <atom kind = "var">?xs</atom> @ [<atom kind = "var">?xs</atom> ! <atom kind = "var">?i</atom>]&quot;
  take_add:
    &quot;<atom kind = "var">?i</atom> + <atom kind = "var">?j</atom> &lt;= length <atom kind = "var">?xs</atom>
     ==&gt; take (<atom kind = "var">?i</atom> + <atom kind = "var">?j</atom>) <atom kind = "var">?xs</atom> = take <atom kind = "var">?i</atom> <atom kind = "var">?xs</atom> @ take <atom kind = "var">?j</atom> (drop <atom kind = "var">?i</atom> <atom kind = "var">?xs</atom>)&quot;
  take_all: &quot;length <atom kind = "var">?xs</atom> &lt;= <atom kind = "var">?n</atom> ==&gt; take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> = <atom kind = "var">?xs</atom>&quot;
  take_append:
    &quot;take <atom kind = "var">?n</atom> (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> @ take (<atom kind = "var">?n</atom> - length <atom kind = "var">?xs</atom>) <atom kind = "var">?ys</atom>&quot;
  take_drop: &quot;take <atom kind = "var">?n</atom> (drop <atom kind = "var">?m</atom> <atom kind = "var">?xs</atom>) = drop <atom kind = "var">?m</atom> (take (<atom kind = "var">?n</atom> + <atom kind = "var">?m</atom>) <atom kind = "var">?xs</atom>)&quot;
  take_eq_Nil: &quot;(take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> = []) = (<atom kind = "var">?n</atom> = 0 | <atom kind = "var">?xs</atom> = [])&quot;
  take_equalityI: &quot;ALL <atom kind = "bound">i</atom>. take <atom kind = "bound">i</atom> <atom kind = "var">?xs</atom> = take <atom kind = "bound">i</atom> <atom kind = "var">?ys</atom> ==&gt; <atom kind = "var">?xs</atom> = <atom kind = "var">?ys</atom>&quot;
  take_hd_drop:
    &quot;<atom kind = "var">?n</atom> &lt; length <atom kind = "var">?xs</atom>
     ==&gt; take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom> @ [hd (drop <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>)] = take (<atom kind = "var">?n</atom> + 1) <atom kind = "var">?xs</atom>&quot;
  take_list_def:
    &quot;take ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>. list_rec (%<atom kind = "bound">n</atom>. []) (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. nat_case [] (%<atom kind = "bound">m</atom>. <atom kind = "bound">x</atom> # <atom kind = "bound">xsa</atom> <atom kind = "bound">m</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  take_map: &quot;take <atom kind = "var">?n</atom> (map <atom kind = "var">?f</atom> <atom kind = "var">?xs</atom>) = map <atom kind = "var">?f</atom> (take <atom kind = "var">?n</atom> <atom kind = "var">?xs</atom>)&quot;
  take_take: &quot;take <atom kind = "var">?n</atom> (take <atom kind = "var">?m</atom> <atom kind = "var">?xs</atom>) = take (min <atom kind = "var">?n</atom> <atom kind = "var">?m</atom>) <atom kind = "var">?xs</atom>&quot;
  take_upt: &quot;<atom kind = "var">?i</atom> + <atom kind = "var">?m</atom> &lt;= <atom kind = "var">?n</atom> ==&gt; take <atom kind = "var">?m</atom> [<atom kind = "var">?i</atom>..<atom kind = "var">?n</atom>(] = [<atom kind = "var">?i</atom>..<atom kind = "var">?i</atom> + <atom kind = "var">?m</atom>(]&quot;
  tl.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">xs</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">x</atom> # <atom kind = "bound">xs</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  tl.simps:
    &quot;tl [] = []&quot;
    &quot;tl (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) = <atom kind = "var">?xs</atom>&quot;
  tl_append:
    &quot;tl (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = (case <atom kind = "var">?xs</atom> of [] =&gt; tl <atom kind = "var">?ys</atom> | <atom kind = "bound">z</atom> # <atom kind = "bound">zs</atom> =&gt; <atom kind = "bound">zs</atom> @ <atom kind = "var">?ys</atom>)&quot;
  tl_append2: &quot;<atom kind = "var">?xs</atom> ~= [] ==&gt; tl (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) = tl <atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>&quot;
  tl_list_def: &quot;tl == list_rec [] (%<atom kind = "bound">x</atom> <atom kind = "bound">xs</atom> <atom kind = "bound">xsa</atom>. <atom kind = "bound">xs</atom>)&quot;
  tl_replicate: &quot;<atom kind = "var">?n</atom> ~= 0 ==&gt; tl (replicate <atom kind = "var">?n</atom> <atom kind = "var">?x</atom>) = replicate (<atom kind = "var">?n</atom> - 1) <atom kind = "var">?x</atom>&quot;
  type_definition_char: &quot;type_definition Rep_char Abs_char char_rep_set&quot;
  type_definition_list: &quot;type_definition Rep_list Abs_list list_rep_set&quot;
  type_definition_nibble:
    &quot;type_definition Rep_nibble Abs_nibble nibble_rep_set&quot;
  update_zip:
    &quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>
     ==&gt; zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?xy</atom>] =
         zip (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := fst <atom kind = "var">?xy</atom>]) (<atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := snd <atom kind = "var">?xy</atom>])&quot;
  upt.induct: &quot;[| <atom kind = "var">?P</atom> 0; !!<atom kind = "bound">j</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">j</atom> ==&gt; <atom kind = "var">?P</atom> (Suc <atom kind = "bound">j</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?n</atom>&quot;
  upt.simps:
    &quot;[<atom kind = "var">?i</atom>..0(] = []&quot;
    &quot;[<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>] = (if <atom kind = "var">?i</atom> &lt;= <atom kind = "var">?j</atom> then [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] @ [<atom kind = "var">?j</atom>] else [])&quot;
  upt_0: &quot;[<atom kind = "var">?i</atom>..0(] = []&quot;
  upt_Suc: &quot;[<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>] = (if <atom kind = "var">?i</atom> &lt;= <atom kind = "var">?j</atom> then [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] @ [<atom kind = "var">?j</atom>] else [])&quot;
  upt_Suc_append: &quot;<atom kind = "var">?i</atom> &lt;= <atom kind = "var">?j</atom> ==&gt; [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>] = [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] @ [<atom kind = "var">?j</atom>]&quot;
  upt_add_eq_append:
    &quot;<atom kind = "var">?i</atom> &lt;= <atom kind = "var">?j</atom> ==&gt; [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom> + <atom kind = "var">?k</atom>(] = [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] @ [<atom kind = "var">?j</atom>..<atom kind = "var">?j</atom> + <atom kind = "var">?k</atom>(]&quot;
  upt_conv_Cons: &quot;<atom kind = "var">?i</atom> &lt; <atom kind = "var">?j</atom> ==&gt; [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] = <atom kind = "var">?i</atom> # [Suc <atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(]&quot;
  upt_conv_Nil: &quot;<atom kind = "var">?j</atom> &lt;= <atom kind = "var">?i</atom> ==&gt; [<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] = []&quot;
  upt_nat_def:
    &quot;upt ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        nat_rec (%<atom kind = "bound">i</atom>. []) (%<atom kind = "bound">j</atom> <atom kind = "bound">ja</atom> <atom kind = "bound">i</atom>. if <atom kind = "bound">i</atom> &lt;= <atom kind = "bound">j</atom> then <atom kind = "bound">ja</atom> <atom kind = "bound">i</atom> @ [<atom kind = "bound">j</atom>] else []) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  upt_rec: &quot;[<atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] = (if <atom kind = "var">?i</atom> &lt; <atom kind = "var">?j</atom> then <atom kind = "var">?i</atom> # [Suc <atom kind = "var">?i</atom>..<atom kind = "var">?j</atom>(] else [])&quot;
  wf_lex: &quot;wf <atom kind = "var">?r</atom> ==&gt; wf (lex <atom kind = "var">?r</atom>)&quot;
  wf_lexico: &quot;wf <atom kind = "var">?r</atom> ==&gt; wf (lexico <atom kind = "var">?r</atom>)&quot;
  wf_lexn: &quot;wf <atom kind = "var">?r</atom> ==&gt; wf (lexn <atom kind = "var">?r</atom> <atom kind = "var">?n</atom>)&quot;
  zip.induct: &quot;[| <atom kind = "var">?P</atom> []; !!<atom kind = "bound">y</atom> <atom kind = "bound">ys</atom>. <atom kind = "var">?P</atom> <atom kind = "bound">ys</atom> ==&gt; <atom kind = "var">?P</atom> (<atom kind = "bound">y</atom> # <atom kind = "bound">ys</atom>) |] ==&gt; <atom kind = "var">?P</atom> <atom kind = "var">?list</atom>&quot;
  zip.simps:
    &quot;zip <atom kind = "var">?xs</atom> [] = []&quot;
    &quot;zip <atom kind = "var">?xs</atom> (<atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) =
     (case <atom kind = "var">?xs</atom> of [] =&gt; [] | <atom kind = "bound">z</atom> # <atom kind = "bound">zs</atom> =&gt; (<atom kind = "bound">z</atom>, <atom kind = "var">?y</atom>) # zip <atom kind = "bound">zs</atom> <atom kind = "var">?ys</atom>)&quot;
  zip_Cons:
    &quot;zip <atom kind = "var">?xs</atom> (<atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) =
     (case <atom kind = "var">?xs</atom> of [] =&gt; [] | <atom kind = "bound">z</atom> # <atom kind = "bound">zs</atom> =&gt; (<atom kind = "bound">z</atom>, <atom kind = "var">?y</atom>) # zip <atom kind = "bound">zs</atom> <atom kind = "var">?ys</atom>)&quot;
  zip_Cons_Cons: &quot;zip (<atom kind = "var">?x</atom> # <atom kind = "var">?xs</atom>) (<atom kind = "var">?y</atom> # <atom kind = "var">?ys</atom>) = (<atom kind = "var">?x</atom>, <atom kind = "var">?y</atom>) # zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>&quot;
  zip_Nil: &quot;zip [] <atom kind = "var">?ys</atom> = []&quot;
  zip_append:
    &quot;[| length <atom kind = "var">?xs</atom> = length <atom kind = "var">?us</atom>; length <atom kind = "var">?ys</atom> = length <atom kind = "var">?vs</atom> |]
     ==&gt; zip (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) (<atom kind = "var">?us</atom> @ <atom kind = "var">?vs</atom>) = zip <atom kind = "var">?xs</atom> <atom kind = "var">?us</atom> @ zip <atom kind = "var">?ys</atom> <atom kind = "var">?vs</atom>&quot;
  zip_append1:
    &quot;zip (<atom kind = "var">?xs</atom> @ <atom kind = "var">?ys</atom>) <atom kind = "var">?zs</atom> =
     zip <atom kind = "var">?xs</atom> (take (length <atom kind = "var">?xs</atom>) <atom kind = "var">?zs</atom>) @ zip <atom kind = "var">?ys</atom> (drop (length <atom kind = "var">?xs</atom>) <atom kind = "var">?zs</atom>)&quot;
  zip_append2:
    &quot;zip <atom kind = "var">?xs</atom> (<atom kind = "var">?ys</atom> @ <atom kind = "var">?zs</atom>) =
     zip (take (length <atom kind = "var">?ys</atom>) <atom kind = "var">?xs</atom>) <atom kind = "var">?ys</atom> @ zip (drop (length <atom kind = "var">?ys</atom>) <atom kind = "var">?xs</atom>) <atom kind = "var">?zs</atom>&quot;
  zip_list_def:
    &quot;zip ==
     %<atom kind = "bound">u</atom> <atom kind = "bound">ua</atom>.
        list_rec (%<atom kind = "bound">xs</atom>. [])
         (%<atom kind = "bound">y</atom> <atom kind = "bound">ys</atom> <atom kind = "bound">ysa</atom>. list_case [] (%<atom kind = "bound">z</atom> <atom kind = "bound">zs</atom>. (<atom kind = "bound">z</atom>, <atom kind = "bound">y</atom>) # <atom kind = "bound">ysa</atom> <atom kind = "bound">zs</atom>)) <atom kind = "bound">ua</atom> <atom kind = "bound">u</atom>&quot;
  zip_replicate:
    &quot;zip (replicate <atom kind = "var">?i</atom> <atom kind = "var">?x</atom>) (replicate <atom kind = "var">?j</atom> <atom kind = "var">?y</atom>) =
     replicate (min <atom kind = "var">?i</atom> <atom kind = "var">?j</atom>) (<atom kind = "var">?x</atom>, <atom kind = "var">?y</atom>)&quot;
  zip_rev:
    &quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>
     ==&gt; zip (rev <atom kind = "var">?xs</atom>) (rev <atom kind = "var">?ys</atom>) = rev (zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>)&quot;
  zip_update:
    &quot;length <atom kind = "var">?xs</atom> = length <atom kind = "var">?ys</atom>
     ==&gt; zip (<atom kind = "var">?xs</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?x</atom>]) (<atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := <atom kind = "var">?y</atom>]) = zip <atom kind = "var">?xs</atom> <atom kind = "var">?ys</atom>[<atom kind = "var">?i</atom> := (<atom kind = "var">?x</atom>, <atom kind = "var">?y</atom>)]&quot;</idvalue></pgip>


<pgip class = "pg" origin = "Isabelle/Isar" id = "montague.davesnet/da/1092868894.810" refseq = "1" refid = "X" seq = "13"><errorresponse fatality = "fatal">*** No working context defined</errorresponse></pgip>


<pgip class = "pg" origin = "Isabelle/Isar" id = "montague.davesnet/da/1092868894.810" refseq = "1" refid = "X" seq = "15"><proofstate><pgml><statedisplay>theory Example =
  {ProtoPure, CPure, HOL, Set, Typedef, Fun, Product_Type, Lfp, Gfp,
    Sum_Type, Relation, Record, Inductive, Transitive_Closure,
    Wellfounded_Recursion, LOrder, OrderedGroup, Ring_and_Field, Nat,
    NatArith, Divides, Power, Finite_Set, Equiv, IntDef, Numeral, IntArith,
    Wellfounded_Relations, Datatype_Universe, Datatype, Recdef, IntDiv,
    NatBin, NatSimprocs, SetInterval, Presburger, Relation_Power, Parity,
    PreList, List, Map, Hilbert_Choice, Infinite_Set, Extraction, Refute,
    Main, #}</statedisplay></pgml></proofstate></pgip>

</pgips>
